{
    "model": "gpt-3.5-turbo",
    "timestamp": "2024-02-24|12:10:24",
    "responses": [
        {
            "example": 0,
            "response": [
                "perform_in_talent_shows(\"bonnie\")",
                [
                    "all x ((perform_in_talent_shows(x)  ->  attend_school_events(x)) )",
                    "all x (((perform_in_talent_shows(x)  &   -inactive_member(x))  |  ( -perform_in_talent_shows(x)  &  inactive_member(x))) )",
                    "all x ((chaperone_dances(x)  ->   -is_student(x)) )",
                    "all x ((inactive_member(x)  ->  chaperone_dances(x)) )",
                    "all x ((wish_to_further_academic_careers(x)  ->  is_student(x)) )",
                    "((attend_school_events(\"bonnie\")  &  is_student(\"bonnie\"))  |   -(attend_school_events(\"bonnie\")  &  is_student(\"bonnie\"))) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nbonnie ::: represents bonnie\nPredicates:\nperform_in_talent_shows(x) ::: x performs in school talent shows often.\nattend_school_events(x) ::: x attends and is very engaged with school events.\ninactive_member(x) ::: x is an inactive and disinterested member of their community.\nchaperone_dances(x) ::: x chaperones high school dances.\nis_student(x) ::: x is a student who attends the school.\nwish_to_further_academic_careers(x) ::: x is a young child or teenager who wishes to further their academic careers and educational opportunities.\nPremises:\n\u2200x (perform_in_talent_shows(x) \u2192 attend_school_events(x)) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.\n\u2200x ((perform_in_talent_shows(x) \u2227 \u00acinactive_member(x)) \u2228 (\u00acperform_in_talent_shows(x) \u2227 inactive_member(x))) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.\n\u2200x (chaperone_dances(x) \u2192 \u00acis_student(x)) ::: If people chaperone high school dances, then they are not students who attend the school.\n\u2200x (inactive_member(x) \u2192 chaperone_dances(x)) ::: All people who are inactive and disinterested members of their community chaperone high school dances.\n\u2200x (wish_to_further_academic_careers(x) \u2192 is_student(x)) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n((attend_school_events(\"bonnie\") \u2227 is_student(\"bonnie\")) \u2228 \u00ac(attend_school_events(\"bonnie\") \u2227 is_student(\"bonnie\"))) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nQuery:\nperform_in_talent_shows(\"bonnie\") ::: Bonnie performs in school talent shows often.",
            "problem": " If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBonnie performs in school talent shows often."
        },
        {
            "example": 1,
            "response": [
                "((wish_to_further_academic_career(\"bonnie\")  &  chaperone_dances(\"bonnie\"))  |  ( -wish_to_further_academic_career(\"bonnie\")  &   -chaperone_dances(\"bonnie\")))  ->  ((is_student(\"bonnie\")  |  inactive_member(\"bonnie\")))",
                [
                    "all x ((perform_in_talent_show(x)  ->  attend_school_events(x)) )",
                    "all x (((perform_in_talent_show(x)  &   -inactive_member(x))  |  ( -perform_in_talent_show(x)  &  inactive_member(x))) )",
                    "all x ((chaperone_dances(x)  ->   -is_student(x)) )",
                    "all x ((inactive_member(x)  ->  chaperone_dances(x)) )",
                    "all x ((wish_to_further_academic_career(x)  ->  is_student(x)) )",
                    "((attend_school_events(\"bonnie\")  &  is_student(\"bonnie\"))  |  ( -attend_school_events(\"bonnie\")  &   -is_student(\"bonnie\"))) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nbonnie ::: represents bonnie\nPredicates:\nperform_in_talent_show(x) ::: x performs in school talent shows often.\nattend_school_events(x) ::: x attends and is very engaged with school events.\ninactive_member(x) ::: x is an inactive and disinterested member of their community.\nchaperone_dances(x) ::: x chaperones high school dances.\nis_student(x) ::: x is a student who attends the school.\nwish_to_further_academic_career(x) ::: x is a young child or teenager who wishes to further their academic career and educational opportunities.\nPremises:\n\u2200x (perform_in_talent_show(x) \u2192 attend_school_events(x)) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.\n\u2200x ((perform_in_talent_show(x) \u2227 \u00acinactive_member(x)) \u2228 (\u00acperform_in_talent_show(x) \u2227 inactive_member(x))) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.\n\u2200x (chaperone_dances(x) \u2192 \u00acis_student(x)) ::: If people chaperone high school dances, then they are not students who attend the school.\n\u2200x (inactive_member(x) \u2192 chaperone_dances(x)) ::: All people who are inactive and disinterested members of their community chaperone high school dances.\n\u2200x (wish_to_further_academic_career(x) \u2192 is_student(x)) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n((attend_school_events(\"bonnie\") \u2227 is_student(\"bonnie\")) \u2228 (\u00acattend_school_events(\"bonnie\") \u2227 \u00acis_student(\"bonnie\"))) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nQuery:\n((wish_to_further_academic_career(\"bonnie\") \u2227 chaperone_dances(\"bonnie\")) \u2228 (\u00acwish_to_further_academic_career(\"bonnie\") \u2227 \u00acchaperone_dances(\"bonnie\"))) \u2192 ((is_student(\"bonnie\") \u2228 inactive_member(\"bonnie\"))) ::: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
            "problem": " If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community."
        },
        {
            "example": 2,
            "response": [
                "((chaperone_dances(\"bonnie\")  |  perform_in_talent_show(\"bonnie\"))  ->  (wish_to_further_education(\"bonnie\")  &  inactive_member(\"bonnie\")))",
                [
                    "all x ((perform_in_talent_show(x)  ->  attend_school_events(x)) )",
                    "all x (((perform_in_talent_show(x)  &   -inactive_member(x))  |  ( -perform_in_talent_show(x)  &  inactive_member(x))) )",
                    "all x ((chaperone_dances(x)  ->   -is_student(x)) )",
                    "all x ((inactive_member(x)  ->  chaperone_dances(x)) )",
                    "all x ((wish_to_further_education(x)  ->  is_student(x)) )",
                    "((attend_school_events(\"bonnie\")  &  is_student(\"bonnie\"))  |  ( -attend_school_events(\"bonnie\")  &   -is_student(\"bonnie\"))) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nbonnie ::: represents bonnie\nPredicates:\nperform_in_talent_show(x) ::: x performs in school talent shows often.\nattend_school_events(x) ::: x attends and is very engaged with school events.\ninactive_member(x) ::: x is an inactive and disinterested member of their community.\nchaperone_dances(x) ::: x chaperones high school dances.\nis_student(x) ::: x is a student who attends the school.\nwish_to_further_education(x) ::: x is a young child or teenager who wishes to further their academic career and educational opportunities.\nPremises:\n\u2200x (perform_in_talent_show(x) \u2192 attend_school_events(x)) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.\n\u2200x ((perform_in_talent_show(x) \u2227 \u00acinactive_member(x)) \u2228 (\u00acperform_in_talent_show(x) \u2227 inactive_member(x))) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.\n\u2200x (chaperone_dances(x) \u2192 \u00acis_student(x)) ::: If people chaperone high school dances, then they are not students who attend the school.\n\u2200x (inactive_member(x) \u2192 chaperone_dances(x)) ::: All people who are inactive and disinterested members of their community chaperone high school dances.\n\u2200x (wish_to_further_education(x) \u2192 is_student(x)) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n((attend_school_events(\"bonnie\") \u2227 is_student(\"bonnie\")) \u2228 (\u00acattend_school_events(\"bonnie\") \u2227 \u00acis_student(\"bonnie\"))) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nQuery:\n((chaperone_dances(\"bonnie\") \u2228 perform_in_talent_show(\"bonnie\")) \u2192 (wish_to_further_education(\"bonnie\") \u2227 inactive_member(\"bonnie\"))) ::: If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
            "problem": " If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community."
        },
        {
            "example": 3,
            "response": [
                "have_lunch_in(\"james\", \"company\")",
                [
                    " all x  all y (is_employee(x)  &  schedule_meeting(x, y)  ->  appear_in(x, \"company\")) ",
                    " all x  all y (have_lunch_in(x, \"company\")  ->  schedule_meeting(x, y)) ",
                    "all x (((have_lunch_in(x, \"company\")  &   -have_lunch_in(x, \"home\"))  |  ( -have_lunch_in(x, \"company\")  &  have_lunch_in(x, \"home\"))) )",
                    "all x ((have_lunch_in(x, \"home\")  ->  work_remotely_from(x, \"home\")) )",
                    "all x ((is_employee(x)  &  appear_in(x, \"other_countries\")  ->  work_remotely_from(x, \"home\")) )",
                    "all x ((is_manager(x)  ->   -work_remotely_from(x, \"home\")) )",
                    "((is_manager(\"james\")  &  appear_in(\"james\", \"company\"))  |  ( -is_manager(\"james\")  &   -appear_in(\"james\", \"company\"))) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\njames ::: represents james\ncompany ::: represents the company\nhome ::: represents home\nother_countries ::: represents other countries\nPredicates:\nschedule_meeting(x, y) ::: x schedules a meeting with y.\nappear_in(x, y) ::: x appears in y.\nhave_lunch_in(x, y) ::: x has lunch in y.\nwork_remotely_from(x, y) ::: x works remotely from y.\nis_employee(x) ::: x is an employee.\nis_manager(x) ::: x is a manager.\nPremises:\n\u2200x \u2200y (is_employee(x) \u2227 schedule_meeting(x, y) \u2192 appear_in(x, \"company\")) ::: All employees who schedule a meeting with their customers will appear in the company today.\n\u2200x \u2200y (have_lunch_in(x, \"company\") \u2192 schedule_meeting(x, y)) ::: Everyone who has lunch in the company schedules meetings with their customers.\n\u2200x ((have_lunch_in(x, \"company\") \u2227 \u00achave_lunch_in(x, \"home\")) \u2228 (\u00achave_lunch_in(x, \"company\") \u2227 have_lunch_in(x, \"home\"))) ::: Employees will either have lunch in the company or have lunch at home.\n\u2200x (have_lunch_in(x, \"home\") \u2192 work_remotely_from(x, \"home\")) ::: If an employee has lunch at home, then he/she is working remotely from home.\n\u2200x (is_employee(x) \u2227 appear_in(x, \"other_countries\") \u2192 work_remotely_from(x, \"home\")) ::: All employees who are in other countries work remotely from home.\n\u2200x (is_manager(x) \u2192 \u00acwork_remotely_from(x, \"home\")) ::: No managers work remotely from home.\n((is_manager(\"james\") \u2227 appear_in(\"james\", \"company\")) \u2228 (\u00acis_manager(\"james\") \u2227 \u00acappear_in(\"james\", \"company\"))) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nQuery:\nhave_lunch_in(\"james\", \"company\") ::: James has lunch in the company.",
            "problem": " All employees who schedule a meeting with their customers will appear in the company today.  Everyone who has lunch in the company schedules meetings with their customers.  Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home.  No managers work remotely from home.  James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJames has lunch in the company."
        },
        {
            "example": 4,
            "response": [
                " -have_lunch_in(\"james\", \"company\")",
                [
                    "all x ((is_employee(x)  &  schedule_meeting(x)  ->  appear(x, \"company\")) )",
                    "all x ((have_lunch_in(x, \"company\")  ->  schedule_meeting(x)) )",
                    "all x (((have_lunch_in(x, \"company\")  &   -have_lunch_in(x, \"home\"))  |  ( -have_lunch_in(x, \"company\")  &  have_lunch_in(x, \"home\"))) )",
                    "all x ((have_lunch_in(x, \"home\")  ->  work_remotely_from(x, \"home\")) )",
                    "all x ((is_employee(x)  &  appear(x, \"other_countries\")  ->  work_remotely_from(x, \"home\")) )",
                    "all x ((is_manager(x)  ->   -work_remotely_from(x, \"home\")) )",
                    "((is_manager(\"james\")  &  appear(\"james\", \"company\"))  |  ( -is_manager(\"james\")  &   -appear(\"james\", \"company\"))) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\njames ::: represents james\ncompany ::: represents the company\nhome ::: represents home\nother_countries ::: represents other countries\nPredicates:\nschedule_meeting(x) ::: x schedules a meeting with their customers.\nappear(x, y) ::: x appears in y.\nhave_lunch_in(x, y) ::: x has lunch in y.\nwork_remotely_from(x, y) ::: x works remotely from y.\nis_employee(x) ::: x is an employee.\nis_manager(x) ::: x is a manager.\nPremises:\n\u2200x (is_employee(x) \u2227 schedule_meeting(x) \u2192 appear(x, \"company\")) ::: All employees who schedule a meeting with their customers will appear in the company today.\n\u2200x (have_lunch_in(x, \"company\") \u2192 schedule_meeting(x)) ::: Everyone who has lunch in the company schedules meetings with their customers.\n\u2200x ((have_lunch_in(x, \"company\") \u2227 \u00achave_lunch_in(x, \"home\")) \u2228 (\u00achave_lunch_in(x, \"company\") \u2227 have_lunch_in(x, \"home\"))) ::: Employees will either have lunch in the company or have lunch at home.\n\u2200x (have_lunch_in(x, \"home\") \u2192 work_remotely_from(x, \"home\")) ::: If an employee has lunch at home, then he/she is working remotely from home.\n\u2200x (is_employee(x) \u2227 appear(x, \"other_countries\") \u2192 work_remotely_from(x, \"home\")) ::: All employees who are in other countries work remotely from home.\n\u2200x (is_manager(x) \u2192 \u00acwork_remotely_from(x, \"home\")) ::: No managers work remotely from home.\n((is_manager(\"james\") \u2227 appear(\"james\", \"company\")) \u2228 (\u00acis_manager(\"james\") \u2227 \u00acappear(\"james\", \"company\"))) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nQuery:\n\u00achave_lunch_in(\"james\", \"company\") ::: James does not have lunch in the company.",
            "problem": " All employees who schedule a meeting with their customers will appear in the company today.  Everyone who has lunch in the company schedules meetings with their customers.  Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home.  No managers work remotely from home.  James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJames does not have lunch in the company."
        },
        {
            "example": 5,
            "response": [
                "((is_manager(\"james\")  |  in_other_countries(\"james\"))  ->  ((have_lunch_in(\"james\", \"home\")  &  work_remotely_from(\"james\", \"home\"))  |  ( -have_lunch_in(\"james\", \"home\")  &   -work_remotely_from(\"james\", \"home\"))))",
                [
                    "all x ((is_employee(x)  &  schedule_meeting(x)  ->  appear(x, \"company\")) )",
                    "all x ((have_lunch_in(x, \"company\")  ->  schedule_meeting(x)) )",
                    "all x ((is_employee(x)  ->  (have_lunch_in(x, \"company\")  |  have_lunch_in(x, \"home\"))) )",
                    "all x ((is_employee(x)  &  have_lunch_in(x, \"home\")  ->  work_remotely_from(x, \"home\")) )",
                    "all x ((is_employee(x)  &  in_other_countries(x)  ->  work_remotely_from(x, \"home\")) )",
                    "all x ((is_manager(x)  ->   -work_remotely_from(x, \"home\")) )",
                    "((is_manager(\"james\")  &  appear(\"james\", \"company\"))  |  ( -is_manager(\"james\")  &   -appear(\"james\", \"company\"))) "
                ]
            ],
            "label": "True",
            "text": "Constants:\njames ::: represents james\ncompany ::: represents the company\nhome ::: represents home\nother_countries ::: represents other countries\nPredicates:\nschedule_meeting(x) ::: x schedules a meeting with their customers.\nappear(x, y) ::: x appears in y.\nhave_lunch_in(x, y) ::: x has lunch in y.\nwork_remotely_from(x, y) ::: x works remotely from y.\nis_employee(x) ::: x is an employee.\nis_manager(x) ::: x is a manager.\nin_other_countries(x) ::: x is in other countries.\nPremises:\n\u2200x (is_employee(x) \u2227 schedule_meeting(x) \u2192 appear(x, \"company\")) ::: All employees who schedule a meeting with their customers will appear in the company today.\n\u2200x (have_lunch_in(x, \"company\") \u2192 schedule_meeting(x)) ::: Everyone who has lunch in the company schedules meetings with their customers.\n\u2200x (is_employee(x) \u2192 (have_lunch_in(x, \"company\") \u2228 have_lunch_in(x, \"home\"))) ::: Employees will either have lunch in the company or have lunch at home.\n\u2200x (is_employee(x) \u2227 have_lunch_in(x, \"home\") \u2192 work_remotely_from(x, \"home\")) ::: If an employee has lunch at home, then he/she is working remotely from home.\n\u2200x (is_employee(x) \u2227 in_other_countries(x) \u2192 work_remotely_from(x, \"home\")) ::: All employees who are in other countries work remotely from home.\n\u2200x (is_manager(x) \u2192 \u00acwork_remotely_from(x, \"home\")) ::: No managers work remotely from home.\n((is_manager(\"james\") \u2227 appear(\"james\", \"company\")) \u2228 (\u00acis_manager(\"james\") \u2227 \u00acappear(\"james\", \"company\"))) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nQuery:\n((is_manager(\"james\") \u2228 in_other_countries(\"james\")) \u2192 ((have_lunch_in(\"james\", \"home\") \u2227 work_remotely_from(\"james\", \"home\")) \u2228 (\u00achave_lunch_in(\"james\", \"home\") \u2227 \u00acwork_remotely_from(\"james\", \"home\")))) ::: If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
            "problem": " All employees who schedule a meeting with their customers will appear in the company today.  Everyone who has lunch in the company schedules meetings with their customers.  Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home.  No managers work remotely from home.  James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home."
        },
        {
            "example": 6,
            "response": [
                "exists x ((is_animal(x)))",
                [
                    "is_infectious_disease(\"monkeypox\")  &  caused_by(\"monkeypox\", \"monkeypox_virus\") ",
                    "can_occur_in(\"monkeypox_virus\", \"humans\")  &  is_animal(\"humans\") ",
                    "is_mammal(\"humans\") ",
                    "is_animal(\"mammals\") ",
                    "include_symptons(\"monkeypox\", \"fever\")  &  include_symptons(\"monkeypox\", \"headache\")  &  include_symptons(\"monkeypox\", \"muscle_pains\")  &  include_symptons(\"monkeypox\", \"feeling_tired\") ",
                    "feel_tired_when_get(\"people\", \"glu\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nmonkeypox ::: represents monkeypox\nmonkeypox_virus ::: represents the monkeypox virus\nhumans ::: represents humans\nmammals ::: represents mammals\nfever ::: represents fever\nheadache ::: represents headache\nmuscle_pains ::: represents muscle pains\nfeeling_tired ::: represents feeling tired\nglu ::: represents glu\nPredicates:\nis_infectious_disease(x) ::: x is an infectious disease.\ncaused_by(x, y) ::: x is caused by y.\ncan_occur_in(x, y) ::: x can occur in y.\nis_animal(x) ::: x is an animal.\nis_mammal(x) ::: x is a mammal.\ninclude_symptons(x, y) ::: x includes symptons y.\nfeel_tired_when_get(x, y) ::: x feels tired when gets y.\nPremises:\nis_infectious_disease(\"monkeypox\") \u2227 caused_by(\"monkeypox\", \"monkeypox_virus\") ::: Monkeypox is an infectious disease caused by the monkeypox virus.\ncan_occur_in(\"monkeypox_virus\", \"humans\") \u2227 is_animal(\"humans\") ::: Monkeypox virus can occur in certain animals, including humans.\nis_mammal(\"humans\") ::: Humans are mammals.\nis_animal(\"mammals\") ::: Mammals are animals.\ninclude_symptons(\"monkeypox\", \"fever\") \u2227 include_symptons(\"monkeypox\", \"headache\") \u2227 include_symptons(\"monkeypox\", \"muscle_pains\") \u2227 include_symptons(\"monkeypox\", \"feeling_tired\") ::: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nfeel_tired_when_get(\"people\", \"glu\") ::: People feel tired when they get a glu.\nQuery:\n\u2203x (is_animal(x)) ::: There is an animal.",
            "problem": " Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThere is an animal."
        },
        {
            "example": 7,
            "response": [
                "- exists x (feel_tired_when_get(x, \"flu\"))",
                [
                    "is_disease(\"monkeypox\")  &  caused_by(\"monkeypox\", \"monkeypox_virus\") ",
                    "occur_in(\"monkeypox_virus\", \"animals\")  &  occur_in(\"monkeypox_virus\", \"humans\") ",
                    "is_mammal(\"humans\") ",
                    "is_animal(\"mammals\") ",
                    "symptons_of(\"monkeypox\", \"fever\")  &  symptons_of(\"monkeypox\", \"headache\")  &  symptons_of(\"monkeypox\", \"muscle_pains\")  &  symptons_of(\"monkeypox\", \"feeling_tired\") ",
                    "feel_tired_when_get(\"people\", \"flu\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nmonkeypox ::: represents monkeypox\nmonkeypox_virus ::: represents the monkeypox virus\nhumans ::: represents humans\nmammals ::: represents mammals\nanimals ::: represents animals\nfever ::: represents fever\nheadache ::: represents headache\nmuscle_pains ::: represents muscle pains\nfeeling_tired ::: represents feeling tired\nflu ::: represents flu\nPredicates:\nis_disease(x) ::: x is a disease.\ncaused_by(x, y) ::: x is caused by y.\noccur_in(x, y) ::: x can occur in y.\nis_mammal(x) ::: x is a mammal.\nis_animal(x) ::: x is an animal.\nsymptons_of(x, y) ::: y is a sympton of x.\nfeel_tired_when_get(x, y) ::: x feels tired when gets y.\nPremises:\nis_disease(\"monkeypox\") \u2227 caused_by(\"monkeypox\", \"monkeypox_virus\") ::: Monkeypox is an infectious disease caused by the monkeypox virus.\noccur_in(\"monkeypox_virus\", \"animals\") \u2227 occur_in(\"monkeypox_virus\", \"humans\") ::: Monkeypox virus can occur in certain animals, including humans.\nis_mammal(\"humans\") ::: Humans are mammals.\nis_animal(\"mammals\") ::: Mammals are animals.\nsymptons_of(\"monkeypox\", \"fever\") \u2227 symptons_of(\"monkeypox\", \"headache\") \u2227 symptons_of(\"monkeypox\", \"muscle_pains\") \u2227 symptons_of(\"monkeypox\", \"feeling_tired\") ::: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nfeel_tired_when_get(\"people\", \"flu\") ::: People feel tired when they get a flu.\nQuery:\n\u00ac\u2203x feel_tired_when_get(x, \"flu\") ::: No one gets flu.",
            "problem": " Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nNo one gets flu."
        },
        {
            "example": 8,
            "response": [
                "include(\"monkeypox\", \"coughing\")",
                [
                    "is_disease(\"monkeypox\")  &  caused_by(\"monkeypox\", \"monkeypox_virus\") ",
                    "occur_in(\"monkeypox_virus\", \"animals\")  &  occur_in(\"monkeypox_virus\", \"humans\") ",
                    "is_mammal(\"humans\") ",
                    "is_animal(\"mammals\") ",
                    "include(\"monkeypox\", \"fever\")  &  include(\"monkeypox\", \"headache\")  &  include(\"monkeypox\", \"muscle_pains\")  &  include(\"monkeypox\", \"feeling_tired\") ",
                    "feel_tired_when_get(\"people\", \"glu\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nmonkeypox ::: represents monkeypox\nmonkeypox_virus ::: represents the monkeypox virus\nhumans ::: represents humans\nmammals ::: represents mammals\nanimals ::: represents animals\nglu ::: represents glu\nPredicates:\nis_disease(x) ::: x is a disease.\ncaused_by(x, y) ::: x is caused by y.\noccur_in(x, y) ::: x occurs in y.\nis_mammal(x) ::: x is a mammal.\nis_animal(x) ::: x is an animal.\ninclude(x, y) ::: x includes y.\nfeel_tired_when_get(x, y) ::: x feels tired when gets y.\nPremises:\nis_disease(\"monkeypox\") \u2227 caused_by(\"monkeypox\", \"monkeypox_virus\") ::: Monkeypox is an infectious disease caused by the monkeypox virus.\noccur_in(\"monkeypox_virus\", \"animals\") \u2227 occur_in(\"monkeypox_virus\", \"humans\") ::: Monkeypox virus can occur in certain animals, including humans.\nis_mammal(\"humans\") ::: Humans are mammals.\nis_animal(\"mammals\") ::: Mammals are animals.\ninclude(\"monkeypox\", \"fever\") \u2227 include(\"monkeypox\", \"headache\") \u2227 include(\"monkeypox\", \"muscle pains\") \u2227 include(\"monkeypox\", \"feeling tired\") ::: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nfeel_tired_when_get(\"people\", \"glu\") ::: People feel tired when they get a glu.\nQuery:\ninclude(\"monkeypox\", \"coughing\") ::: Symptons of Monkeypox include coughing.",
            "problem": " Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSymptons of Monkeypox include coughing."
        },
        {
            "example": 9,
            "response": [
                "is_type(\"tom\",",
                [
                    "all x (((is_type(x, \"eastern_wild_turkey\")  |  is_type(x, \"osceola_wild_turkey\")  |  is_type(x, \"goulds_wild_turkey\")  |  is_type(x, \"merriams_wild_turkey\")  |  is_type(x, \"rio_grande_wild_turkey\")  |  is_type(x, \"ocellated_wild_turkey\"))  &  (is_type(x, \"eastern_wild_turkey\")  ->   -is_type(x, \"osceola_wild_turkey\")  &   -is_type(x, \"goulds_wild_turkey\")  &   -is_type(x, \"merriams_wild_turkey\")  &   -is_type(x, \"rio_grande_wild_turkey\")  &   -is_type(x, \"ocellated_wild_turkey\"))  &  (is_type(x, \"osceola_wild_turkey\")  ->   -is_type(x, \"eastern_wild_turkey\")  &   -is_type(x, \"goulds_wild_turkey\")  &   -is_type(x, \"merriams_wild_turkey\")  &   -is_type(x, \"rio_grande_wild_turkey\")  &   -is_type(x, \"ocellated_wild_turkey\"))  &  (is_type(x, \"goulds_wild_turkey\")  ->   -is_type(x, \"eastern_wild_turkey\")  &   -is_type(x, \"osceola_wild_turkey\")  &   -is_type(x, \"merriams_wild_turkey\")  &   -is_type(x, \"rio_grande_wild_turkey\")  &   -is_type(x, \"ocellated_wild_turkey\"))  &  (is_type(x, \"merriams_wild_turkey\")  ->   -is_type(x, \"eastern_wild_turkey\")  &   -is_type(x, \"osceola_wild_turkey\")  &   -is_type(x, \"goulds_wild_turkey\")  &   -is_type(x, \"rio_grande_wild_turkey\")  &   -is_type(x, \"ocellated_wild_turkey\"))  &  (is_type(x, \"rio_grande_wild_turkey\")  ->   -is_type(x, \"eastern_wild_turkey\")  &   -is_type(x, \"osceola_wild_turkey\")  &   -is_type(x, \"goulds_wild_turkey\")  &   -is_type(x, \"merriams_wild_turkey\")  &   -is_type(x, \"ocellated_wild_turkey\"))  &  (is_type(x, \"ocellated_wild_turkey\")  ->   -is_type(x, \"eastern_wild_turkey\")  &   -is_type(x, \"osceola_wild_turkey\")  &   -is_type(x, \"goulds_wild_turkey\")  &   -is_type(x, \"merriams_wild_turkey\")  &   -is_type(x, \"rio_grande_wild_turkey\"))) )",
                    "is_not_type(\"tom\", \"eastern_wild_turkey\") ",
                    "is_not_type(\"tom\", \"osceola_wild_turkey\") ",
                    "is_not_type(\"tom\", \"goulds_wild_turkey\")  &  is_not_type(\"tom\", \"merriams_wild_turkey\")  &  is_not_type(\"tom\", \"rio_grande_wild_turkey\") ",
                    "is_type(\"tom\", \"wild_turkey\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\ntom ::: represents tom\neastern_wild_turkey ::: represents eastern wild turkey\nosceola_wild_turkey ::: represents osceola wild turkey\ngoulds_wild_turkey ::: represents gould\u2019s wild turkey\nmerriams_wild_turkey ::: represents merriam\u2019s wild turkey\nrio_grande_wild_turkey ::: represents rio grande wild turkey\nocellated_wild_turkey ::: represents ocellated wild turkey\nPredicates:\nis_type(x, y) ::: x is a type of y.\nis_not_type(x, y) ::: x is not a type of y.\nPremises:\n\u2200x ((is_type(x, \"eastern_wild_turkey\") \u2228 is_type(x, \"osceola_wild_turkey\") \u2228 is_type(x, \"goulds_wild_turkey\") \u2228 is_type(x, \"merriams_wild_turkey\") \u2228 is_type(x, \"rio_grande_wild_turkey\") \u2228 is_type(x, \"ocellated_wild_turkey\")) \u2227 (is_type(x, \"eastern_wild_turkey\") \u2192 \u00acis_type(x, \"osceola_wild_turkey\") \u2227 \u00acis_type(x, \"goulds_wild_turkey\") \u2227 \u00acis_type(x, \"merriams_wild_turkey\") \u2227 \u00acis_type(x, \"rio_grande_wild_turkey\") \u2227 \u00acis_type(x, \"ocellated_wild_turkey\")) \u2227 (is_type(x, \"osceola_wild_turkey\") \u2192 \u00acis_type(x, \"eastern_wild_turkey\") \u2227 \u00acis_type(x, \"goulds_wild_turkey\") \u2227 \u00acis_type(x, \"merriams_wild_turkey\") \u2227 \u00acis_type(x, \"rio_grande_wild_turkey\") \u2227 \u00acis_type(x, \"ocellated_wild_turkey\")) \u2227 (is_type(x, \"goulds_wild_turkey\") \u2192 \u00acis_type(x, \"eastern_wild_turkey\") \u2227 \u00acis_type(x, \"osceola_wild_turkey\") \u2227 \u00acis_type(x, \"merriams_wild_turkey\") \u2227 \u00acis_type(x, \"rio_grande_wild_turkey\") \u2227 \u00acis_type(x, \"ocellated_wild_turkey\")) \u2227 (is_type(x, \"merriams_wild_turkey\") \u2192 \u00acis_type(x, \"eastern_wild_turkey\") \u2227 \u00acis_type(x, \"osceola_wild_turkey\") \u2227 \u00acis_type(x, \"goulds_wild_turkey\") \u2227 \u00acis_type(x, \"rio_grande_wild_turkey\") \u2227 \u00acis_type(x, \"ocellated_wild_turkey\")) \u2227 (is_type(x, \"rio_grande_wild_turkey\") \u2192 \u00acis_type(x, \"eastern_wild_turkey\") \u2227 \u00acis_type(x, \"osceola_wild_turkey\") \u2227 \u00acis_type(x, \"goulds_wild_turkey\") \u2227 \u00acis_type(x, \"merriams_wild_turkey\") \u2227 \u00acis_type(x, \"ocellated_wild_turkey\")) \u2227 (is_type(x, \"ocellated_wild_turkey\") \u2192 \u00acis_type(x, \"eastern_wild_turkey\") \u2227 \u00acis_type(x, \"osceola_wild_turkey\") \u2227 \u00acis_type(x, \"goulds_wild_turkey\") \u2227 \u00acis_type(x, \"merriams_wild_turkey\") \u2227 \u00acis_type(x, \"rio_grande_wild_turkey\"))) ::: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nis_not_type(\"tom\", \"eastern_wild_turkey\") ::: Tom is not an Eastern wild turkey.\nis_not_type(\"tom\", \"osceola_wild_turkey\") ::: Tom is not an Osceola wild turkey.\nis_not_type(\"tom\", \"goulds_wild_turkey\") \u2227 is_not_type(\"tom\", \"merriams_wild_turkey\") \u2227 is_not_type(\"tom\", \"rio_grande_wild_turkey\") ::: Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.\nis_type(\"tom\", \"wild_turkey\") ::: Tom is a wild turkey.\nQuery:\nis_type(\"tom\",",
            "problem": " There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTom is an Ocellated wild turkey."
        },
        {
            "example": 10,
            "response": [
                "is_type(\"tom\", \"eastern_wild_turkey\")",
                [
                    "all x (((is_type(x, \"eastern_wild_turkey\")  |  is_type(x, \"osceola_wild_turkey\")  |  is_type(x, \"goulds_wild_turkey\")  |  is_type(x, \"merriams_wild_turkey\")  |  is_type(x, \"rio_grande_wild_turkey\")  |  is_type(x, \"ocellated_wild_turkey\"))  ->  is_wild_turkey(x)) )",
                    " -is_type(\"tom\", \"eastern_wild_turkey\") ",
                    " -is_type(\"tom\", \"osceola_wild_turkey\") ",
                    " -is_type(\"tom\", \"goulds_wild_turkey\")  &   -is_type(\"tom\", \"merriams_wild_turkey\")  &   -is_type(\"tom\", \"rio_grande_wild_turkey\") ",
                    "is_wild_turkey(\"tom\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\ntom ::: represents tom\neastern_wild_turkey ::: represents eastern wild turkey\nosceola_wild_turkey ::: represents osceola wild turkey\ngoulds_wild_turkey ::: represents gould\u2019s wild turkey\nmerriams_wild_turkey ::: represents merriam\u2019s wild turkey\nrio_grande_wild_turkey ::: represents rio grande wild turkey\nocellated_wild_turkey ::: represents ocellated wild turkey\nPredicates:\nis_type(x, y) ::: x is a type of y.\nis_wild_turkey(x) ::: x is a wild turkey.\nPremises:\n\u2200x ((is_type(x, \"eastern_wild_turkey\") \u2228 is_type(x, \"osceola_wild_turkey\") \u2228 is_type(x, \"goulds_wild_turkey\") \u2228 is_type(x, \"merriams_wild_turkey\") \u2228 is_type(x, \"rio_grande_wild_turkey\") \u2228 is_type(x, \"ocellated_wild_turkey\")) \u2192 is_wild_turkey(x)) ::: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\n\u00acis_type(\"tom\", \"eastern_wild_turkey\") ::: Tom is not an Eastern wild turkey.\n\u00acis_type(\"tom\", \"osceola_wild_turkey\") ::: Tom is not an Osceola wild turkey.\n\u00acis_type(\"tom\", \"goulds_wild_turkey\") \u2227 \u00acis_type(\"tom\", \"merriams_wild_turkey\") \u2227 \u00acis_type(\"tom\", \"rio_grande_wild_turkey\") ::: Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.\nis_wild_turkey(\"tom\") ::: Tom is a wild turkey.\nQuery:\nis_type(\"tom\", \"eastern_wild_turkey\") ::: Tom is an Eastern wild turkey.",
            "problem": " There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTom is an Eastern wild turkey."
        },
        {
            "example": 11,
            "response": [
                "Error",
                []
            ],
            "label": "Uncertain",
            "text": "Constants:\ntom ::: represents tom\njoey ::: represents joey\neastern_wild_turkey ::: represents eastern wild turkey\nosceola_wild_turkey ::: represents osceola wild turkey\ngoulds_wild_turkey ::: represents gould\u2019s wild turkey\nmerriams_wild_turkey ::: represents merriam\u2019s wild turkey\nrio_grande_wild_turkey ::: represents rio grande wild turkey\nocellated_wild_turkey ::: represents ocellated wild turkey\nPredicates:\nis_wild_turkey(x) ::: x is a wild turkey.\nis_eastern_wild_turkey(x) ::: x is an eastern wild turkey.\nis_osceola_wild_turkey(x) ::: x is an osceola wild turkey.\nis_goulds_wild_turkey(x) ::: x is a gould\u2019s wild turkey.\nis_merriams_wild_turkey(x) ::: x is a merriam\u2019s wild turkey.\nis_rio_grande_wild_turkey(x) ::: x is a rio grande wild turkey.\nis_ocellated_wild_turkey(x) ::: x is an ocellated wild turkey.\nPremises:\n\u2200x ((is_wild_turkey(x) \u2192 (is_eastern_wild_turkey(x) \u2228 is_osceola_wild_turkey(x) \u2228 is_goulds_wild_turkey(x) \u2228 is_merriams_wild_turkey(x) \u2228 is_rio_grande_wild_turkey(x) \u2228 is_ocellated_wild_turkey(x))) \u2227 (is_eastern_wild_turkey(x) \u2192 \u00acis_osceola_wild_turkey(x) \u2227 \u00acis_goulds_wild_turkey(x) \u2227 \u00acis_merriams_wild_turkey(x) \u2227 \u00acis_rio_grande_wild_turkey(x) \u2227 \u00acis_ocellated_wild_turkey(x)) \u2227 (is_osceola_wild_turkey(x) \u2192 \u00acis_eastern_wild_turkey(x) \u2227 \u00acis_goulds_wild_turkey(x) \u2227 \u00acis_merriams_wild_turkey(x) \u2227 \u00acis_rio_grande_wild_turkey(x) \u2227 \u00acis_ocellated_wild_turkey(x)) \u2227 (is_goulds_wild_turkey(x) \u2192 \u00acis_eastern_wild_turkey(x) \u2227 \u00acis_osceola_wild_turkey(x) \u2227 \u00acis_merriams_wild_turkey(x) \u2227 \u00acis_rio_grande_wild_turkey(x) \u2227 \u00acis_ocellated_wild_turkey(x)) \u2227 (is_merriams_wild_turkey(x) \u2192 \u00acis_eastern_wild_turkey(x) \u2227 \u00acis_osceola_wild_turkey(x) \u2227 \u00acis_goulds_wild_turkey(x) \u2227 \u00acis_rio_grande_wild_turkey(x) \u2227 \u00acis_ocellated_wild_turkey(x)) \u2227 (is_rio_grande_wild_turkey(x) \u2192 \u00acis_eastern_wild_turkey(x) \u2227 \u00acis_osceola_wild_turkey(x) \u2227 \u00acis_goulds_wild_turkey(x) \u2227 \u00acis_merriams_wild_turkey(x) \u2227 \u00acis_ocellated_wild_turkey(x)) \u2227 (is_ocellated_wild_turkey(x) \u2192 \u00acis_eastern_wild_turkey(x) \u2227 \u00acis_osceola_wild_turkey(x) \u2227 \u00acis_goulds_wild_turkey(x) \u2227 \u00acis_merriams_wild_turkey(x) \u2227 \u00acis_rio_grande_wild_turkey(x))) ::: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\n\u00acis_eastern_wild_turkey(\"tom\") ::: Tom is not an Eastern wild turkey.\n\u00acis_osceola_wild_turkey(\"tom\") ::: Tom is not an Osceola wild turkey.\n\u00acis_goulds_wild_turkey(\"tom\") \u2227 \u00acis_merriams_wild_turkey(\"tom\") \u2227 \u00acis_rio_grande_wild_turkey(\"tom\") ::: Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.\nis_wild_turkey(\"tom\") ::: Tom is a wild",
            "problem": " There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJoey is a wild turkey."
        },
        {
            "example": 12,
            "response": [
                "is_in(\"legend_of_zelda\", \"top_10_list\")",
                [
                    "create(\"japanese_game_company\", \"legend_of_zelda\") ",
                    "all x ((is_in(x, \"top_10_list\")  ->  made_by(x, \"japanese_game_company\")) )",
                    "all x ((sell_more_than(x, \"one_million_copies\")  ->  is_in(x, \"top_10_list\")) )",
                    "sell_more_than(\"legend_of_zelda\", \"one_million_copies\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\njapanese_game_company ::: represents a Japanese game company\nlegend_of_zelda ::: represents the game the Legend of Zelda\ntop_10_list ::: represents the Top 10 list\none_million_copies ::: represents one million copies\nPredicates:\ncreate(x, y) ::: x creates y.\nis_game(x) ::: x is a game.\nmade_by(x, y) ::: x is made by y.\nsell_more_than(x, y) ::: x sells more than y.\nis_in(x, y) ::: x is in y.\nPremises:\ncreate(\"japanese_game_company\", \"legend_of_zelda\") ::: A Japanese game company created the game the Legend of Zelda.\n\u2200x (is_in(x, \"top_10_list\") \u2192 made_by(x, \"japanese_game_company\")) ::: All games in the Top 10 list are made by Japanese game companies.\n\u2200x (sell_more_than(x, \"one_million_copies\") \u2192 is_in(x, \"top_10_list\")) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nsell_more_than(\"legend_of_zelda\", \"one_million_copies\") ::: The Legend of Zelda sold more than one million copies.\nQuery:\nis_in(\"legend_of_zelda\", \"top_10_list\") ::: The Legend of Zelda is in the Top 10 list.",
            "problem": " A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThe Legend of Zelda is in the Top 10 list."
        },
        {
            "example": 13,
            "response": [
                "made_by(\"fifa_22\", \"japanese_game_company\")",
                [
                    "created(\"japanese_game_company\", \"legend_of_zelda\") ",
                    "all x ((is_game(x)  &  selected_into(x, \"top_10_list\")  ->  made_by(x, \"japanese_game_company\")) )",
                    "all x ((is_game(x)  &  sells_more_than(x, \"one_million_copies\")  ->  selected_into(x, \"top_10_list\")) )",
                    "sells_more_than(\"legend_of_zelda\", \"one_million_copies\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\njapanese_game_company ::: represents a Japanese game company\nlegend_of_zelda ::: represents the game the Legend of Zelda\ntop_10_list ::: represents the Top 10 list\none_million_copies ::: represents one million copies\nfifa_22 ::: represents the game FIFA 22\nPredicates:\ncreated(x, y) ::: x created y.\nis_game(x) ::: x is a game.\nmade_by(x, y) ::: x is made by y.\nsells_more_than(x, y) ::: x sells more than y.\nselected_into(x, y) ::: x is selected into y.\nPremises:\ncreated(\"japanese_game_company\", \"legend_of_zelda\") ::: A Japanese game company created the game the Legend of Zelda.\n\u2200x (is_game(x) \u2227 selected_into(x, \"top_10_list\") \u2192 made_by(x, \"japanese_game_company\")) ::: All games in the Top 10 list are made by Japanese game companies.\n\u2200x (is_game(x) \u2227 sells_more_than(x, \"one_million_copies\") \u2192 selected_into(x, \"top_10_list\")) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nsells_more_than(\"legend_of_zelda\", \"one_million_copies\") ::: The Legend of Zelda sold more than one million copies.\nQuery:\nmade_by(\"fifa_22\", \"japanese_game_company\") ::: FIFA 22 is made by a Japanese video game company.",
            "problem": " A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nFIFA 22 is made by a Japanese video game company."
        },
        {
            "example": 14,
            "response": [
                " -is_in(\"legend_of_zelda\", \"top_10_list\")",
                [
                    "create(\"japanese_game_company\", \"legend_of_zelda\") ",
                    "all x ((is_in(x, \"top_10_list\")  ->  made_by(x, \"japanese_game_company\")) )",
                    "all x ((sell_more_than(x, \"one_million_copies\")  ->  is_in(x, \"top_10_list\")) )",
                    "sell_more_than(\"legend_of_zelda\", \"one_million_copies\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\njapanese_game_company ::: represents a Japanese game company\nlegend_of_zelda ::: represents the game the Legend of Zelda\ntop_10_list ::: represents the Top 10 list\none_million_copies ::: represents one million copies\nPredicates:\ncreate(x, y) ::: x creates y.\nis_game(x) ::: x is a game.\nmade_by(x, y) ::: x is made by y.\nsell_more_than(x, y) ::: x sells more than y.\nis_in(x, y) ::: x is in y.\nPremises:\ncreate(\"japanese_game_company\", \"legend_of_zelda\") ::: A Japanese game company created the game the Legend of Zelda.\n\u2200x (is_in(x, \"top_10_list\") \u2192 made_by(x, \"japanese_game_company\")) ::: All games in the Top 10 list are made by Japanese game companies.\n\u2200x (sell_more_than(x, \"one_million_copies\") \u2192 is_in(x, \"top_10_list\")) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nsell_more_than(\"legend_of_zelda\", \"one_million_copies\") ::: The Legend of Zelda sold more than one million copies.\nQuery:\n\u00acis_in(\"legend_of_zelda\", \"top_10_list\") ::: The Legend of Zelda is not in the Top 10 list.",
            "problem": " A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThe Legend of Zelda is not in the Top 10 list."
        },
        {
            "example": 15,
            "response": [
                "all x ((is_square(x)  ->  is_shape(x)))",
                [
                    "all x ((is_square(x)  ->  has_four_sides(x)) )",
                    "all x ((has_four_sides(x)  ->  is_shape(x)) )"
                ]
            ],
            "label": "True",
            "text": "Constants:\nNone\nPredicates:\nis_square(x) ::: x is a square.\nhas_four_sides(x) ::: x has four sides.\nis_shape(x) ::: x is a shape.\nPremises:\n\u2200x (is_square(x) \u2192 has_four_sides(x)) ::: All squares have four sides.\n\u2200x (has_four_sides(x) \u2192 is_shape(x)) ::: All four-sided things are shapes.\nQuery:\n\u2200x (is_square(x) \u2192 is_shape(x)) ::: All squares are shapes.",
            "problem": " All squares have four sides. All four-sided things are shapes. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nAll squares are shapes."
        },
        {
            "example": 16,
            "response": [
                "is_turtle(\"rock\")",
                [
                    "all x ((is_rabbit(x)  ->  is_cute(x)) )",
                    "exists x ((is_turtle(x)) )",
                    "all x (((is_rabbit(x)  &   -is_squirrel(x))  |  ( -is_rabbit(x)  &  is_squirrel(x))) )",
                    "all x ((is_skittish(x)  ->   -is_still(x)) )",
                    "all x ((is_squirrel(x)  ->  is_skittish(x)) )",
                    "is_still(\"rock\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nrock ::: represents a rock\nPredicates:\nis_rabbit(x) ::: x is a rabbit.\nis_cute(x) ::: x is cute.\nexists(x) ::: x exists.\nis_animal(x) ::: x is an animal.\nis_squirrel(x) ::: x is a squirrel.\nis_skittish(x) ::: x is skittish.\nis_still(x) ::: x is still.\nis_turtle(x) ::: x is a turtle.\nPremises:\n\u2200x (is_rabbit(x) \u2192 is_cute(x)) ::: All rabbits are cute.\n\u2203x (is_turtle(x)) ::: Some turtles exist.\n\u2200x ((is_rabbit(x) \u2227 \u00acis_squirrel(x)) \u2228 (\u00acis_rabbit(x) \u2227 is_squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n\u2200x (is_skittish(x) \u2192 \u00acis_still(x)) ::: If something is skittish, then it is not still.\n\u2200x (is_squirrel(x) \u2192 is_skittish(x)) ::: All squirrels are skittish.\nis_still(\"rock\") ::: Rock is still.\nQuery:\nis_turtle(\"rock\") ::: Rock is a turtle.",
            "problem": " All rabbits are cute.  Some turtles exist.  An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRock is a turtle."
        },
        {
            "example": 17,
            "response": [
                " -exists(\"rock\")",
                [
                    "all x ((is_rabbit(x)  ->  is_cute(x)) )",
                    " exists x (exists(x)) ",
                    "all x (((is_rabbit(x)  &   -is_squirrel(x))  |  ( -is_rabbit(x)  &  is_squirrel(x))) )",
                    "all x ((is_skittish(x)  ->   -is_still(x)) )",
                    "all x ((is_squirrel(x)  ->  is_skittish(x)) )",
                    "is_still(\"rock\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nrock ::: represents a rock\nPredicates:\nis_rabbit(x) ::: x is a rabbit.\nis_cute(x) ::: x is cute.\nexists(x) ::: x exists.\nis_animal(x) ::: x is an animal.\nis_squirrel(x) ::: x is a squirrel.\nis_skittish(x) ::: x is skittish.\nis_still(x) ::: x is still.\nPremises:\n\u2200x (is_rabbit(x) \u2192 is_cute(x)) ::: All rabbits are cute.\n\u2203x (exists(x)) ::: Some turtles exist.\n\u2200x ((is_rabbit(x) \u2227 \u00acis_squirrel(x)) \u2228 (\u00acis_rabbit(x) \u2227 is_squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n\u2200x (is_skittish(x) \u2192 \u00acis_still(x)) ::: If something is skittish, then it is not still.\n\u2200x (is_squirrel(x) \u2192 is_skittish(x)) ::: All squirrels are skittish.\nis_still(\"rock\") ::: Rock is still.\nQuery:\n\u00acexists(\"rock\") ::: Rock is not a turtle.",
            "problem": " All rabbits are cute.  Some turtles exist.  An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRock is not a turtle."
        },
        {
            "example": 18,
            "response": [
                "(is_turtle(\"rock\")  |  is_cute(\"rock\"))",
                [
                    "all x ((is_rabbit(x)  ->  is_cute(x)) )",
                    "exists x ((is_turtle(x)) )",
                    "all x (((is_rabbit(x)  &   -is_squirrel(x))  |  ( -is_rabbit(x)  &  is_squirrel(x))) )",
                    "all x ((is_skittish(x)  ->   -is_still(x)) )",
                    "all x ((is_squirrel(x)  ->  is_skittish(x)) )",
                    "is_still(\"rock\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nrock ::: represents a rock\nPredicates:\nis_rabbit(x) ::: x is a rabbit.\nis_cute(x) ::: x is cute.\nexist(x) ::: x exists.\nis_turtle(x) ::: x is a turtle.\nis_animal(x) ::: x is an animal.\nis_squirrel(x) ::: x is a squirrel.\nis_skittish(x) ::: x is skittish.\nis_still(x) ::: x is still.\nPremises:\n\u2200x (is_rabbit(x) \u2192 is_cute(x)) ::: All rabbits are cute.\n\u2203x (is_turtle(x)) ::: Some turtles exist.\n\u2200x ((is_rabbit(x) \u2227 \u00acis_squirrel(x)) \u2228 (\u00acis_rabbit(x) \u2227 is_squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n\u2200x (is_skittish(x) \u2192 \u00acis_still(x)) ::: If something is skittish, then it is not still.\n\u2200x (is_squirrel(x) \u2192 is_skittish(x)) ::: All squirrels are skittish.\nis_still(\"rock\") ::: Rock is still.\nQuery:\n(is_turtle(\"rock\") \u2228 is_cute(\"rock\")) ::: Rock is a turtle or cute.",
            "problem": " All rabbits are cute.  Some turtles exist.  An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRock is a turtle or cute."
        },
        {
            "example": 19,
            "response": [
                " -(exist(\"rock\")  &  is_squirrel(\"rock\"))  ->  (is_cute(\"rock\")  |  is_skittish(\"rock\"))",
                [
                    "all x ((is_rabbit(x)  ->  is_cute(x)) )",
                    "exists x (exist(x) )",
                    "all x (((is_rabbit(x)  &   -is_squirrel(x))  |  ( -is_rabbit(x)  &  is_squirrel(x))) )",
                    "all x ((is_skittish(x)  ->   -is_still(x)) )",
                    "all x ((is_squirrel(x)  ->  is_skittish(x)) )",
                    "is_still(\"rock\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nrock ::: represents rock\nPredicates:\nis_rabbit(x) ::: x is a rabbit.\nis_cute(x) ::: x is cute.\nexist(x) ::: x exists.\nis_animal(x) ::: x is an animal.\nis_squirrel(x) ::: x is a squirrel.\nis_skittish(x) ::: x is skittish.\nis_still(x) ::: x is still.\nPremises:\n\u2200x (is_rabbit(x) \u2192 is_cute(x)) ::: All rabbits are cute.\n\u2203x exist(x) ::: Some turtles exist.\n\u2200x ((is_rabbit(x) \u2227 \u00acis_squirrel(x)) \u2228 (\u00acis_rabbit(x) \u2227 is_squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n\u2200x (is_skittish(x) \u2192 \u00acis_still(x)) ::: If something is skittish, then it is not still.\n\u2200x (is_squirrel(x) \u2192 is_skittish(x)) ::: All squirrels are skittish.\nis_still(\"rock\") ::: Rock is still.\nQuery:\n\u00ac(exist(\"rock\") \u2227 is_squirrel(\"rock\")) \u2192 (is_cute(\"rock\") \u2228 is_skittish(\"rock\")) ::: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.",
            "problem": " All rabbits are cute.  Some turtles exist.  An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Rock is not both a turtle and a squirrel, then Rock is either cute or skittish."
        },
        {
            "example": 20,
            "response": [
                "(is_cute(\"rock\")  &  is_still(\"rock\"))  ->  (exist(\"rock\")  &  is_skittish(\"rock\"))",
                [
                    "all x ((is_rabbit(x)  ->  is_cute(x)) )",
                    "exists x ((exist(x)) )",
                    "all x (((is_rabbit(x)  &   -is_squirrel(x))  |  ( -is_rabbit(x)  &  is_squirrel(x))) )",
                    "all x ((is_skittish(x)  ->   -is_still(x)) )",
                    "all x ((is_squirrel(x)  ->  is_skittish(x)) )",
                    "is_still(\"rock\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nrock ::: represents rock\nPredicates:\nis_rabbit(x) ::: x is a rabbit.\nis_cute(x) ::: x is cute.\nexist(x) ::: x exists.\nis_animal(x) ::: x is an animal.\nis_squirrel(x) ::: x is a squirrel.\nis_skittish(x) ::: x is skittish.\nis_still(x) ::: x is still.\nPremises:\n\u2200x (is_rabbit(x) \u2192 is_cute(x)) ::: All rabbits are cute.\n\u2203x (exist(x)) ::: Some turtles exist.\n\u2200x ((is_rabbit(x) \u2227 \u00acis_squirrel(x)) \u2228 (\u00acis_rabbit(x) \u2227 is_squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n\u2200x (is_skittish(x) \u2192 \u00acis_still(x)) ::: If something is skittish, then it is not still.\n\u2200x (is_squirrel(x) \u2192 is_skittish(x)) ::: All squirrels are skittish.\nis_still(\"rock\") ::: Rock is still.\nQuery:\n(is_cute(\"rock\") \u2227 is_still(\"rock\")) \u2192 (exist(\"rock\") \u2227 is_skittish(\"rock\")) ::: If Rock is cute and still, then Rock is a turtle and skittish.",
            "problem": " All rabbits are cute.  Some turtles exist.  An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Rock is cute and still, then Rock is a turtle and skittish."
        },
        {
            "example": 21,
            "response": [
                "share_to(\"karen\", \"stranger_things\", \"lisa\")",
                [
                    "is_netflix_show(\"stranger_things\")  &  is_popular(\"stranger_things\") ",
                    "all x ((is_netflix_show(x)  &  is_popular(x)  ->  binge_watch(\"karen\", x)) )",
                    "all x ((is_netflix_show(x)  ->  (binge_watch(\"karen\", x)  <->  download(\"karen\", x))) )",
                    " -download(\"karen\", \"black_mirror\") ",
                    "is_netflix_show(\"black_mirror\") ",
                    "all x ((is_netflix_show(x)  &  binge_watch(\"karen\", x)  ->  share_to(\"karen\", x, \"lisa\")) )"
                ]
            ],
            "label": "True",
            "text": "Constants:\nstranger_things ::: represents the show \"Stranger Things\"\nkaren ::: represents Karen\nblack_mirror ::: represents the show \"Black Mirror\"\nlisa ::: represents Lisa\nPredicates:\nis_netflix_show(x) ::: x is a Netflix show.\nis_popular(x) ::: x is popular.\nbinge_watch(x, y) ::: x binge-watches y.\ndownload(x, y) ::: x downloads y.\nshare_to(x, y, z) ::: x shares y to z.\nPremises:\nis_netflix_show(\"stranger_things\") \u2227 is_popular(\"stranger_things\") ::: \"Stranger Things\" is a popular Netflix show.\n\u2200x (is_netflix_show(x) \u2227 is_popular(x) \u2192 binge_watch(\"karen\", x)) ::: If a Netflix show is popular, Karen will binge-watch it.\n\u2200x (is_netflix_show(x) \u2192 (binge_watch(\"karen\", x) \u2194 download(\"karen\", x))) ::: If and only if Karen binge-watches a Netflix show, she will download it.\n\u00acdownload(\"karen\", \"black_mirror\") ::: Karen does not download \"Black Mirror\".\nis_netflix_show(\"black_mirror\") ::: \"Black Mirror\" is a Netflix show.\n\u2200x (is_netflix_show(x) \u2227 binge_watch(\"karen\", x) \u2192 share_to(\"karen\", x, \"lisa\")) ::: If Karen binge-watches a Netflix show, she will share it to Lisa.\nQuery:\nshare_to(\"karen\", \"stranger_things\", \"lisa\") ::: Karen will share \"Stranger Things\" to Lisa.",
            "problem": " \"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nKaren will share \"Stranger Things\" to Lisa."
        },
        {
            "example": 22,
            "response": [
                "is_popular(\"black_mirror\")",
                [
                    "is_show(\"stranger_things\")  &  is_popular(\"stranger_things\") ",
                    "all x ((is_show(x)  &  is_popular(x)  ->  binge_watch(\"karen\", x)) )",
                    "all x ((binge_watch(\"karen\", x)  <->  download(\"karen\", x)) )",
                    " -download(\"karen\", \"black_mirror\") ",
                    "is_show(\"black_mirror\") ",
                    "all x ((binge_watch(\"karen\", x)  ->  share(\"karen\", x, \"lisa\")) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\nstranger_things ::: represents the show \"Stranger Things\"\nnetflix ::: represents Netflix\nkaren ::: represents Karen\nblack_mirror ::: represents the show \"Black Mirror\"\nlisa ::: represents Lisa\nPredicates:\nis_show(x) ::: x is a show.\nis_popular(x) ::: x is popular.\nbinge_watch(x, y) ::: x binge-watches y.\ndownload(x, y) ::: x downloads y.\nshare(x, y, z) ::: x shares y to z.\nPremises:\nis_show(\"stranger_things\") \u2227 is_popular(\"stranger_things\") ::: \"Stranger Things\" is a popular Netflix show.\n\u2200x (is_show(x) \u2227 is_popular(x) \u2192 binge_watch(\"karen\", x)) ::: If a Netflix show is popular, Karen will binge-watch it.\n\u2200x (binge_watch(\"karen\", x) \u2194 download(\"karen\", x)) ::: If and only if Karen binge-watches a Netflix show, she will download it.\n\u00acdownload(\"karen\", \"black_mirror\") ::: Karen does not download \"Black Mirror\".\nis_show(\"black_mirror\") ::: \"Black Mirror\" is a Netflix show.\n\u2200x (binge_watch(\"karen\", x) \u2192 share(\"karen\", x, \"lisa\")) ::: If Karen binge-watches a Netflix show, she will share it to Lisa.\nQuery:\nis_popular(\"black_mirror\") ::: \"Black Mirror\" is popular.",
            "problem": " \"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\n\"Black Mirror\" is popular."
        },
        {
            "example": 23,
            "response": [
                "share(\"karen\", \"black_mirror\", \"lisa\")",
                [
                    "is_show(\"stranger_things\")  &  is_popular(\"stranger_things\") ",
                    "all x ((is_show(x)  &  is_popular(x)  ->  binge_watch(\"karen\", x)) )",
                    "all x ((binge_watch(\"karen\", x)  <->  download(\"karen\", x)) )",
                    " -download(\"karen\", \"black_mirror\") ",
                    "is_show(\"black_mirror\") ",
                    "all x ((binge_watch(\"karen\", x)  ->  share(\"karen\", x, \"lisa\")) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nstranger_things ::: represents the show \"Stranger Things\"\nnetflix ::: represents Netflix\nkaren ::: represents Karen\nblack_mirror ::: represents the show \"Black Mirror\"\nlisa ::: represents Lisa\nPredicates:\nis_show(x) ::: x is a show.\nis_popular(x) ::: x is popular.\nbinge_watch(x, y) ::: x binge-watches y.\ndownload(x, y) ::: x downloads y.\nshare(x, y, z) ::: x shares y to z.\nPremises:\nis_show(\"stranger_things\") \u2227 is_popular(\"stranger_things\") ::: \"Stranger Things\" is a popular Netflix show.\n\u2200x (is_show(x) \u2227 is_popular(x) \u2192 binge_watch(\"karen\", x)) ::: If a Netflix show is popular, Karen will binge-watch it.\n\u2200x (binge_watch(\"karen\", x) \u2194 download(\"karen\", x)) ::: If and only if Karen binge-watches a Netflix show, she will download it.\n\u00acdownload(\"karen\", \"black_mirror\") ::: Karen does not download \"Black Mirror\".\nis_show(\"black_mirror\") ::: \"Black Mirror\" is a Netflix show.\n\u2200x (binge_watch(\"karen\", x) \u2192 share(\"karen\", x, \"lisa\")) ::: If Karen binge-watches a Netflix show, she will share it to Lisa.\nQuery:\nshare(\"karen\", \"black_mirror\", \"lisa\") ::: Karen will share \"Black Mirror\" to Lisa.",
            "problem": " \"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nKaren will share \"Black Mirror\" to Lisa."
        },
        {
            "example": 24,
            "response": [
                "hosted(\"beijing\", \"summer_olympics_2008\")  &  hosted(\"beijing\", \"winter_olympics\")",
                [
                    "is_capital(\"beijing\", \"peoples_republic_of_china\") ",
                    "is_most_populous(\"beijing\") ",
                    "is_located_in(\"beijing\", \"northern_china\") ",
                    "hosted(\"beijing\", \"summer_olympics_2008\")  &  hosted(\"beijing\", \"summer_paralympics_2008\") ",
                    "hosted(\"beijing\", \"summer_olympics_2008\")  &  hosted(\"beijing\", \"winter_olympics\")  &  hosted(\"beijing\", \"summer_paralympics_2008\")  &  hosted(\"beijing\", \"winter_paralympics\") ",
                    "has_universities(\"beijing\")  &  rank_among_best(\"beijing\", \"asia_pacific\")  &  rank_among_best(\"beijing\", \"world\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nbeijing ::: represents Beijing\npeoples_republic_of_china ::: represents the People's Republic of China\nnorthern_china ::: represents Northern China\nsummer_olympics_2008 ::: represents the 2008 Summer Olympics\nsummer_paralympics_2008 ::: represents the 2008 Summer Paralympics\nwinter_olympics ::: represents the Winter Olympics\nwinter_paralympics ::: represents the Winter Paralympics\nasia_pacific ::: represents the Asia-Pacific\nworld ::: represents the world\nPredicates:\nis_capital(x, y) ::: x is the capital of y.\nis_most_populous(x) ::: x is the most populous.\nis_located_in(x, y) ::: x is located in y.\nhosted(x, y) ::: x hosted y.\nhas_universities(x) ::: x has universities.\nrank_among_best(x, y) ::: x ranks among the best in y.\nPremises:\nis_capital(\"beijing\", \"peoples_republic_of_china\") ::: Beijing is the capital of the People's Republic of China.\nis_most_populous(\"beijing\") ::: Beijing is the world's most populous national capital city.\nis_located_in(\"beijing\", \"northern_china\") ::: Beijing is located in Northern China.\nhosted(\"beijing\", \"summer_olympics_2008\") \u2227 hosted(\"beijing\", \"summer_paralympics_2008\") ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nhosted(\"beijing\", \"summer_olympics_2008\") \u2227 hosted(\"beijing\", \"winter_olympics\") \u2227 hosted(\"beijing\", \"summer_paralympics_2008\") \u2227 hosted(\"beijing\", \"winter_paralympics\") ::: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nhas_universities(\"beijing\") \u2227 rank_among_best(\"beijing\", \"asia_pacific\") \u2227 rank_among_best(\"beijing\", \"world\") ::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nQuery:\nhosted(\"beijing\", \"summer_olympics_2008\") \u2227 hosted(\"beijing\", \"winter_olympics\") ::: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
            "problem": " Beijing is the capital of the People's Republic of China.  Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBeijing has hosted both the 2008 Summer Olympics and a winter olympics."
        },
        {
            "example": 25,
            "response": [
                "is_located_in(\"beijing\", \"southern_china\")",
                [
                    "is_capital_of(\"beijing\", \"peoples_republic_of_china\") ",
                    "is_most_populous(\"beijing\") ",
                    "is_located_in(\"beijing\", \"northern_china\") ",
                    "hosted(\"beijing\", \"summer_olympics_2008\")  &  hosted(\"beijing\", \"summer_paralympics_2008\") ",
                    "has_hosted(\"beijing\", \"summer_olympics\")  &  has_hosted(\"beijing\", \"winter_olympics\")  &  has_hosted(\"beijing\", \"summer_paralympics\")  &  has_hosted(\"beijing\", \"winter_paralympics\") ",
                    "rank_among_best_in(\"beijing_universities\", \"asia_pacific\")  &  rank_among_best_in(\"beijing_universities\", \"world\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nbeijing ::: represents Beijing\npeoples_republic_of_china ::: represents the People's Republic of China\nnorthern_china ::: represents Northern China\nsummer_olympics_2008 ::: represents the 2008 Summer Olympics\nsummer_paralympics_2008 ::: represents the 2008 Summer Paralympics\nsummer_olympics ::: represents the Summer Olympics\nwinter_olympics ::: represents the Winter Olympics\nsummer_paralympics ::: represents the Summer Paralympics\nwinter_paralympics ::: represents the Winter Paralympics\nbeijing_universities ::: represents Beijing's 91 universities\nasia_pacific ::: represents the Asia-Pacific\nworld ::: represents the world\nPredicates:\nis_capital_of(x, y) ::: x is the capital of y.\nis_most_populous(x) ::: x is the most populous.\nis_located_in(x, y) ::: x is located in y.\nhosted(x, y) ::: x hosted y.\nhas_hosted(x, y) ::: x has hosted y.\nrank_among_best_in(x, y) ::: x ranks among the best in y.\nPremises:\nis_capital_of(\"beijing\", \"peoples_republic_of_china\") ::: Beijing is the capital of the People's Republic of China.\nis_most_populous(\"beijing\") ::: Beijing is the world's most populous national capital city.\nis_located_in(\"beijing\", \"northern_china\") ::: Beijing is located in Northern China.\nhosted(\"beijing\", \"summer_olympics_2008\") \u2227 hosted(\"beijing\", \"summer_paralympics_2008\") ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nhas_hosted(\"beijing\", \"summer_olympics\") \u2227 has_hosted(\"beijing\", \"winter_olympics\") \u2227 has_hosted(\"beijing\", \"summer_paralympics\") \u2227 has_hosted(\"beijing\", \"winter_paralympics\") ::: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nrank_among_best_in(\"beijing_universities\", \"asia_pacific\") \u2227 rank_among_best_in(\"beijing_universities\", \"world\") ::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nQuery:\nis_located_in(\"beijing\", \"southern_china\") ::: Beijing is located in southern China.",
            "problem": " Beijing is the capital of the People's Republic of China.  Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBeijing is located in southern China."
        },
        {
            "example": 26,
            "response": [
                " -is_most_populous(\"beijing\")",
                [
                    "is_capital(\"beijing\", \"peoples_republic_of_china\") ",
                    "is_most_populous(\"beijing\") ",
                    "is_located_in(\"beijing\", \"northern_china\") ",
                    "hosted(\"beijing\", \"summer_olympics_2008\")  &  hosted(\"beijing\", \"summer_paralympics_2008\") ",
                    "has_hosted(\"beijing\", \"summer_olympics\")  &  has_hosted(\"beijing\", \"winter_olympics\")  &  has_hosted(\"beijing\", \"summer_paralympics\")  &  has_hosted(\"beijing\", \"winter_paralympics\") ",
                    "all x ((rank_among_best(x, \"asia_pacific\", \"world\")) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nbeijing ::: represents Beijing\npeoples_republic_of_china ::: represents the People's Republic of China\nnorthern_china ::: represents Northern China\nsummer_olympics_2008 ::: represents the 2008 Summer Olympics\nsummer_paralympics_2008 ::: represents the 2008 Summer Paralympics\nwinter_olympics ::: represents the Winter Olympics\nwinter_paralympics ::: represents the Winter Paralympics\nasia_pacific ::: represents the Asia-Pacific\nworld ::: represents the world\nPredicates:\nis_capital(x, y) ::: x is the capital of y.\nis_most_populous(x) ::: x is the most populous.\nis_located_in(x, y) ::: x is located in y.\nhosted(x, y) ::: x hosted y.\nhas_hosted(x, y) ::: x has hosted y.\nrank_among_best(x, y, z) ::: x ranks among the best in y and z.\nPremises:\nis_capital(\"beijing\", \"peoples_republic_of_china\") ::: Beijing is the capital of the People's Republic of China.\nis_most_populous(\"beijing\") ::: Beijing is the world's most populous national capital city.\nis_located_in(\"beijing\", \"northern_china\") ::: Beijing is located in Northern China.\nhosted(\"beijing\", \"summer_olympics_2008\") \u2227 hosted(\"beijing\", \"summer_paralympics_2008\") ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nhas_hosted(\"beijing\", \"summer_olympics\") \u2227 has_hosted(\"beijing\", \"winter_olympics\") \u2227 has_hosted(\"beijing\", \"summer_paralympics\") \u2227 has_hosted(\"beijing\", \"winter_paralympics\") ::: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\n\u2200x (rank_among_best(x, \"asia_pacific\", \"world\")) ::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nQuery:\n\u00acis_most_populous(\"beijing\") ::: Beijing is the second largest Chinese city by urban population.",
            "problem": " Beijing is the capital of the People's Republic of China.  Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBeijing is the second largest Chinese city by urban population."
        },
        {
            "example": 27,
            "response": [
                "is_alien(\"marvin\")",
                [
                    "all x ((is_alien(x)  ->  is_extraterrestrial(x)) )",
                    "all x ((is_from(x, \"mars\")  ->  is_alien(x)) )",
                    "all x ((is_extraterrestrial(x)  ->   -is_human(x)) )",
                    "all x ((is_from(x, \"earth\")  ->  is_human(x)) )",
                    " -(is_from(\"marvin\", \"earth\")  &  is_from(\"marvin\", \"mars\")) ",
                    " -is_from(\"marvin\", \"earth\")  ->  is_extraterrestrial(\"marvin\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nmarvin ::: represents marvin\nmars ::: represents mars\nearth ::: represents earth\nPredicates:\nis_alien(x) ::: x is an alien.\nis_extraterrestrial(x) ::: x is an extraterrestrial.\nis_from(x, y) ::: x is from y.\nis_human(x) ::: x is a human.\nPremises:\n\u2200x (is_alien(x) \u2192 is_extraterrestrial(x)) ::: All aliens are extraterrestrial.\n\u2200x (is_from(x, \"mars\") \u2192 is_alien(x)) ::: If someone is from Mars, then they are aliens.\n\u2200x (is_extraterrestrial(x) \u2192 \u00acis_human(x)) ::: No extraterrestrial is human.\n\u2200x (is_from(x, \"earth\") \u2192 is_human(x)) ::: Everyone from Earth is a human.\n\u00ac(is_from(\"marvin\", \"earth\") \u2227 is_from(\"marvin\", \"mars\")) ::: Marvin cannot be from Earth and from Mars.\n\u00acis_from(\"marvin\", \"earth\") \u2192 is_extraterrestrial(\"marvin\") ::: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nQuery:\nis_alien(\"marvin\") ::: Marvin is an alien.",
            "problem": " All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMarvin is an alien."
        },
        {
            "example": 28,
            "response": [
                " -is_human(\"marvin\")  &   -is_from(\"marvin\", \"mars\")",
                [
                    "all x ((is_alien(x)  ->  is_extraterrestrial(x)) )",
                    "all x ((is_from(x, \"mars\")  ->  is_alien(x)) )",
                    "all x ((is_extraterrestrial(x)  ->   -is_human(x)) )",
                    "all x ((is_from(x, \"earth\")  ->  is_human(x)) )",
                    " -(is_from(\"marvin\", \"earth\")  &  is_from(\"marvin\", \"mars\")) ",
                    " -is_from(\"marvin\", \"earth\")  ->  is_extraterrestrial(\"marvin\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nmarvin ::: represents marvin\nmars ::: represents mars\nearth ::: represents earth\nPredicates:\nis_alien(x) ::: x is an alien.\nis_extraterrestrial(x) ::: x is extraterrestrial.\nis_from(x, y) ::: x is from y.\nis_human(x) ::: x is a human.\nPremises:\n\u2200x (is_alien(x) \u2192 is_extraterrestrial(x)) ::: All aliens are extraterrestrial.\n\u2200x (is_from(x, \"mars\") \u2192 is_alien(x)) ::: If someone is from Mars, then they are aliens.\n\u2200x (is_extraterrestrial(x) \u2192 \u00acis_human(x)) ::: No extraterrestrial is human.\n\u2200x (is_from(x, \"earth\") \u2192 is_human(x)) ::: Everyone from Earth is a human.\n\u00ac(is_from(\"marvin\", \"earth\") \u2227 is_from(\"marvin\", \"mars\")) ::: Marvin cannot be from Earth and from Mars.\n\u00acis_from(\"marvin\", \"earth\") \u2192 is_extraterrestrial(\"marvin\") ::: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nQuery:\n\u00acis_human(\"marvin\") \u2227 \u00acis_from(\"marvin\", \"mars\") ::: Marvin is neither a human nor from Mars.",
            "problem": " All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMarvin is neither a human nor from Mars."
        },
        {
            "example": 29,
            "response": [
                " -is_from(\"marvin\", \"mars\")  ->  is_human(\"marvin\")",
                [
                    "all x ((is_alien(x)  ->  is_extraterrestrial(x)) )",
                    "all x ((is_from(x, \"mars\")  ->  is_alien(x)) )",
                    "all x ((is_extraterrestrial(x)  ->   -is_human(x)) )",
                    "all x ((is_from(x, \"earth\")  ->  is_human(x)) )",
                    " -(is_from(\"marvin\", \"earth\")  &  is_from(\"marvin\", \"mars\")) ",
                    " -is_from(\"marvin\", \"earth\")  ->  is_extraterrestrial(\"marvin\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nmarvin ::: represents marvin\nmars ::: represents mars\nearth ::: represents earth\nPredicates:\nis_alien(x) ::: x is an alien.\nis_extraterrestrial(x) ::: x is an extraterrestrial.\nis_from(x, y) ::: x is from y.\nis_human(x) ::: x is a human.\nPremises:\n\u2200x (is_alien(x) \u2192 is_extraterrestrial(x)) ::: All aliens are extraterrestrial.\n\u2200x (is_from(x, \"mars\") \u2192 is_alien(x)) ::: If someone is from Mars, then they are aliens.\n\u2200x (is_extraterrestrial(x) \u2192 \u00acis_human(x)) ::: No extraterrestrial is human.\n\u2200x (is_from(x, \"earth\") \u2192 is_human(x)) ::: Everyone from Earth is a human.\n\u00ac(is_from(\"marvin\", \"earth\") \u2227 is_from(\"marvin\", \"mars\")) ::: Marvin cannot be from Earth and from Mars.\n\u00acis_from(\"marvin\", \"earth\") \u2192 is_extraterrestrial(\"marvin\") ::: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nQuery:\n\u00acis_from(\"marvin\", \"mars\") \u2192 is_human(\"marvin\") ::: If Marvin is not from Mars, then Marvin is a human.",
            "problem": " All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Marvin is not from Mars, then Marvin is a human."
        },
        {
            "example": 30,
            "response": [
                "is_grand_slam_champion(\"djokovic\")",
                [
                    "all x (((is_grand_slam_champion(x)  &   -is_oscar_nominated_actor(x))  |  ( -is_grand_slam_champion(x)  &  is_oscar_nominated_actor(x))) )",
                    "all x ((is_grand_slam_champion(x)  ->  is_professional_tennis_player(x)) )",
                    "all x ((is_oscar_nominated_actor(x)  ->  is_celebrity(x)) )",
                    "all x ((is_professional_tennis_player(x)  ->  is_athlete(x)) )",
                    "all x ((is_celebrity(x)  ->  is_well_paid(x)) )",
                    "all x ((is_athlete(x)  ->  is_famous(x)) )",
                    "all x ((is_well_paid(x)  ->  lives_in_tax_haven(x)) )",
                    "(is_famous(\"djokovic\")  &  is_athlete(\"djokovic\"))  ->  is_well_paid(\"djokovic\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\ndjokovic ::: represents Djokovic\nPredicates:\nis_grand_slam_champion(x) ::: x is a Grand Slam champion.\nis_oscar_nominated_actor(x) ::: x is an Oscar-nominated actor.\nis_professional_tennis_player(x) ::: x is a professional tennis player.\nis_celebrity(x) ::: x is a celebrity.\nis_athlete(x) ::: x is an athlete.\nis_well_paid(x) ::: x is well paid.\nlives_in_tax_haven(x) ::: x lives in a tax haven.\nPremises:\n\u2200x ((is_grand_slam_champion(x) \u2227 \u00acis_oscar_nominated_actor(x)) \u2228 (\u00acis_grand_slam_champion(x) \u2227 is_oscar_nominated_actor(x))) ::: A person is either a Grand Slam champion or an Oscar-nominated actor.\n\u2200x (is_grand_slam_champion(x) \u2192 is_professional_tennis_player(x)) ::: All people who are Grand Slam champions are professional tennis players.\n\u2200x (is_oscar_nominated_actor(x) \u2192 is_celebrity(x)) ::: All Oscar-nominated actors are celebrities.\n\u2200x (is_professional_tennis_player(x) \u2192 is_athlete(x)) ::: All professional tennis players are athletes.\n\u2200x (is_celebrity(x) \u2192 is_well_paid(x)) ::: If a person is a celebrity then they are well paid.\n\u2200x (is_athlete(x) \u2192 is_famous(x)) ::: If a person is an athlete then they are famous.\n\u2200x (is_well_paid(x) \u2192 lives_in_tax_haven(x)) ::: All well-paid people live in tax havens.\n(is_famous(\"djokovic\") \u2227 is_athlete(\"djokovic\")) \u2192 is_well_paid(\"djokovic\") ::: If Djokovic is famous and is an athlete, then Djokovic is well paid.\nQuery:\nis_grand_slam_champion(\"djokovic\") ::: Djokovic is a Grand Slam champion.",
            "problem": " A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDjokovic is a Grand Slam champion."
        },
        {
            "example": 31,
            "response": [
                "lives_in_tax_haven(\"djokovic\")",
                [
                    "all x (((is_grand_slam_champion(x)  &   -is_oscar_nominated_actor(x))  |  ( -is_grand_slam_champion(x)  &  is_oscar_nominated_actor(x))) )",
                    "all x ((is_grand_slam_champion(x)  ->  is_professional_tennis_player(x)) )",
                    "all x ((is_oscar_nominated_actor(x)  ->  is_celebrity(x)) )",
                    "all x ((is_professional_tennis_player(x)  ->  is_athlete(x)) )",
                    "all x ((is_celebrity(x)  ->  is_well_paid(x)) )",
                    "all x ((is_athlete(x)  ->  is_famous(x)) )",
                    "all x ((is_well_paid(x)  ->  lives_in_tax_haven(x)) )",
                    "(is_famous(\"djokovic\")  &  is_athlete(\"djokovic\"))  ->  is_well_paid(\"djokovic\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\ndjokovic ::: represents Djokovic\nPredicates:\nis_grand_slam_champion(x) ::: x is a Grand Slam champion.\nis_oscar_nominated_actor(x) ::: x is an Oscar-nominated actor.\nis_professional_tennis_player(x) ::: x is a professional tennis player.\nis_celebrity(x) ::: x is a celebrity.\nis_athlete(x) ::: x is an athlete.\nis_well_paid(x) ::: x is well paid.\nlives_in_tax_haven(x) ::: x lives in a tax haven.\nPremises:\n\u2200x ((is_grand_slam_champion(x) \u2227 \u00acis_oscar_nominated_actor(x)) \u2228 (\u00acis_grand_slam_champion(x) \u2227 is_oscar_nominated_actor(x))) ::: A person is either a Grand Slam champion or an Oscar-nominated actor.\n\u2200x (is_grand_slam_champion(x) \u2192 is_professional_tennis_player(x)) ::: All people who are Grand Slam champions are professional tennis players.\n\u2200x (is_oscar_nominated_actor(x) \u2192 is_celebrity(x)) ::: All Oscar-nominated actors are celebrities.\n\u2200x (is_professional_tennis_player(x) \u2192 is_athlete(x)) ::: All professional tennis players are athletes.\n\u2200x (is_celebrity(x) \u2192 is_well_paid(x)) ::: If a person is a celebrity then they are well paid.\n\u2200x (is_athlete(x) \u2192 is_famous(x)) ::: If a person is an athlete then they are famous.\n\u2200x (is_well_paid(x) \u2192 lives_in_tax_haven(x)) ::: All well-paid people live in tax havens.\n(is_famous(\"djokovic\") \u2227 is_athlete(\"djokovic\")) \u2192 is_well_paid(\"djokovic\") ::: If Djokovic is famous and is an athlete, then Djokovic is well paid.\nQuery:\nlives_in_tax_haven(\"djokovic\") ::: Djokovic lives in a tax haven.",
            "problem": " A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDjokovic lives in a tax haven."
        },
        {
            "example": 32,
            "response": [
                " -lives_in_tax_haven(\"djokovic\")",
                [
                    "all x (((is_grand_slam_champion(x)  &   -is_oscar_nominated_actor(x))  |  ( -is_grand_slam_champion(x)  &  is_oscar_nominated_actor(x))) )",
                    "all x ((is_grand_slam_champion(x)  ->  is_professional_tennis_player(x)) )",
                    "all x ((is_oscar_nominated_actor(x)  ->  is_celebrity(x)) )",
                    "all x ((is_professional_tennis_player(x)  ->  is_athlete(x)) )",
                    "all x ((is_celebrity(x)  ->  is_well_paid(x)) )",
                    "all x ((is_athlete(x)  ->  is_famous(x)) )",
                    "all x ((is_well_paid(x)  ->  lives_in_tax_haven(x)) )",
                    "(is_famous(\"djokovic\")  &  is_athlete(\"djokovic\"))  ->  is_well_paid(\"djokovic\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\ndjokovic ::: represents Djokovic\nPredicates:\nis_grand_slam_champion(x) ::: x is a Grand Slam champion.\nis_oscar_nominated_actor(x) ::: x is an Oscar-nominated actor.\nis_professional_tennis_player(x) ::: x is a professional tennis player.\nis_celebrity(x) ::: x is a celebrity.\nis_athlete(x) ::: x is an athlete.\nis_well_paid(x) ::: x is well paid.\nlives_in_tax_haven(x) ::: x lives in a tax haven.\nPremises:\n\u2200x ((is_grand_slam_champion(x) \u2227 \u00acis_oscar_nominated_actor(x)) \u2228 (\u00acis_grand_slam_champion(x) \u2227 is_oscar_nominated_actor(x))) ::: A person is either a Grand Slam champion or an Oscar-nominated actor.\n\u2200x (is_grand_slam_champion(x) \u2192 is_professional_tennis_player(x)) ::: All people who are Grand Slam champions are professional tennis players.\n\u2200x (is_oscar_nominated_actor(x) \u2192 is_celebrity(x)) ::: All Oscar-nominated actors are celebrities.\n\u2200x (is_professional_tennis_player(x) \u2192 is_athlete(x)) ::: All professional tennis players are athletes.\n\u2200x (is_celebrity(x) \u2192 is_well_paid(x)) ::: If a person is a celebrity then they are well paid.\n\u2200x (is_athlete(x) \u2192 is_famous(x)) ::: If a person is an athlete then they are famous.\n\u2200x (is_well_paid(x) \u2192 lives_in_tax_haven(x)) ::: All well-paid people live in tax havens.\n(is_famous(\"djokovic\") \u2227 is_athlete(\"djokovic\")) \u2192 is_well_paid(\"djokovic\") ::: If Djokovic is famous and is an athlete, then Djokovic is well paid.\nQuery:\n\u00aclives_in_tax_haven(\"djokovic\") ::: Djokovic does not live in a tax haven.",
            "problem": " A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDjokovic does not live in a tax haven."
        },
        {
            "example": 33,
            "response": [
                "leads(\"roderick_strong\", \"diamond_mine\")  &  is_professional_wrestling_stable(\"diamond_mine\")",
                [
                    "is_professional_wrestling_stable(\"diamond_mine\")  &  formed_in(\"diamond_mine\", \"wwe\") ",
                    "leads(\"roderick_strong\", \"diamond_mine\") ",
                    "includes(\"diamond_mine\", \"creed_brothers\")  &  includes(\"diamond_mine\", \"ivy_nile\") ",
                    "has_feud_with(\"imperium\", \"diamond_mine\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\ndiamond_mine ::: represents the diamond mine\nroderick_strong ::: represents roderick strong\ncreed_brothers ::: represents the creed brothers\nivy_nile ::: represents ivy nile\nimperium ::: represents the imperium\nwwe ::: represents the wwe\nPredicates:\nis_professional_wrestling_stable(x) ::: x is a professional wrestling stable.\nformed_in(x, y) ::: x is formed in y.\nleads(x, y) ::: x leads y.\nincludes(x, y) ::: x includes y.\nhas_feud_with(x, y) ::: x has a feud with y.\nPremises:\nis_professional_wrestling_stable(\"diamond_mine\") \u2227 formed_in(\"diamond_mine\", \"wwe\") ::: Diamond Mine is a professional wrestling stable, formed in WWE.\nleads(\"roderick_strong\", \"diamond_mine\") ::: Roderick Strong leads Diamond Mine.\nincludes(\"diamond_mine\", \"creed_brothers\") \u2227 includes(\"diamond_mine\", \"ivy_nile\") ::: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nhas_feud_with(\"imperium\", \"diamond_mine\") ::: Imperium has a feud with Diamond Mine.\nQuery:\nleads(\"roderick_strong\", \"diamond_mine\") \u2227 is_professional_wrestling_stable(\"diamond_mine\") ::: Roderick strong leads a professional wrestling stable.",
            "problem": " Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRoderick strong leads a professional wrestling stable."
        },
        {
            "example": 34,
            "response": [
                "leads(\"roderick_strong\", \"creed_brothers\")",
                [
                    "is_wrestling_stable(\"diamond_mine\")  &  formed_in(\"diamond_mine\", \"wwe\") ",
                    "leads(\"roderick_strong\", \"diamond_mine\") ",
                    "includes(\"diamond_mine\", \"creed_brothers\")  &  includes(\"diamond_mine\", \"ivy_nile\") ",
                    "has_feud_with(\"imperium\", \"diamond_mine\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\ndiamond_mine ::: represents the wrestling stable Diamond Mine\nwwe ::: represents WWE\nroderick_strong ::: represents Roderick Strong\ncreed_brothers ::: represents the Creed Brothers\nivy_nile ::: represents Ivy Nile\nimperium ::: represents Imperium\nPredicates:\nis_wrestling_stable(x) ::: x is a wrestling stable.\nformed_in(x, y) ::: x is formed in y.\nleads(x, y) ::: x leads y.\nincludes(x, y) ::: x includes y.\nhas_feud_with(x, y) ::: x has a feud with y.\nPremises:\nis_wrestling_stable(\"diamond_mine\") \u2227 formed_in(\"diamond_mine\", \"wwe\") ::: Diamond Mine is a professional wrestling stable, formed in WWE.\nleads(\"roderick_strong\", \"diamond_mine\") ::: Roderick Strong leads Diamond Mine.\nincludes(\"diamond_mine\", \"creed_brothers\") \u2227 includes(\"diamond_mine\", \"ivy_nile\") ::: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nhas_feud_with(\"imperium\", \"diamond_mine\") ::: Imperium has a feud with Diamond Mine.\nQuery:\nleads(\"roderick_strong\", \"creed_brothers\") ::: Roderick strong leads the Creed Brothers.",
            "problem": " Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRoderick strong leads the Creed Brothers."
        },
        {
            "example": 35,
            "response": [
                " -has_feud_with(\"imperium\", \"diamond_mine\")",
                [
                    "is_professional_wrestling_stable(\"diamond_mine\")  &  formed_in(\"diamond_mine\", \"wwe\") ",
                    "leads(\"roderick_strong\", \"diamond_mine\") ",
                    "includes(\"diamond_mine\", \"creed_brothers\")  &  includes(\"diamond_mine\", \"ivy_nile\") ",
                    "has_feud_with(\"imperium\", \"diamond_mine\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\ndiamond_mine ::: represents the Diamond Mine\nwwe ::: represents WWE\nroderick_strong ::: represents Roderick Strong\ncreed_brothers ::: represents the Creed Brothers\nivy_nile ::: represents Ivy Nile\nimperium ::: represents Imperium\nPredicates:\nis_professional_wrestling_stable(x) ::: x is a professional wrestling stable.\nformed_in(x, y) ::: x is formed in y.\nleads(x, y) ::: x leads y.\nincludes(x, y) ::: x includes y.\nhas_feud_with(x, y) ::: x has a feud with y.\nPremises:\nis_professional_wrestling_stable(\"diamond_mine\") \u2227 formed_in(\"diamond_mine\", \"wwe\") ::: Diamond Mine is a professional wrestling stable, formed in WWE.\nleads(\"roderick_strong\", \"diamond_mine\") ::: Roderick Strong leads Diamond Mine.\nincludes(\"diamond_mine\", \"creed_brothers\") \u2227 includes(\"diamond_mine\", \"ivy_nile\") ::: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nhas_feud_with(\"imperium\", \"diamond_mine\") ::: Imperium has a feud with Diamond Mine.\nQuery:\n\u00achas_feud_with(\"imperium\", \"diamond_mine\") ::: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
            "problem": " Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile."
        },
        {
            "example": 36,
            "response": [
                " exists y (write(\"beethoven\", y))",
                [
                    "is_music_piece(\"symphony_no_9\") ",
                    " all x  all y (is_music_piece(y)  ->  write(x, y)) ",
                    "write(\"beethoven\", \"symphony_no_9\") ",
                    "premiere(\"vienna_music_society\", \"symphony_no_9\") ",
                    "is_orchestra(\"vienna_music_society\") ",
                    "lead(\"beethoven\", \"vienna_music_society\") ",
                    " all x  all y (is_orchestra(y)  ->  lead(x, y)) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nbeethoven ::: represents Beethoven\nsymphony_no_9 ::: represents Symphony No. 9\nvienna_music_society ::: represents Vienna Music Society\nPredicates:\nis_music_piece(x) ::: x is a music piece.\nwrite(x, y) ::: x writes y.\npremiere(x, y) ::: x premieres y.\nis_orchestra(x) ::: x is an orchestra.\nlead(x, y) ::: x leads y.\nis_conductor(x) ::: x is a conductor.\nPremises:\nis_music_piece(\"symphony_no_9\") ::: Symphony No. 9 is a music piece.\n\u2200x \u2200y (is_music_piece(y) \u2192 write(x, y)) ::: Composers write music pieces.\nwrite(\"beethoven\", \"symphony_no_9\") ::: Beethoven wrote Symphony No. 9.\npremiere(\"vienna_music_society\", \"symphony_no_9\") ::: Vienna Music Society premiered Symphony No. 9.\nis_orchestra(\"vienna_music_society\") ::: Vienna Music Society is an orchestra.\nlead(\"beethoven\", \"vienna_music_society\") ::: Beethoven leads the Vienna Music Society.\n\u2200x \u2200y (is_orchestra(y) \u2192 lead(x, y)) ::: Orchestras are led by conductors.\nQuery:\n\u2203y (write(\"beethoven\", y)) ::: Beethoven is a composer.",
            "problem": " Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBeethoven is a composer."
        },
        {
            "example": 37,
            "response": [
                " exists x  exists y (is_orchestra(x)  &  is_music_piece(y)  &  premiere(x, y))",
                [
                    "is_music_piece(\"symphony_no_9\") ",
                    " all x  all y (is_music_piece(y)  ->  write(x, y)) ",
                    "write(\"beethoven\", \"symphony_no_9\") ",
                    "premiere(\"vienna_music_society\", \"symphony_no_9\") ",
                    "is_orchestra(\"vienna_music_society\") ",
                    "lead(\"beethoven\", \"vienna_music_society\") ",
                    "all x ((is_orchestra(x)  ->  is_conductor(x)) )"
                ]
            ],
            "label": "True",
            "text": "Constants:\nsymphony_no_9 ::: represents Symphony No. 9\nbeethoven ::: represents Beethoven\nvienna_music_society ::: represents Vienna Music Society\nPredicates:\nis_music_piece(x) ::: x is a music piece.\nwrite(x, y) ::: x writes y.\npremiere(x, y) ::: x premieres y.\nis_orchestra(x) ::: x is an orchestra.\nlead(x, y) ::: x leads y.\nis_conductor(x) ::: x is a conductor.\nPremises:\nis_music_piece(\"symphony_no_9\") ::: Symphony No. 9 is a music piece.\n\u2200x \u2200y (is_music_piece(y) \u2192 write(x, y)) ::: Composers write music pieces.\nwrite(\"beethoven\", \"symphony_no_9\") ::: Beethoven wrote Symphony No. 9.\npremiere(\"vienna_music_society\", \"symphony_no_9\") ::: Vienna Music Society premiered Symphony No. 9.\nis_orchestra(\"vienna_music_society\") ::: Vienna Music Society is an orchestra.\nlead(\"beethoven\", \"vienna_music_society\") ::: Beethoven leads the Vienna Music Society.\n\u2200x (is_orchestra(x) \u2192 is_conductor(x)) ::: Orchestras are led by conductors.\nQuery:\n\u2203x \u2203y (is_orchestra(x) \u2227 is_music_piece(y) \u2227 premiere(x, y)) ::: Some orchestras premiered music pieces.",
            "problem": " Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSome orchestras premiered music pieces."
        },
        {
            "example": 38,
            "response": [
                " -is_conductor(\"beethoven\")",
                [
                    "is_music_piece(\"symphony_no_9\") ",
                    " all x  all y (is_music_piece(y)  ->  write(x, y)) ",
                    "write(\"beethoven\", \"symphony_no_9\") ",
                    "premiere(\"vienna_music_society\", \"symphony_no_9\") ",
                    "is_orchestra(\"vienna_music_society\") ",
                    "lead(\"beethoven\", \"vienna_music_society\") ",
                    " all x  all y (is_orchestra(y)  ->  lead(x, y)  &  is_conductor(x)) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nbeethoven ::: represents Beethoven\nsymphony_no_9 ::: represents Symphony No. 9\nvienna_music_society ::: represents Vienna Music Society\nPredicates:\nis_music_piece(x) ::: x is a music piece.\nwrite(x, y) ::: x writes y.\npremiere(x, y) ::: x premieres y.\nis_orchestra(x) ::: x is an orchestra.\nlead(x, y) ::: x leads y.\nis_conductor(x) ::: x is a conductor.\nPremises:\nis_music_piece(\"symphony_no_9\") ::: Symphony No. 9 is a music piece.\n\u2200x \u2200y (is_music_piece(y) \u2192 write(x, y)) ::: Composers write music pieces.\nwrite(\"beethoven\", \"symphony_no_9\") ::: Beethoven wrote Symphony No. 9.\npremiere(\"vienna_music_society\", \"symphony_no_9\") ::: Vienna Music Society premiered Symphony No. 9.\nis_orchestra(\"vienna_music_society\") ::: Vienna Music Society is an orchestra.\nlead(\"beethoven\", \"vienna_music_society\") ::: Beethoven leads the Vienna Music Society.\n\u2200x \u2200y (is_orchestra(y) \u2192 lead(x, y) \u2227 is_conductor(x)) ::: Orchestras are led by conductors.\nQuery:\n\u00acis_conductor(\"beethoven\") ::: Beethoven is not a conductor.",
            "problem": " Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBeethoven is not a conductor."
        },
        {
            "example": 39,
            "response": [
                "is_mass_product_design(\"max\")",
                [
                    "all x ((has_design_style(\"zaha_hadid\")  ->  is_timeless(x)) )",
                    "all x ((is_mass_product_design(x)  ->   -is_timeless(x)) )",
                    "has_design_style(\"zaha_hadid\")  |  has_design_style(\"kelly_wearstler\") ",
                    "all x ((has_design_style(\"kelly_wearstler\")  ->  is_evocative(x)) )",
                    "all x ((has_design_style(\"kelly_wearstler\")  ->  is_dreamy(x)) )",
                    "all x ((is_timeless(x)  ->  (is_mass_product_design(x)  &  is_evocative(x))) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nzaha_hadid ::: represents zaha hadid\nkelly_wearstler ::: represents kelly wearstler\nmax ::: represents max\nPredicates:\nhas_design_style(x) ::: x has a design style.\nis_timeless(x) ::: x is timeless.\nis_mass_product_design(x) ::: x is a mass product design.\nis_evocative(x) ::: x is evocative.\nis_dreamy(x) ::: x is dreamy.\nPremises:\n\u2200x (has_design_style(\"zaha_hadid\") \u2192 is_timeless(x)) ::: All of Zaha Hadid's design styles are timeless.\n\u2200x (is_mass_product_design(x) \u2192 \u00acis_timeless(x)) ::: No mass product design is timeless.\nhas_design_style(\"zaha_hadid\") \u2228 has_design_style(\"kelly_wearstler\") ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.\n\u2200x (has_design_style(\"kelly_wearstler\") \u2192 is_evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.\n\u2200x (has_design_style(\"kelly_wearstler\") \u2192 is_dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.\n\u2200x (is_timeless(x) \u2192 (is_mass_product_design(x) \u2227 is_evocative(x))) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nQuery:\nis_mass_product_design(\"max\") ::: A design by Max is a mass product design.",
            "problem": " All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style.  All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nA design by Max is a mass product design."
        },
        {
            "example": 40,
            "response": [
                "is_evocative(\"max\")  &  is_dreamy(\"max\")",
                [
                    "all x ((has_design_style(\"zaha_hadid\")  ->  is_timeless(x)) )",
                    "all x ((is_mass_product(x)  ->   -is_timeless(x)) )",
                    "has_design_style(\"zaha_hadid\")  |  has_design_style(\"kelly_wearstler\") ",
                    "all x ((has_design_style(\"kelly_wearstler\")  ->  is_evocative(x)) )",
                    "all x ((has_design_style(\"kelly_wearstler\")  ->  is_dreamy(x)) )",
                    "all x ((is_timeless(x)  ->  (is_mass_product(x)  &  is_evocative(x))) )"
                ]
            ],
            "label": "True",
            "text": "Constants:\nzaha_hadid ::: represents zaha hadid\nkelly_wearstler ::: represents kelly wearstler\nmax ::: represents max\nPredicates:\nhas_design_style(x) ::: x has a design style.\nis_timeless(x) ::: x is timeless.\nis_mass_product(x) ::: x is a mass product.\nis_evocative(x) ::: x is evocative.\nis_dreamy(x) ::: x is dreamy.\nPremises:\n\u2200x (has_design_style(\"zaha_hadid\") \u2192 is_timeless(x)) ::: All of Zaha Hadid's design styles are timeless.\n\u2200x (is_mass_product(x) \u2192 \u00acis_timeless(x)) ::: No mass product design is timeless.\nhas_design_style(\"zaha_hadid\") \u2228 has_design_style(\"kelly_wearstler\") ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.\n\u2200x (has_design_style(\"kelly_wearstler\") \u2192 is_evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.\n\u2200x (has_design_style(\"kelly_wearstler\") \u2192 is_dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.\n\u2200x (is_timeless(x) \u2192 (is_mass_product(x) \u2227 is_evocative(x))) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nQuery:\nis_evocative(\"max\") \u2227 is_dreamy(\"max\") ::: A design by Max is evocative and dreamy.",
            "problem": " All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style.  All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nA design by Max is evocative and dreamy."
        },
        {
            "example": 41,
            "response": [
                "is_evocative(max_design)  |  is_dreamy(max_design)",
                [
                    "all x ((zaha_hadid_design_style(x)  ->  is_timeless(x)) )",
                    "all x ((mass_product_design(x)  ->   -is_timeless(x)) )",
                    "zaha_hadid_design_style(x)  |  kelly_wearstler_design_style(x) ",
                    "all x ((kelly_wearstler_design_style(x)  ->  is_evocative(x)) )",
                    "all x ((kelly_wearstler_design_style(x)  ->  is_dreamy(x)) )",
                    "max_design(x)  ->  (is_timeless(x)  &  mass_product_design(x)  &  is_evocative(x)) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nzaha_hadid_design_style ::: represents Zaha Hadid's design style\nmass_product_design ::: represents mass product design\nkelly_wearstler_design_style ::: represents Kelly Wearstler's design style\nmax_design ::: represents a design by Max\nPredicates:\nis_timeless(x) ::: x is timeless.\nis_evocative(x) ::: x is evocative.\nis_dreamy(x) ::: x is dreamy.\nPremises:\n\u2200x (zaha_hadid_design_style(x) \u2192 is_timeless(x)) ::: All of Zaha Hadid's design styles are timeless.\n\u2200x (mass_product_design(x) \u2192 \u00acis_timeless(x)) ::: No mass product design is timeless.\nzaha_hadid_design_style(x) \u2228 kelly_wearstler_design_style(x) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.\n\u2200x (kelly_wearstler_design_style(x) \u2192 is_evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.\n\u2200x (kelly_wearstler_design_style(x) \u2192 is_dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.\nmax_design(x) \u2192 (is_timeless(x) \u2227 mass_product_design(x) \u2227 is_evocative(x)) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nQuery:\nis_evocative(max_design) \u2228 is_dreamy(max_design) ::: A design by Max is either evocative or dreamy.",
            "problem": " All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style.  All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nA design by Max is either evocative or dreamy."
        },
        {
            "example": 42,
            "response": [
                "is_most_active(\"coco_gauff\")",
                [
                    "all x ((is_ranked_highly(x, \"womens_tennis_association\")  ->  is_most_active(x)) )",
                    "all x ((lost_to(x, \"iga_swiatek\")  ->  is_ranked_highly(x, \"womens_tennis_association\")) )",
                    "all x ((is_female_tennis_player(x, \"roland_garros_2022\")  ->  lost_to(x, \"iga_swiatek\")) )",
                    "all x (((is_female_tennis_player(x, \"roland_garros_2022\")  &   -is_male_tennis_player(x, \"roland_garros_2022\"))  |  ( -is_female_tennis_player(x, \"roland_garros_2022\")  &  is_male_tennis_player(x, \"roland_garros_2022\"))) )",
                    "all x ((is_male_tennis_player(x, \"roland_garros_2022\")  ->  lost_to(x, \"rafael_nadal\")) )",
                    "((is_ranked_highly(\"coco_gauff\", \"womens_tennis_association\")  &   -lost_to(\"coco_gauff\", \"rafael_nadal\"))  |  ( -is_ranked_highly(\"coco_gauff\", \"womens_tennis_association\")  &  lost_to(\"coco_gauff\", \"rafael_nadal\")))  ->   -is_male_tennis_player(\"coco_gauff\", \"roland_garros_2022\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\niga_swiatek ::: represents Iga \u015awi\u0105tek\nroland_garros_2022 ::: represents Roland Garros 2022\nrafael_nadal ::: represents Rafael Nadal\ncoco_gauff ::: represents Coco Gauff\nwomens_tennis_association ::: represents the Women's Tennis Association\nPredicates:\nis_ranked_highly(x, y) ::: x is ranked highly by y.\nis_most_active(x) ::: x is among the most active players in major tennis.\nlost_to(x, y) ::: x lost to y.\nis_female_tennis_player(x, y) ::: x is a female tennis player at y.\nis_male_tennis_player(x, y) ::: x is a male tennis player at y.\nPremises:\n\u2200x (is_ranked_highly(x, \"womens_tennis_association\") \u2192 is_most_active(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\n\u2200x (lost_to(x, \"iga_swiatek\") \u2192 is_ranked_highly(x, \"womens_tennis_association\")) ::: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\n\u2200x (is_female_tennis_player(x, \"roland_garros_2022\") \u2192 lost_to(x, \"iga_swiatek\")) ::: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\n\u2200x ((is_female_tennis_player(x, \"roland_garros_2022\") \u2227 \u00acis_male_tennis_player(x, \"roland_garros_2022\")) \u2228 (\u00acis_female_tennis_player(x, \"roland_garros_2022\") \u2227 is_male_tennis_player(x, \"roland_garros_2022\"))) ::: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\n\u2200x (is_male_tennis_player(x, \"roland_garros_2022\") \u2192 lost_to(x, \"rafael_nadal\")) ::: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\n((is_ranked_highly(\"coco_gauff\", \"womens_tennis_association\") \u2227 \u00aclost_to(\"coco_gauff\", \"rafael_nadal\")) \u2228 (\u00acis_ranked_highly(\"coco_gauff\", \"womens_tennis_association\") \u2227 lost_to(\"coco_gauff\", \"rafael_nadal\"))) \u2192 \u00acis_male_tennis_player(\"coco_gauff\", \"roland_garros_2022\") ::: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nQuery:\nis_most_active(\"coco_gauff\") ::: Coco Gauff is among the most active players in major tennis.",
            "problem": " If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.  Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.  All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nCoco Gauff is among the most active players in major tennis."
        },
        {
            "example": 43,
            "response": [
                "lost_to(\"coco_gauff\", \"rafael_nadal\")",
                [
                    "all x ((is_ranked_highly(x, \"womens_tennis_association\")  ->  is_most_active(x)) )",
                    "all x ((lost_to(x, \"iga_swiatek\")  ->  is_ranked_highly(x, \"womens_tennis_association\")) )",
                    "all x ((is_female_tennis_player(x, \"roland_garros_2022\")  ->  lost_to(x, \"iga_swiatek\")) )",
                    "all x (((is_female_tennis_player(x, \"roland_garros_2022\")  &   -is_male_tennis_player(x, \"roland_garros_2022\"))  |  ( -is_female_tennis_player(x, \"roland_garros_2022\")  &  is_male_tennis_player(x, \"roland_garros_2022\"))) )",
                    "all x ((is_male_tennis_player(x, \"roland_garros_2022\")  ->  lost_to(x, \"rafael_nadal\")) )",
                    "((is_ranked_highly(\"coco_gauff\", \"womens_tennis_association\")  &   -lost_to(\"coco_gauff\", \"rafael_nadal\"))  |  ( -is_ranked_highly(\"coco_gauff\", \"womens_tennis_association\")  &  lost_to(\"coco_gauff\", \"rafael_nadal\")))  ->   -is_male_tennis_player(\"coco_gauff\", \"roland_garros_2022\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\niga_swiatek ::: represents Iga \u015awi\u0105tek\nroland_garros_2022 ::: represents Roland Garros 2022\nrafael_nadal ::: represents Rafael Nadal\ncoco_gauff ::: represents Coco Gauff\nwomens_tennis_association ::: represents the Women's Tennis Association\nPredicates:\nis_ranked_highly(x, y) ::: x is ranked highly by y.\nis_most_active(x) ::: x is among the most active players.\nlost_to(x, y) ::: x lost to y.\nis_female_tennis_player(x, y) ::: x is a female tennis player at y.\nis_male_tennis_player(x, y) ::: x is a male tennis player at y.\nPremises:\n\u2200x (is_ranked_highly(x, \"womens_tennis_association\") \u2192 is_most_active(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\n\u2200x (lost_to(x, \"iga_swiatek\") \u2192 is_ranked_highly(x, \"womens_tennis_association\")) ::: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\n\u2200x (is_female_tennis_player(x, \"roland_garros_2022\") \u2192 lost_to(x, \"iga_swiatek\")) ::: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\n\u2200x ((is_female_tennis_player(x, \"roland_garros_2022\") \u2227 \u00acis_male_tennis_player(x, \"roland_garros_2022\")) \u2228 (\u00acis_female_tennis_player(x, \"roland_garros_2022\") \u2227 is_male_tennis_player(x, \"roland_garros_2022\"))) ::: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\n\u2200x (is_male_tennis_player(x, \"roland_garros_2022\") \u2192 lost_to(x, \"rafael_nadal\")) ::: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\n((is_ranked_highly(\"coco_gauff\", \"womens_tennis_association\") \u2227 \u00aclost_to(\"coco_gauff\", \"rafael_nadal\")) \u2228 (\u00acis_ranked_highly(\"coco_gauff\", \"womens_tennis_association\") \u2227 lost_to(\"coco_gauff\", \"rafael_nadal\"))) \u2192 \u00acis_male_tennis_player(\"coco_gauff\", \"roland_garros_2022\") ::: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nQuery:\nlost_to(\"coco_gauff\", \"rafael_nadal\") ::: Coco Gauff has lost to Rafael Nadal.",
            "problem": " If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.  Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.  All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nCoco Gauff has lost to Rafael Nadal."
        },
        {
            "example": 44,
            "response": [
                " -(lost_to(\"coco_gauff\", \"iga_swiatek\")  |  is_most_active(\"coco_gauff\"))",
                [
                    "all x ((is_ranked_highly(x, \"womens_tennis_association\")  ->  is_most_active(x)) )",
                    "all x ((lost_to(x, \"iga_swiatek\")  ->  is_ranked_highly(x, \"womens_tennis_association\")) )",
                    "all x ((is_female_tennis_player(x, \"roland_garros_2022\")  ->  lost_to(x, \"iga_swiatek\")) )",
                    "all x (((is_female_tennis_player(x, \"roland_garros_2022\")  &   -is_male_tennis_player(x, \"roland_garros_2022\"))  |  ( -is_female_tennis_player(x, \"roland_garros_2022\")  &  is_male_tennis_player(x, \"roland_garros_2022\"))) )",
                    "all x ((is_male_tennis_player(x, \"roland_garros_2022\")  ->  lost_to(x, \"rafael_nadal\")) )",
                    "(is_ranked_highly(\"coco_gauff\", \"womens_tennis_association\")  |  lost_to(\"coco_gauff\", \"rafael_nadal\"))  ->   -is_male_tennis_player(\"coco_gauff\", \"roland_garros_2022\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\niga_swiatek ::: represents Iga \u015awi\u0105tek\nroland_garros_2022 ::: represents Roland Garros 2022\nwomens_tennis_association ::: represents the Women's Tennis Association\nrafael_nadal ::: represents Rafael Nadal\ncoco_gauff ::: represents Coco Gauff\nPredicates:\nis_ranked_highly(x, y) ::: x is ranked highly by y.\nis_most_active(x) ::: x is among the most active players in major tennis.\nlost_to(x, y) ::: x lost to y.\nis_female_tennis_player(x, y) ::: x is a female tennis player at y.\nis_male_tennis_player(x, y) ::: x is a male tennis player at y.\nPremises:\n\u2200x (is_ranked_highly(x, \"womens_tennis_association\") \u2192 is_most_active(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\n\u2200x (lost_to(x, \"iga_swiatek\") \u2192 is_ranked_highly(x, \"womens_tennis_association\")) ::: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\n\u2200x (is_female_tennis_player(x, \"roland_garros_2022\") \u2192 lost_to(x, \"iga_swiatek\")) ::: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\n\u2200x ((is_female_tennis_player(x, \"roland_garros_2022\") \u2227 \u00acis_male_tennis_player(x, \"roland_garros_2022\")) \u2228 (\u00acis_female_tennis_player(x, \"roland_garros_2022\") \u2227 is_male_tennis_player(x, \"roland_garros_2022\"))) ::: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\n\u2200x (is_male_tennis_player(x, \"roland_garros_2022\") \u2192 lost_to(x, \"rafael_nadal\")) ::: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\n(is_ranked_highly(\"coco_gauff\", \"womens_tennis_association\") \u2228 lost_to(\"coco_gauff\", \"rafael_nadal\")) \u2192 \u00acis_male_tennis_player(\"coco_gauff\", \"roland_garros_2022\") ::: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nQuery:\n\u00ac(lost_to(\"coco_gauff\", \"iga_swiatek\") \u2228 is_most_active(\"coco_gauff\")) ::: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.",
            "problem": " If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.  Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.  All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nCoco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis."
        },
        {
            "example": 45,
            "response": [
                "all x ((is_pet(x)  ->   -is_cat(x)))",
                [
                    "all x ((is_cat(x)  ->  is_mammal(x)) )",
                    "exists x ((is_pet(x)  &   -is_mammal(x)) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nNone\nPredicates:\nis_cat(x) ::: x is a cat.\nis_mammal(x) ::: x is a mammal.\nis_pet(x) ::: x is a pet.\nPremises:\n\u2200x (is_cat(x) \u2192 is_mammal(x)) ::: All cats are mammals.\n\u2203x (is_pet(x) \u2227 \u00acis_mammal(x)) ::: Some pets are not mammals.\nQuery:\n\u2200x (is_pet(x) \u2192 \u00acis_cat(x)) ::: No pets are cats.",
            "problem": " All cats are mammals. Some pets are not mammals.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nNo pets are cats."
        },
        {
            "example": 46,
            "response": [
                "love_most(\"james\", \"summer\")",
                [
                    " all x ((favorite_season(x, \"spring\")  |  favorite_season(x, \"summer\")  |  favorite_season(x, \"fall\")  |  favorite_season(x, \"winter\"))  &  (favorite_season(x, \"spring\")  ->   -favorite_season(x, \"summer\")  &   -favorite_season(x, \"fall\")  &   -favorite_season(x, \"winter\"))  &  (favorite_season(x, \"summer\")  ->   -favorite_season(x, \"spring\")  &   -favorite_season(x, \"fall\")  &   -favorite_season(x, \"winter\"))  &  (favorite_season(x, \"fall\")  ->   -favorite_season(x, \"spring\")  &   -favorite_season(x, \"summer\")  &   -favorite_season(x, \"winter\"))  &  (favorite_season(x, \"winter\")  ->   -favorite_season(x, \"spring\")  &   -favorite_season(x, \"summer\")  &   -favorite_season(x, \"fall\"))) ",
                    "all x ((want_long_vacation(x)  ->  love_most(x, \"summer\")) )",
                    "favorite_season(\"emma\", \"summer\") ",
                    "all x ((favorite_season(\"mia\", x)  ->   -favorite_season(\"emma\", x)) )",
                    "want_long_vacation(\"james\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nemma ::: represents emma\nmia ::: represents mia\njames ::: represents james\nsummer ::: represents summer\nPredicates:\nfavorite_season(x, y) ::: x's favorite season is y.\nwant_long_vacation(x) ::: x wants to have a long vacation.\nlove_most(x, y) ::: x loves y the most.\nPremises:\n\u2200x ((favorite_season(x, \"spring\") \u2228 favorite_season(x, \"summer\") \u2228 favorite_season(x, \"fall\") \u2228 favorite_season(x, \"winter\")) \u2227 (favorite_season(x, \"spring\") \u2192 \u00acfavorite_season(x, \"summer\") \u2227 \u00acfavorite_season(x, \"fall\") \u2227 \u00acfavorite_season(x, \"winter\")) \u2227 (favorite_season(x, \"summer\") \u2192 \u00acfavorite_season(x, \"spring\") \u2227 \u00acfavorite_season(x, \"fall\") \u2227 \u00acfavorite_season(x, \"winter\")) \u2227 (favorite_season(x, \"fall\") \u2192 \u00acfavorite_season(x, \"spring\") \u2227 \u00acfavorite_season(x, \"summer\") \u2227 \u00acfavorite_season(x, \"winter\")) \u2227 (favorite_season(x, \"winter\") \u2192 \u00acfavorite_season(x, \"spring\") \u2227 \u00acfavorite_season(x, \"summer\") \u2227 \u00acfavorite_season(x, \"fall\"))) ::: There are four seasons in a year: Spring, Summer, Fall, and Winter.\n\u2200x (want_long_vacation(x) \u2192 love_most(x, \"summer\")) ::: All students who want to have a long vacation love summer the most.\nfavorite_season(\"emma\", \"summer\") ::: Emma's favorite season is summer.\n\u2200x (favorite_season(\"mia\", x) \u2192 \u00acfavorite_season(\"emma\", x)) ::: Mia's favorite season is not the same as Emma's.\nwant_long_vacation(\"james\") ::: James wants to have a long vacation.\nQuery:\nlove_most(\"james\", \"summer\") ::: James's favorite season is summer.",
            "problem": " [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's.  James wants to have a long vacation.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJames's favorite season is summer."
        },
        {
            "example": 47,
            "response": [
                "favorite_season(\"james\", \"fall\")",
                [
                    " all x ((favorite_season(x, \"spring\")  |  favorite_season(x, \"summer\")  |  favorite_season(x, \"fall\")  |  favorite_season(x, \"winter\"))  &  (favorite_season(x, \"spring\")  ->   -favorite_season(x, \"summer\")  &   -favorite_season(x, \"fall\")  &   -favorite_season(x, \"winter\"))  &  (favorite_season(x, \"summer\")  ->   -favorite_season(x, \"spring\")  &   -favorite_season(x, \"fall\")  &   -favorite_season(x, \"winter\"))  &  (favorite_season(x, \"fall\")  ->   -favorite_season(x, \"spring\")  &   -favorite_season(x, \"summer\")  &   -favorite_season(x, \"winter\"))  &  (favorite_season(x, \"winter\")  ->   -favorite_season(x, \"spring\")  &   -favorite_season(x, \"summer\")  &   -favorite_season(x, \"fall\"))) ",
                    "all x ((wants_long_vacation(x)  ->  loves_most(x, \"summer\")) )",
                    "favorite_season(\"emma\", \"summer\") ",
                    "all x ((favorite_season(\"mia\", x)  ->   -favorite_season(\"emma\", x)) )",
                    "wants_long_vacation(\"james\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nemma ::: represents emma\nmia ::: represents mia\njames ::: represents james\nsummer ::: represents summer\nfall ::: represents fall\nwinter ::: represents winter\nspring ::: represents spring\nPredicates:\nfavorite_season(x, y) ::: y is the favorite season of x.\nwants_long_vacation(x) ::: x wants to have a long vacation.\nloves_most(x, y) ::: x loves y the most.\nPremises:\n\u2200x ((favorite_season(x, \"spring\") \u2228 favorite_season(x, \"summer\") \u2228 favorite_season(x, \"fall\") \u2228 favorite_season(x, \"winter\")) \u2227 (favorite_season(x, \"spring\") \u2192 \u00acfavorite_season(x, \"summer\") \u2227 \u00acfavorite_season(x, \"fall\") \u2227 \u00acfavorite_season(x, \"winter\")) \u2227 (favorite_season(x, \"summer\") \u2192 \u00acfavorite_season(x, \"spring\") \u2227 \u00acfavorite_season(x, \"fall\") \u2227 \u00acfavorite_season(x, \"winter\")) \u2227 (favorite_season(x, \"fall\") \u2192 \u00acfavorite_season(x, \"spring\") \u2227 \u00acfavorite_season(x, \"summer\") \u2227 \u00acfavorite_season(x, \"winter\")) \u2227 (favorite_season(x, \"winter\") \u2192 \u00acfavorite_season(x, \"spring\") \u2227 \u00acfavorite_season(x, \"summer\") \u2227 \u00acfavorite_season(x, \"fall\"))) ::: There are four seasons in a year: Spring, Summer, Fall, and Winter.\n\u2200x (wants_long_vacation(x) \u2192 loves_most(x, \"summer\")) ::: All students who want to have a long vacation love summer the most.\nfavorite_season(\"emma\", \"summer\") ::: Emma's favorite season is summer.\n\u2200x (favorite_season(\"mia\", x) \u2192 \u00acfavorite_season(\"emma\", x)) ::: Mia's favorite season is not the same as Emma's.\nwants_long_vacation(\"james\") ::: James wants to have a long vacation.\nQuery:\nfavorite_season(\"james\", \"fall\") ::: James's favorite season is fall.",
            "problem": " [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's.  James wants to have a long vacation.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJames's favorite season is fall."
        },
        {
            "example": 48,
            "response": [
                "favorite_season(\"mia\", \"spring\")",
                [
                    " all x ((favorite_season(x, \"spring\")  |  favorite_season(x, \"summer\")  |  favorite_season(x, \"fall\")  |  favorite_season(x, \"winter\"))  &  (favorite_season(x, \"spring\")  ->   -favorite_season(x, \"summer\")  &   -favorite_season(x, \"fall\")  &   -favorite_season(x, \"winter\"))  &  (favorite_season(x, \"summer\")  ->   -favorite_season(x, \"spring\")  &   -favorite_season(x, \"fall\")  &   -favorite_season(x, \"winter\"))  &  (favorite_season(x, \"fall\")  ->   -favorite_season(x, \"spring\")  &   -favorite_season(x, \"summer\")  &   -favorite_season(x, \"winter\"))  &  (favorite_season(x, \"winter\")  ->   -favorite_season(x, \"spring\")  &   -favorite_season(x, \"summer\")  &   -favorite_season(x, \"fall\"))) ",
                    "all x ((wants_long_vacation(x)  ->  loves_summer(x)) )",
                    "favorite_season(\"emma\", \"summer\") ",
                    "all x ((favorite_season(\"mia\", x)  ->   -favorite_season(\"emma\", x)) )",
                    "wants_long_vacation(\"james\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nemma ::: represents emma\nmia ::: represents mia\njames ::: represents james\nspring ::: represents spring\nsummer ::: represents summer\nfall ::: represents fall\nwinter ::: represents winter\nPredicates:\nfavorite_season(x, y) ::: y is the favorite season of x.\nwants_long_vacation(x) ::: x wants to have a long vacation.\nloves_summer(x) ::: x loves summer the most.\nPremises:\n\u2200x ((favorite_season(x, \"spring\") \u2228 favorite_season(x, \"summer\") \u2228 favorite_season(x, \"fall\") \u2228 favorite_season(x, \"winter\")) \u2227 (favorite_season(x, \"spring\") \u2192 \u00acfavorite_season(x, \"summer\") \u2227 \u00acfavorite_season(x, \"fall\") \u2227 \u00acfavorite_season(x, \"winter\")) \u2227 (favorite_season(x, \"summer\") \u2192 \u00acfavorite_season(x, \"spring\") \u2227 \u00acfavorite_season(x, \"fall\") \u2227 \u00acfavorite_season(x, \"winter\")) \u2227 (favorite_season(x, \"fall\") \u2192 \u00acfavorite_season(x, \"spring\") \u2227 \u00acfavorite_season(x, \"summer\") \u2227 \u00acfavorite_season(x, \"winter\")) \u2227 (favorite_season(x, \"winter\") \u2192 \u00acfavorite_season(x, \"spring\") \u2227 \u00acfavorite_season(x, \"summer\") \u2227 \u00acfavorite_season(x, \"fall\"))) ::: There are four seasons in a year: Spring, Summer, Fall, and Winter.\n\u2200x (wants_long_vacation(x) \u2192 loves_summer(x)) ::: All students who want to have a long vacation love summer the most.\nfavorite_season(\"emma\", \"summer\") ::: Emma's favorite season is summer.\n\u2200x (favorite_season(\"mia\", x) \u2192 \u00acfavorite_season(\"emma\", x)) ::: Mia's favorite season is not the same as Emma's.\nwants_long_vacation(\"james\") ::: James wants to have a long vacation.\nQuery:\nfavorite_season(\"mia\", \"spring\") ::: Mia's favorite season is spring.",
            "problem": " [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's.  James wants to have a long vacation.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMia's favorite season is spring."
        },
        {
            "example": 49,
            "response": [
                "is_printed_text(\"1984\")",
                [
                    "all x ((is_digital_media(x)  ->   -is_analog(x)) )",
                    "all x ((is_printed_text(x)  ->  is_analog(x)) )",
                    "all x ((is_streaming_service(x)  ->  is_digital_media(x)) )",
                    "all x ((is_hardcover_book(x)  ->  is_printed_text(x)) )",
                    "(is_streaming_service(\"1984\")  ->  is_hardcover_book(\"1984\")) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\n1984 ::: represents 1984\nhardcover_book ::: represents a hardcover book\nPredicates:\nis_digital_media(x) ::: x is a digital media.\nis_analog(x) ::: x is an analog.\nis_printed_text(x) ::: x is a printed text.\nis_streaming_service(x) ::: x is a streaming service.\nis_hardcover_book(x) ::: x is a hardcover book.\nPremises:\n\u2200x (is_digital_media(x) \u2192 \u00acis_analog(x)) ::: No digital media are analog.\n\u2200x (is_printed_text(x) \u2192 is_analog(x)) ::: Every printed text is analog.\n\u2200x (is_streaming_service(x) \u2192 is_digital_media(x)) ::: All streaming services are digital.\n\u2200x (is_hardcover_book(x) \u2192 is_printed_text(x)) ::: If an object is a hardcover book then it is printed text.\n(is_streaming_service(\"1984\") \u2192 is_hardcover_book(\"1984\")) ::: If 1984 is a streaming service, then 1984 is a hardcover book.\nQuery:\nis_printed_text(\"1984\") ::: 1984 is printed text.",
            "problem": " No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\n1984 is printed text."
        },
        {
            "example": 50,
            "response": [
                "is_streaming_service(\"1984\")",
                [
                    "all x ((is_digital_media(x)  ->   -is_analog(x)) )",
                    "all x ((is_printed_text(x)  ->  is_analog(x)) )",
                    "all x ((is_streaming_service(x)  ->  is_digital_media(x)) )",
                    "all x ((is_hardcover_book(x)  ->  is_printed_text(x)) )",
                    "(is_streaming_service(\"1984\")  ->  is_hardcover_book(\"1984\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\n1984 ::: represents 1984\nhardcover_book ::: represents a hardcover book\nPredicates:\nis_digital_media(x) ::: x is a digital media.\nis_analog(x) ::: x is analog.\nis_printed_text(x) ::: x is a printed text.\nis_streaming_service(x) ::: x is a streaming service.\nis_hardcover_book(x) ::: x is a hardcover book.\nPremises:\n\u2200x (is_digital_media(x) \u2192 \u00acis_analog(x)) ::: No digital media are analog.\n\u2200x (is_printed_text(x) \u2192 is_analog(x)) ::: Every printed text is analog.\n\u2200x (is_streaming_service(x) \u2192 is_digital_media(x)) ::: All streaming services are digital.\n\u2200x (is_hardcover_book(x) \u2192 is_printed_text(x)) ::: If an object is a hardcover book then it is printed text.\n(is_streaming_service(\"1984\") \u2192 is_hardcover_book(\"1984\")) ::: If 1984 is a streaming service, then 1984 is a hardcover book.\nQuery:\nis_streaming_service(\"1984\") ::: 1984 is a streaming service.",
            "problem": " No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\n1984 is a streaming service."
        },
        {
            "example": 51,
            "response": [
                " -is_streaming_service(\"1984\")",
                [
                    "all x ((is_digital_media(x)  ->   -is_analog(x)) )",
                    "all x ((is_printed_text(x)  ->  is_analog(x)) )",
                    "all x ((is_streaming_service(x)  ->  is_digital_media(x)) )",
                    "all x ((is_hardcover_book(x)  ->  is_printed_text(x)) )",
                    "(is_streaming_service(\"1984\")  ->  is_hardcover_book(\"1984\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\n1984 ::: represents 1984\nhardcover_book ::: represents a hardcover book\nPredicates:\nis_digital_media(x) ::: x is a digital media.\nis_analog(x) ::: x is an analog.\nis_printed_text(x) ::: x is a printed text.\nis_streaming_service(x) ::: x is a streaming service.\nis_hardcover_book(x) ::: x is a hardcover book.\nPremises:\n\u2200x (is_digital_media(x) \u2192 \u00acis_analog(x)) ::: No digital media are analog.\n\u2200x (is_printed_text(x) \u2192 is_analog(x)) ::: Every printed text is analog.\n\u2200x (is_streaming_service(x) \u2192 is_digital_media(x)) ::: All streaming services are digital.\n\u2200x (is_hardcover_book(x) \u2192 is_printed_text(x)) ::: If an object is a hardcover book then it is printed text.\n(is_streaming_service(\"1984\") \u2192 is_hardcover_book(\"1984\")) ::: If 1984 is a streaming service, then 1984 is a hardcover book.\nQuery:\n\u00acis_streaming_service(\"1984\") ::: 1984 is not a streaming service.",
            "problem": " No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\n1984 is not a streaming service."
        },
        {
            "example": 52,
            "response": [
                "is_romance_language(\"basque\")",
                [
                    "all x ((is_romance_language(x)  ->  is_indo_european_language(x)) )",
                    "is_language_family(\"romance_languages\") ",
                    " all x  all y ((is_language_family(x)  &  is_related(y, x))  ->  is_related(y, x)) ",
                    "is_romance_language(\"french\")  &  is_romance_language(\"spanish\") ",
                    "is_related(\"german\", \"spanish\") ",
                    "- exists x ((is_related(\"basque\", x)) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\nfrench ::: represents French\nspanish ::: represents Spanish\ngerman ::: represents German\nbasque ::: represents Basque\nromance_languages ::: represents Romance languages\nindo_european_languages ::: represents Indo-European languages\nlanguage_family ::: represents a language family\nPredicates:\nis_romance_language(x) ::: x is a Romance language.\nis_indo_european_language(x) ::: x is an Indo-European language.\nis_language_family(x) ::: x is a language family.\nis_related(x, y) ::: x is related to y.\nPremises:\n\u2200x (is_romance_language(x) \u2192 is_indo_european_language(x)) ::: All Romance languages are Indo-European languages.\nis_language_family(\"romance_languages\") ::: The Romance languages are a language family.\n\u2200x \u2200y ((is_language_family(x) \u2227 is_related(y, x)) \u2192 is_related(y, x)) ::: All languages within a language family are related to each other.\nis_romance_language(\"french\") \u2227 is_romance_language(\"spanish\") ::: French and Spanish are both Romance languages.\nis_related(\"german\", \"spanish\") ::: German is related to Spanish.\n\u00ac\u2203x (is_related(\"basque\", x)) ::: Basque is not related to any other language.\nQuery:\nis_romance_language(\"basque\") ::: Basque is a Romance language.",
            "problem": " All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBasque is a Romance language."
        },
        {
            "example": 53,
            "response": [
                "is_romance_language(\"german\")",
                [
                    "all x ((is_romance_language(x)  ->  is_indo_european_language(x)) )",
                    "is_language_family(\"romance_languages\") ",
                    " all x  all y ((is_language_family(x)  &  is_related(y, x))  ->  is_related(y, x)) ",
                    "is_romance_language(\"french\")  &  is_romance_language(\"spanish\") ",
                    "is_related(\"german\", \"spanish\") ",
                    "all x ( -is_related(\"basque\", x) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nfrench ::: represents French\nspanish ::: represents Spanish\ngerman ::: represents German\nbasque ::: represents Basque\nromance_languages ::: represents Romance languages\nindo_european_languages ::: represents Indo-European languages\nlanguage_family ::: represents a language family\nPredicates:\nis_romance_language(x) ::: x is a Romance language.\nis_indo_european_language(x) ::: x is an Indo-European language.\nis_language_family(x) ::: x is a language family.\nis_related(x, y) ::: x is related to y.\nPremises:\n\u2200x (is_romance_language(x) \u2192 is_indo_european_language(x)) ::: All Romance languages are Indo-European languages.\nis_language_family(\"romance_languages\") ::: The Romance languages are a language family.\n\u2200x \u2200y ((is_language_family(x) \u2227 is_related(y, x)) \u2192 is_related(y, x)) ::: All languages within a language family are related to each other.\nis_romance_language(\"french\") \u2227 is_romance_language(\"spanish\") ::: French and Spanish are both Romance languages.\nis_related(\"german\", \"spanish\") ::: German is related to Spanish.\n\u2200x \u00acis_related(\"basque\", x) ::: Basque is not related to any other language.\nQuery:\nis_romance_language(\"german\") ::: German is a Romance language.",
            "problem": " All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nGerman is a Romance language."
        },
        {
            "example": 54,
            "response": [
                "is_indo_european_language(\"french\")",
                [
                    "all x ((is_romance_language(x)  ->  is_indo_european_language(x)) )",
                    "is_language_family(\"romance_languages\") ",
                    " all x  all y ((is_language_family(x)  &  is_related(y, x))  ->  is_related(y, x)) ",
                    "is_romance_language(\"french\")  &  is_romance_language(\"spanish\") ",
                    "is_related(\"german\", \"spanish\") ",
                    "- exists x ((is_related(\"basque\", x)) )"
                ]
            ],
            "label": "True",
            "text": "Constants:\nfrench ::: represents French\nspanish ::: represents Spanish\ngerman ::: represents German\nbasque ::: represents Basque\nromance_languages ::: represents Romance languages\nindo_european_languages ::: represents Indo-European languages\nlanguage_family ::: represents a language family\nPredicates:\nis_romance_language(x) ::: x is a Romance language.\nis_indo_european_language(x) ::: x is an Indo-European language.\nis_language_family(x) ::: x is a language family.\nis_related(x, y) ::: x is related to y.\nPremises:\n\u2200x (is_romance_language(x) \u2192 is_indo_european_language(x)) ::: All Romance languages are Indo-European languages.\nis_language_family(\"romance_languages\") ::: The Romance languages are a language family.\n\u2200x \u2200y ((is_language_family(x) \u2227 is_related(y, x)) \u2192 is_related(y, x)) ::: All languages within a language family are related to each other.\nis_romance_language(\"french\") \u2227 is_romance_language(\"spanish\") ::: French and Spanish are both Romance languages.\nis_related(\"german\", \"spanish\") ::: German is related to Spanish.\n\u00ac\u2203x (is_related(\"basque\", x)) ::: Basque is not related to any other language.\nQuery:\nis_indo_european_language(\"french\") ::: French is an Indo-European language.",
            "problem": " All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nFrench is an Indo-European language."
        },
        {
            "example": 55,
            "response": [
                "is_soccer_player(\"robert_lewandowski\")",
                [
                    "is_striker(\"robert_lewandowski\") ",
                    "all x ((is_striker(x)  ->  is_soccer_player(x)) )",
                    "left(\"robert_lewandowski\", \"bayern_munchen\") ",
                    " all x  all y (left(x, y)  ->   -play_for(x, y)) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nrobert_lewandowski ::: represents Robert Lewandowski\nbayern_munchen ::: represents Bayern Munchen\nPredicates:\nis_striker(x) ::: x is a striker.\nis_soccer_player(x) ::: x is a soccer player.\nleft(x, y) ::: x left y.\nplay_for(x, y) ::: x plays for y.\nPremises:\nis_striker(\"robert_lewandowski\") ::: Robert Lewandowski is a striker.\n\u2200x (is_striker(x) \u2192 is_soccer_player(x)) ::: Strikers are soccer players.\nleft(\"robert_lewandowski\", \"bayern_munchen\") ::: Robert Lewandowski left Bayern Munchen.\n\u2200x \u2200y (left(x, y) \u2192 \u00acplay_for(x, y)) ::: If a player left a team they no longer play for that team.\nQuery:\nis_soccer_player(\"robert_lewandowski\") ::: Robert Lewandowski is a soccer player.",
            "problem": " Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRobert Lewandowski is a soccer player."
        },
        {
            "example": 56,
            "response": [
                " -play_for(\"robert_lewandowski\", \"bayern_munchen\")",
                [
                    "is_striker(\"robert_lewandowski\") ",
                    "all x ((is_striker(x)  ->  is_soccer_player(x)) )",
                    "left(\"robert_lewandowski\", \"bayern_munchen\") ",
                    " all x  all y (left(x, y)  ->   -play_for(x, y)) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nrobert_lewandowski ::: represents Robert Lewandowski\nbayern_munchen ::: represents Bayern Munchen\nPredicates:\nis_striker(x) ::: x is a striker.\nis_soccer_player(x) ::: x is a soccer player.\nleft(x, y) ::: x left y.\nplay_for(x, y) ::: x plays for y.\nPremises:\nis_striker(\"robert_lewandowski\") ::: Robert Lewandowski is a striker.\n\u2200x (is_striker(x) \u2192 is_soccer_player(x)) ::: Strikers are soccer players.\nleft(\"robert_lewandowski\", \"bayern_munchen\") ::: Robert Lewandowski left Bayern Munchen.\n\u2200x \u2200y (left(x, y) \u2192 \u00acplay_for(x, y)) ::: If a player left a team they no longer play for that team.\nQuery:\n\u00acplay_for(\"robert_lewandowski\", \"bayern_munchen\") ::: Robert Lewandowski does not play for Bayern Munchen.",
            "problem": " Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRobert Lewandowski plays for Bayern Munchen."
        },
        {
            "example": 57,
            "response": [
                "is_star(\"robert_lewandowski\")",
                [
                    "is_striker(\"robert_lewandowski\") ",
                    "all x ((is_striker(x)  ->  is_soccer_player(x)) )",
                    "left(\"robert_lewandowski\", \"bayern_munchen\") ",
                    " all x  all y (left(x, y)  ->   -play_for(x, y)) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nrobert_lewandowski ::: represents Robert Lewandowski\nbayern_munchen ::: represents Bayern Munchen\nPredicates:\nis_striker(x) ::: x is a striker.\nis_soccer_player(x) ::: x is a soccer player.\nleft(x, y) ::: x left y.\nplay_for(x, y) ::: x plays for y.\nis_star(x) ::: x is a star.\nPremises:\nis_striker(\"robert_lewandowski\") ::: Robert Lewandowski is a striker.\n\u2200x (is_striker(x) \u2192 is_soccer_player(x)) ::: Strikers are soccer players.\nleft(\"robert_lewandowski\", \"bayern_munchen\") ::: Robert Lewandowski left Bayern Munchen.\n\u2200x \u2200y (left(x, y) \u2192 \u00acplay_for(x, y)) ::: If a player left a team they no longer play for that team.\nQuery:\nis_star(\"robert_lewandowski\") ::: Robert Lewandowski is a star.",
            "problem": " Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRobert Lewandowski is a star."
        },
        {
            "example": 58,
            "response": [
                "is_same_state(\"butte\", \"pierre\")",
                [
                    "is_city_in(\"billings\", \"montana\") ",
                    "includes(\"montana\", \"butte\")  &  includes(\"montana\", \"helena\")  &  includes(\"montana\", \"missoula\") ",
                    "is_same_state(\"white_sulphur_springs\", \"butte\") ",
                    " -is_city_in(\"pierre\", \"montana\") ",
                    "all x ((is_city_in(x, \"butte\")  ->   -is_city_in(x, \"pierre\")) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\nbillings ::: represents the city of Billings\nmontana ::: represents the state of Montana\nbutte ::: represents the city of Butte\nhelena ::: represents the city of Helena\nmissoula ::: represents the city of Missoula\nwhite_sulphur_springs ::: represents the city of White Sulphur Springs\npierre ::: represents the city of Pierre\nPredicates:\nis_city_in(x, y) ::: x is a city in y.\nincludes(x, y) ::: x includes y.\nis_same_state(x, y) ::: x and y are in the same state.\nPremises:\nis_city_in(\"billings\", \"montana\") ::: Billings is a city in Montana.\nincludes(\"montana\", \"butte\") \u2227 includes(\"montana\", \"helena\") \u2227 includes(\"montana\", \"missoula\") ::: Montana includes the cities of Butte, Helena, and Missoula.\nis_same_state(\"white_sulphur_springs\", \"butte\") ::: White Sulphur Springs and Butte are cities in the same state.\n\u00acis_city_in(\"pierre\", \"montana\") ::: The city of Pierre is not in Montana.\n\u2200x (is_city_in(x, \"butte\") \u2192 \u00acis_city_in(x, \"pierre\")) ::: Any city in Butte is not in Pierre.\nQuery:\nis_same_state(\"butte\", \"pierre\") ::: Butte and Pierre are in the same state.",
            "problem": " Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nButte and Pierre are in the same state."
        },
        {
            "example": 59,
            "response": [
                "is_same_state(\"pierre\", \"bismarck\")",
                [
                    "is_city_in(\"billings\", \"montana\") ",
                    "includes(\"montana\", \"butte\")  &  includes(\"montana\", \"helena\")  &  includes(\"montana\", \"missoula\") ",
                    "is_same_state(\"white_sulphur_springs\", \"butte\") ",
                    " -is_city_in(\"pierre\", \"montana\") ",
                    "all x ((is_city_in(x, \"butte\")  ->   -is_city_in(x, \"pierre\")) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nbillings ::: represents the city of Billings\nmontana ::: represents the state of Montana\nbutte ::: represents the city of Butte\nhelena ::: represents the city of Helena\nmissoula ::: represents the city of Missoula\nwhite_sulphur_springs ::: represents the city of White Sulphur Springs\npierre ::: represents the city of Pierre\nbismarck ::: represents the city of Bismarck\nPredicates:\nis_city_in(x, y) ::: x is a city in y.\nincludes(x, y) ::: x includes y.\nis_same_state(x, y) ::: x and y are in the same state.\nPremises:\nis_city_in(\"billings\", \"montana\") ::: Billings is a city in Montana.\nincludes(\"montana\", \"butte\") \u2227 includes(\"montana\", \"helena\") \u2227 includes(\"montana\", \"missoula\") ::: Montana includes the cities of Butte, Helena, and Missoula.\nis_same_state(\"white_sulphur_springs\", \"butte\") ::: White Sulphur Springs and Butte are cities in the same state.\n\u00acis_city_in(\"pierre\", \"montana\") ::: The city of Pierre is not in Montana.\n\u2200x (is_city_in(x, \"butte\") \u2192 \u00acis_city_in(x, \"pierre\")) ::: Any city in Butte is not in Pierre.\nQuery:\nis_same_state(\"pierre\", \"bismarck\") ::: Pierre and Bismarck are in the same state.",
            "problem": " Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPierre and Bismarck are in the same state."
        },
        {
            "example": 60,
            "response": [
                "is_city_in(\"missoula\", \"montana\")",
                [
                    "is_city_in(\"billings\", \"montana\") ",
                    "includes(\"montana\", \"butte\")  &  includes(\"montana\", \"helena\")  &  includes(\"montana\", \"missoula\") ",
                    "is_same_state(\"white_sulphur_springs\", \"butte\") ",
                    " -is_city_in(\"pierre\", \"montana\") ",
                    "all x ((is_city_in(x, \"butte\")  ->   -is_city_in(x, \"pierre\")) )"
                ]
            ],
            "label": "True",
            "text": "Constants:\nbillings ::: represents the city of Billings\nmontana ::: represents the state of Montana\nbutte ::: represents the city of Butte\nhelena ::: represents the city of Helena\nmissoula ::: represents the city of Missoula\nwhite_sulphur_springs ::: represents the city of White Sulphur Springs\npierre ::: represents the city of Pierre\nPredicates:\nis_city_in(x, y) ::: x is a city in y.\nincludes(x, y) ::: x includes y.\nis_same_state(x, y) ::: x and y are in the same state.\nPremises:\nis_city_in(\"billings\", \"montana\") ::: Billings is a city in Montana.\nincludes(\"montana\", \"butte\") \u2227 includes(\"montana\", \"helena\") \u2227 includes(\"montana\", \"missoula\") ::: Montana includes the cities of Butte, Helena, and Missoula.\nis_same_state(\"white_sulphur_springs\", \"butte\") ::: White Sulphur Springs and Butte are cities in the same state.\n\u00acis_city_in(\"pierre\", \"montana\") ::: The city of Pierre is not in Montana.\n\u2200x (is_city_in(x, \"butte\") \u2192 \u00acis_city_in(x, \"pierre\")) ::: Any city in Butte is not in Pierre.\nQuery:\nis_city_in(\"missoula\", \"montana\") ::: Montana is home to the city of Missoula.",
            "problem": " Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMontana is home to the city of Missoula."
        },
        {
            "example": 61,
            "response": [
                "has_visa(\"mike\", \"f1_visa\")",
                [
                    "all x ((is_international_student(x)  &  has_visa(x, \"us\")  ->  (has_visa(x, \"f1_visa\")  |  has_visa(x, \"j1_visa\"))) )",
                    "all x ((is_international_student(x)  &  has_visa(x, \"f1_visa\")  &  wants_to_work(x, \"us\")  ->  (needs_to_apply(x, \"cpt\")  |  needs_to_apply(x, \"opt\"))) )",
                    "is_international_student(\"mike\") ",
                    "needs_to_apply(\"mike\", \"cpt\")  &  wants_to_work(\"mike\", \"us\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nmike ::: represents mike\nus ::: represents the US\nf1_visa ::: represents an F1 visa\nj1_visa ::: represents a J1 visa\ncpt ::: represents CPT\nopt ::: represents OPT\nPredicates:\nis_international_student(x) ::: x is an international student.\nhas_visa(x, y) ::: x has visa y.\nneeds_to_apply(x, y) ::: x needs to apply for y.\nwants_to_work(x, y) ::: x wants to work in y.\nPremises:\n\u2200x (is_international_student(x) \u2227 has_visa(x, \"us\") \u2192 (has_visa(x, \"f1_visa\") \u2228 has_visa(x, \"j1_visa\"))) ::: International students in US have either an F1 visa or a J1 visa.\n\u2200x (is_international_student(x) \u2227 has_visa(x, \"f1_visa\") \u2227 wants_to_work(x, \"us\") \u2192 (needs_to_apply(x, \"cpt\") \u2228 needs_to_apply(x, \"opt\"))) ::: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nis_international_student(\"mike\") ::: Mike is an international student.\nneeds_to_apply(\"mike\", \"cpt\") \u2227 wants_to_work(\"mike\", \"us\") ::: Mike needs to apply for CPT if he wants to work in the US.\nQuery:\nhas_visa(\"mike\", \"f1_visa\") ::: Mike has an F1 visa.",
            "problem": " International students in US have either an F1 visa or a J1 visa. An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US. Mike is an international student. Mike needs to apply for CPT if he wants to work in the US.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMike has an F1 visa."
        },
        {
            "example": 62,
            "response": [
                "has_visa(\"mike\", \"j1_visa\")",
                [
                    "all x ((is_international_student(x)  &  has_visa(x, \"us\")  ->  (has_visa(x, \"f1_visa\")  |  has_visa(x, \"j1_visa\"))) )",
                    "all x ((is_international_student(x)  &  has_visa(x, \"f1_visa\")  &  wants_to_work(x, \"us\")  ->  (needs_to_apply(x, \"cpt\")  |  needs_to_apply(x, \"opt\"))) )",
                    "is_international_student(\"mike\") ",
                    "needs_to_apply(\"mike\", \"cpt\")  &  wants_to_work(\"mike\", \"us\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nmike ::: represents mike\nus ::: represents the US\nf1_visa ::: represents the F1 visa\nj1_visa ::: represents the J1 visa\ncpt ::: represents the CPT\nopt ::: represents the OPT\nPredicates:\nis_international_student(x) ::: x is an international student.\nhas_visa(x, y) ::: x has visa y.\nneeds_to_apply(x, y) ::: x needs to apply for y.\nwants_to_work(x, y) ::: x wants to work in y.\nPremises:\n\u2200x (is_international_student(x) \u2227 has_visa(x, \"us\") \u2192 (has_visa(x, \"f1_visa\") \u2228 has_visa(x, \"j1_visa\"))) ::: International students in US have either an F1 visa or a J1 visa.\n\u2200x (is_international_student(x) \u2227 has_visa(x, \"f1_visa\") \u2227 wants_to_work(x, \"us\") \u2192 (needs_to_apply(x, \"cpt\") \u2228 needs_to_apply(x, \"opt\"))) ::: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nis_international_student(\"mike\") ::: Mike is an international student.\nneeds_to_apply(\"mike\", \"cpt\") \u2227 wants_to_work(\"mike\", \"us\") ::: Mike needs to apply for CPT if he wants to work in the US.\nQuery:\nhas_visa(\"mike\", \"j1_visa\") ::: Mike has a J1 visa.",
            "problem": " International students in US have either an F1 visa or a J1 visa. An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US. Mike is an international student. Mike needs to apply for CPT if he wants to work in the US.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMike has a J1 visa."
        },
        {
            "example": 63,
            "response": [
                "is_pet(\"ted\")",
                [
                    "all x ((is_cow(x)  ->  is_bovine(x)) )",
                    "exists x ((is_pet(x)  &  is_cow(x)) )",
                    "all x ((is_bovine(x)  ->  is_domesticated(x)) )",
                    " all x (is_domesticated(x)  ->   -is_alligator(x)) ",
                    "is_alligator(\"ted\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nted ::: represents ted\nPredicates:\nis_cow(x) ::: x is a cow.\nis_bovine(x) ::: x is a bovine.\nis_pet(x) ::: x is a pet.\nis_domesticated(x) ::: x is domesticated.\nis_alligator(x) ::: x is an alligator.\nPremises:\n\u2200x (is_cow(x) \u2192 is_bovine(x)) ::: All cows are bovines.\n\u2203x (is_pet(x) \u2227 is_cow(x)) ::: Some pets are cows.\n\u2200x (is_bovine(x) \u2192 is_domesticated(x)) ::: If something is a bovine, then it is domesticated.\n\u2200x (is_domesticated(x) \u2192 \u00acis_alligator(x)) ::: No domesticated animals are alligators.\nis_alligator(\"ted\") ::: Ted is an aligator.\nQuery:\nis_pet(\"ted\") ::: Ted is a pet.",
            "problem": " All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTed is a pet."
        },
        {
            "example": 64,
            "response": [
                "is_pet(\"ted\")  &  is_cow(\"ted\")",
                [
                    "all x ((is_cow(x)  ->  is_bovine(x)) )",
                    "exists x ((is_pet(x)  &  is_cow(x)) )",
                    "all x ((is_bovine(x)  ->  is_domesticated(x)) )",
                    " all x (is_domesticated(x)  ->   -is_alligator(x)) ",
                    "is_alligator(\"ted\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nted ::: represents ted\nPredicates:\nis_cow(x) ::: x is a cow.\nis_bovine(x) ::: x is a bovine.\nis_pet(x) ::: x is a pet.\nis_domesticated(x) ::: x is domesticated.\nis_alligator(x) ::: x is an alligator.\nPremises:\n\u2200x (is_cow(x) \u2192 is_bovine(x)) ::: All cows are bovines.\n\u2203x (is_pet(x) \u2227 is_cow(x)) ::: Some pets are cows.\n\u2200x (is_bovine(x) \u2192 is_domesticated(x)) ::: If something is a bovine, then it is domesticated.\n\u2200x (is_domesticated(x) \u2192 \u00acis_alligator(x)) ::: No domesticated animals are alligators.\nis_alligator(\"ted\") ::: Ted is an aligator.\nQuery:\nis_pet(\"ted\") \u2227 is_cow(\"ted\") ::: Ted is a pet and a cow.",
            "problem": " All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTed is a pet and a cow."
        },
        {
            "example": 65,
            "response": [
                " -(is_cow(\"ted\")  &  is_pet(\"ted\"))",
                [
                    "all x ((is_cow(x)  ->  is_bovine(x)) )",
                    "exists x ((is_pet(x)  &  is_cow(x)) )",
                    "all x ((is_bovine(x)  ->  is_domesticated(x)) )",
                    " all x (is_domesticated(x)  ->   -is_alligator(x)) ",
                    "is_alligator(\"ted\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nted ::: represents ted\nPredicates:\nis_cow(x) ::: x is a cow.\nis_bovine(x) ::: x is a bovine.\nis_pet(x) ::: x is a pet.\nis_domesticated(x) ::: x is domesticated.\nis_alligator(x) ::: x is an alligator.\nPremises:\n\u2200x (is_cow(x) \u2192 is_bovine(x)) ::: All cows are bovines.\n\u2203x (is_pet(x) \u2227 is_cow(x)) ::: Some pets are cows.\n\u2200x (is_bovine(x) \u2192 is_domesticated(x)) ::: If something is a bovine, then it is domesticated.\n\u2200x (is_domesticated(x) \u2192 \u00acis_alligator(x)) ::: No domesticated animals are alligators.\nis_alligator(\"ted\") ::: Ted is an aligator.\nQuery:\n\u00ac(is_cow(\"ted\") \u2227 is_pet(\"ted\")) ::: If Ted is a cow, then Ted is not a pet.",
            "problem": " All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Ted is a cow, then Ted is not a pet."
        },
        {
            "example": 66,
            "response": [
                "moved_to(\"private_ivy_league_research_university\", \"new_haven\")",
                [
                    "is_private_ivy_league_research_university(\"yale_university\") ",
                    "moved_to(\"yale_university\", \"new_haven\") ",
                    "has_endowment(\"yale_university\", \"$42_3_billion\") ",
                    "is_organized_into(\"yale_university\", \"27_constituent_colleges_and_schools\") ",
                    "is_constituent_college(\"benjamin_franklin_college\", \"yale_university\")  &  is_constituent_college(\"berkeley_college\", \"yale_university\")  &  is_constituent_college(\"branford_college\", \"yale_university\")  &  is_constituent_college(\"davenport_college\", \"yale_university\")  &  is_constituent_college(\"ezra_stiles_college\", \"yale_university\")  &  is_constituent_college(\"grace_hopper_college\", \"yale_university\")  &  is_constituent_college(\"jonathan_edwards_college\", \"yale_university\")  &  is_constituent_college(\"morse_college\", \"yale_university\")  &  is_constituent_college(\"pauli_murray_college\", \"yale_university\")  &  is_constituent_college(\"pierson_college\", \"yale_university\")  &  is_constituent_college(\"saybrook_college\", \"yale_university\")  &  is_constituent_college(\"silliman_college\", \"yale_university\")  &  is_constituent_college(\"timothy_dwight_college\", \"yale_university\")  &  is_constituent_college(\"trumbull_college\", \"yale_university\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nyale_university ::: represents Yale University\nnew_haven ::: represents New Haven\nbenjamin_franklin_college ::: represents Benjamin Franklin College\nberkeley_college ::: represents Berkeley College\nbranford_college ::: represents Branford College\ndavenport_college ::: represents Davenport College\nezra_stiles_college ::: represents Ezra Stiles College\ngrace_hopper_college ::: represents Grace Hopper College\njonathan_edwards_college ::: represents Jonathan Edwards College\nmorse_college ::: represents Morse College\npauli_murray_college ::: represents Pauli Murray College\npierson_college ::: represents Pierson College\nsaybrook_college ::: represents Saybrook College\nsilliman_college ::: represents Silliman College\ntimothy_dwight_college ::: represents Timothy Dwight College\ntrumbull_college ::: represents Trumbull College\nPredicates:\nis_private_ivy_league_research_university(x) ::: x is a private Ivy League research university.\nmoved_to(x, y) ::: x moved to y.\nhas_endowment(x, y) ::: x's endowment was valued at y.\nis_organized_into(x, y) ::: x is organized into y.\nis_constituent_college(x, y) ::: x is a constituent college of y.\nPremises:\nis_private_ivy_league_research_university(\"yale_university\") ::: Yale University is a private Ivy League research university.\nmoved_to(\"yale_university\", \"new_haven\") ::: Yale University moved to New Haven in 1716.\nhas_endowment(\"yale_university\", \"$42.3 billion\") ::: Yale university's endowment was valued at $42.3 billion.\nis_organized_into(\"yale_university\", \"27 constituent colleges and schools\") ::: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nis_constituent_college(\"benjamin_franklin_college\", \"yale_university\") \u2227 is_constituent_college(\"berkeley_college\", \"yale_university\") \u2227 is_constituent_college(\"branford_college\", \"yale_university\") \u2227 is_constituent_college(\"davenport_college\", \"yale_university\") \u2227 is_constituent_college(\"ezra_stiles_college\", \"yale_university\") \u2227 is_constituent_college(\"grace_hopper_college\", \"yale_university\") \u2227 is_constituent_college(\"jonathan_edwards_college\", \"yale_university\") \u2227 is_constituent_college(\"morse_college\", \"yale_university\") \u2227 is_constituent_college(\"pauli_murray_college\", \"yale_university\") \u2227 is_constituent_college(\"pierson_college\", \"yale_university\") \u2227 is_constituent_college(\"saybrook_college\", \"yale_university\") \u2227 is_constituent_college(\"silliman_college\", \"yale_university\") \u2227 is_constituent_college(\"timothy_dwight_college\", \"yale_university\") \u2227 is_constituent_college(\"trumbull_college\", \"yale_university\") ::: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nQuery:\nmoved_to(\"private_ivy_league_research_university\", \"new_haven\") ::: A private Ivy League research university moved to New Haven.",
            "problem": " Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nA private Ivy League research university moved to New Haven."
        },
        {
            "example": 67,
            "response": [
                " all x (endowment_valued_at(\"yale_university\", x)  ->   all y (endowment_valued_at(y, z)  ->  x > z))",
                [
                    "is_private_ivy_league_research_university(\"yale_university\") ",
                    "moved_to(\"yale_university\", \"new_haven\") ",
                    "endowment_valued_at(\"yale_university\", \"$42_3_billion\") ",
                    "organized_into(\"yale_university\", \"27_constituent_colleges_and_schools\") ",
                    "is_constituent_college(\"benjamin_franklin_college\", \"yale_university\")  &  is_constituent_college(\"berkeley_college\", \"yale_university\")  &  is_constituent_college(\"branford_college\", \"yale_university\")  &  is_constituent_college(\"davenport_college\", \"yale_university\")  &  is_constituent_college(\"ezra_stiles_college\", \"yale_university\")  &  is_constituent_college(\"grace_hopper_college\", \"yale_university\")  &  is_constituent_college(\"jonathan_edwards_college\", \"yale_university\")  &  is_constituent_college(\"morse_college\", \"yale_university\")  &  is_constituent_college(\"pauli_murray_college\", \"yale_university\")  &  is_constituent_college(\"pierson_college\", \"yale_university\")  &  is_constituent_college(\"saybrook_college\", \"yale_university\")  &  is_constituent_college(\"silliman_college\", \"yale_university\")  &  is_constituent_college(\"timothy_dwight_college\", \"yale_university\")  &  is_constituent_college(\"trumbull_college\", \"yale_university\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nyale_university ::: represents Yale University\nnew_haven ::: represents New Haven\nbenjamin_franklin_college ::: represents Benjamin Franklin College\nberkeley_college ::: represents Berkeley College\nbranford_college ::: represents Branford College\ndavenport_college ::: represents Davenport College\nezra_stiles_college ::: represents Ezra Stiles College\ngrace_hopper_college ::: represents Grace Hopper College\njonathan_edwards_college ::: represents Jonathan Edwards College\nmorse_college ::: represents Morse College\npauli_murray_college ::: represents Pauli Murray College\npierson_college ::: represents Pierson College\nsaybrook_college ::: represents Saybrook College\nsilliman_college ::: represents Silliman College\ntimothy_dwight_college ::: represents Timothy Dwight College\ntrumbull_college ::: represents Trumbull College\nPredicates:\nis_private_ivy_league_research_university(x) ::: x is a private Ivy League research university.\nmoved_to(x, y) ::: x moved to y.\nendowment_valued_at(x, y) ::: x's endowment was valued at y.\norganized_into(x, y) ::: x has been organized into y.\nis_constituent_college(x, y) ::: x is a constituent college of y.\nPremises:\nis_private_ivy_league_research_university(\"yale_university\") ::: Yale University is a private Ivy League research university.\nmoved_to(\"yale_university\", \"new_haven\") ::: Yale University moved to New Haven in 1716.\nendowment_valued_at(\"yale_university\", \"$42.3 billion\") ::: Yale university's endowment was valued at $42.3 billion.\norganized_into(\"yale_university\", \"27 constituent colleges and schools\") ::: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nis_constituent_college(\"benjamin_franklin_college\", \"yale_university\") \u2227 is_constituent_college(\"berkeley_college\", \"yale_university\") \u2227 is_constituent_college(\"branford_college\", \"yale_university\") \u2227 is_constituent_college(\"davenport_college\", \"yale_university\") \u2227 is_constituent_college(\"ezra_stiles_college\", \"yale_university\") \u2227 is_constituent_college(\"grace_hopper_college\", \"yale_university\") \u2227 is_constituent_college(\"jonathan_edwards_college\", \"yale_university\") \u2227 is_constituent_college(\"morse_college\", \"yale_university\") \u2227 is_constituent_college(\"pauli_murray_college\", \"yale_university\") \u2227 is_constituent_college(\"pierson_college\", \"yale_university\") \u2227 is_constituent_college(\"saybrook_college\", \"yale_university\") \u2227 is_constituent_college(\"silliman_college\", \"yale_university\") \u2227 is_constituent_college(\"timothy_dwight_college\", \"yale_university\") \u2227 is_constituent_college(\"trumbull_college\", \"yale_university\") ::: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nQuery:\n\u2200x (endowment_valued_at(\"yale_university\", x) \u2192 \u2200y (endowment_valued_at(y, z) \u2192 x > z)) ::: Yale University has the largest university endowment of any educational institution.",
            "problem": " Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nYale University has the largest university endowment of any educational institution."
        },
        {
            "example": 68,
            "response": [
                "is_residential_college_at(\"pierson_college\", \"yale_university\")",
                [
                    "is_private_ivy_league_research_university(\"yale_university\") ",
                    "moved_to(\"yale_university\", \"new_haven\") ",
                    "endowment_valued_at(\"yale_university\", \"$42_3_billion\") ",
                    "organized_into(\"yale_university\", \"27_constituent_colleges_and_schools\") ",
                    "is_residential_college_at(\"benjamin_franklin_college\", \"yale_university\")  &  is_residential_college_at(\"berkeley_college\", \"yale_university\")  &  is_residential_college_at(\"branford_college\", \"yale_university\")  &  is_residential_college_at(\"davenport_college\", \"yale_university\")  &  is_residential_college_at(\"ezra_stiles_college\", \"yale_university\")  &  is_residential_college_at(\"grace_hopper_college\", \"yale_university\")  &  is_residential_college_at(\"jonathan_edwards_college\", \"yale_university\")  &  is_residential_college_at(\"morse_college\", \"yale_university\")  &  is_residential_college_at(\"pauli_murray_college\", \"yale_university\")  &  is_residential_college_at(\"pierson_college\", \"yale_university\")  &  is_residential_college_at(\"saybrook_college\", \"yale_university\")  &  is_residential_college_at(\"silliman_college\", \"yale_university\")  &  is_residential_college_at(\"timothy_dwight_college\", \"yale_university\")  &  is_residential_college_at(\"trumbull_college\", \"yale_university\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nyale_university ::: represents Yale University\nnew_haven ::: represents New Haven\nbenjamin_franklin_college ::: represents Benjamin Franklin College\nberkeley_college ::: represents Berkeley College\nbranford_college ::: represents Branford College\ndavenport_college ::: represents Davenport College\nezra_stiles_college ::: represents Ezra Stiles College\ngrace_hopper_college ::: represents Grace Hopper College\njonathan_edwards_college ::: represents Jonathan Edwards College\nmorse_college ::: represents Morse College\npauli_murray_college ::: represents Pauli Murray College\npierson_college ::: represents Pierson College\nsaybrook_college ::: represents Saybrook College\nsilliman_college ::: represents Silliman College\ntimothy_dwight_college ::: represents Timothy Dwight College\ntrumbull_college ::: represents Trumbull College\nPredicates:\nis_private_ivy_league_research_university(x) ::: x is a private Ivy League research university.\nmoved_to(x, y) ::: x moved to y.\nendowment_valued_at(x, y) ::: x's endowment was valued at y.\norganized_into(x, y) ::: x has been organized into y.\nis_residential_college_at(x, y) ::: x is a residential college at y.\nPremises:\nis_private_ivy_league_research_university(\"yale_university\") ::: Yale University is a private Ivy League research university.\nmoved_to(\"yale_university\", \"new_haven\") ::: Yale University moved to New Haven in 1716.\nendowment_valued_at(\"yale_university\", \"$42.3 billion\") ::: Yale university's endowment was valued at $42.3 billion.\norganized_into(\"yale_university\", \"27 constituent colleges and schools\") ::: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nis_residential_college_at(\"benjamin_franklin_college\", \"yale_university\") \u2227 is_residential_college_at(\"berkeley_college\", \"yale_university\") \u2227 is_residential_college_at(\"branford_college\", \"yale_university\") \u2227 is_residential_college_at(\"davenport_college\", \"yale_university\") \u2227 is_residential_college_at(\"ezra_stiles_college\", \"yale_university\") \u2227 is_residential_college_at(\"grace_hopper_college\", \"yale_university\") \u2227 is_residential_college_at(\"jonathan_edwards_college\", \"yale_university\") \u2227 is_residential_college_at(\"morse_college\", \"yale_university\") \u2227 is_residential_college_at(\"pauli_murray_college\", \"yale_university\") \u2227 is_residential_college_at(\"pierson_college\", \"yale_university\") \u2227 is_residential_college_at(\"saybrook_college\", \"yale_university\") \u2227 is_residential_college_at(\"silliman_college\", \"yale_university\") \u2227 is_residential_college_at(\"timothy_dwight_college\", \"yale_university\") \u2227 is_residential_college_at(\"trumbull_college\", \"yale_university\") ::: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nQuery:\nis_residential_college_at(\"pierson_college\", \"yale_university\") ::: Pierson College is a residential college at Yale.",
            "problem": " Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPierson College is a residential college at Yale."
        },
        {
            "example": 69,
            "response": [
                "is_script_editor(\"andrew_collins\", \"the_secret_dude_society\")",
                [
                    "is_british_sitcom(\"badults\")  &  stars(\"badults\", \"pappys\") ",
                    "piloted_on(\"badults\", \"bbc_three\")  &  piloted_on(\"badults\", \"july_2013\") ",
                    "has_working_title(\"badults\", \"the_secret_dude_society\") ",
                    "is_script_editor(\"andrew_collins\", \"badults\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nbadults ::: represents the sitcom series Badults\npappys ::: represents the members of Pappy's\nbbc_three ::: represents the channel BBC Three\njuly_2013 ::: represents the month and year July 2013\nthe_secret_dude_society ::: represents the working title The Secret Dude Society\nandrew_collins ::: represents Andrew Collins\nPredicates:\nis_british_sitcom(x) ::: x is a British sitcom.\nstars(x, y) ::: x stars y.\npiloted_on(x, y) ::: x was piloted on y.\nhas_working_title(x, y) ::: x has the working title y.\nis_script_editor(x, y) ::: x is the script editor for y.\nPremises:\nis_british_sitcom(\"badults\") \u2227 stars(\"badults\", \"pappys\") ::: Badults is a British Sitcom series, starring members of Pappy's.\npiloted_on(\"badults\", \"bbc_three\") \u2227 piloted_on(\"badults\", \"july_2013\") ::: Badults piloted in July 2013 on BBC Three.\nhas_working_title(\"badults\", \"the_secret_dude_society\") ::: The Working title \"The Secret Dude Society\" was used for Badults.\nis_script_editor(\"andrew_collins\", \"badults\") ::: Andrew Collins was the script editor for Badults.\nQuery:\nis_script_editor(\"andrew_collins\", \"the_secret_dude_society\") ::: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
            "problem": " Badults is a British Sitcom series, starring members of Pappy's. Badults piloted in July 2013 on BBC Three. The Working title \"The Secret Dude Society\" was used for Badults. Andrew Collins was the script editor for Badults",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\"."
        },
        {
            "example": 70,
            "response": [
                "- exists x ((stars(\"pappys\", x)  &  (piloted_in(x, \"bbc_two\")  |  piloted_in(x, \"bbc_three\"))))",
                [
                    "is_british_sitcom(\"badults\")  &  stars(\"pappys\", \"badults\") ",
                    "piloted_in(\"badults\", \"july_2013\")  &  piloted_in(\"badults\", \"bbc_three\") ",
                    "used_for(\"the_secret_dude_society\", \"badults\") ",
                    "is_script_editor(\"andrew_collins\", \"badults\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nbadults ::: represents the sitcom series Badults\npappys ::: represents the group Pappy's\njuly_2013 ::: represents the month and year July 2013\nbbc_three ::: represents the channel BBC Three\nthe_secret_dude_society ::: represents the working title The Secret Dude Society\nandrew_collins ::: represents Andrew Collins\nPredicates:\nis_british_sitcom(x) ::: x is a British sitcom.\nstars(x, y) ::: x stars y.\npiloted_in(x, y) ::: x piloted in y.\nused_for(x, y) ::: x is used for y.\nis_script_editor(x, y) ::: x is the script editor for y.\nPremises:\nis_british_sitcom(\"badults\") \u2227 stars(\"pappys\", \"badults\") ::: Badults is a British Sitcom series, starring members of Pappy's.\npiloted_in(\"badults\", \"july_2013\") \u2227 piloted_in(\"badults\", \"bbc_three\") ::: Badults piloted in July 2013 on BBC Three.\nused_for(\"the_secret_dude_society\", \"badults\") ::: The Working title \"The Secret Dude Society\" was used for Badults.\nis_script_editor(\"andrew_collins\", \"badults\") ::: Andrew Collins was the script editor for Badults.\nQuery:\n\u00ac\u2203x (stars(\"pappys\", x) \u2227 (piloted_in(x, \"bbc_two\") \u2228 piloted_in(x, \"bbc_three\"))) ::: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
            "problem": " Badults is a British Sitcom series, starring members of Pappy's. Badults piloted in July 2013 on BBC Three. The Working title \"The Secret Dude Society\" was used for Badults. Andrew Collins was the script editor for Badults",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three."
        },
        {
            "example": 71,
            "response": [
                "is_growth_company_stock(\"ko\")  |  is_mature_company_stock(\"ko\")",
                [
                    "all x ((is_growth_company_stock(x)  ->  is_volatile(x)) )",
                    "all x ((is_volatile(x)  ->   -is_suitable_for_retirement_fund(x)) )",
                    "exists x (is_growth_company_stock(x) )",
                    "all x ((is_mature_company_stock(x)  ->  is_suitable_for_retirement_fund(x)) )",
                    "is_mature_company_stock(\"ko\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nko ::: represents KO\nPredicates:\nis_growth_company_stock(x) ::: x is a growth company's stock.\nis_volatile(x) ::: x is volatile.\nis_suitable_for_retirement_fund(x) ::: x is suitable for a retirement fund.\nis_mature_company_stock(x) ::: x is a mature company's stock.\nPremises:\n\u2200x (is_growth_company_stock(x) \u2192 is_volatile(x)) ::: All growth companies\u2019 stocks are volatile.\n\u2200x (is_volatile(x) \u2192 \u00acis_suitable_for_retirement_fund(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\n\u2203x is_growth_company_stock(x) ::: Some companies\u2019 stocks are growth companies\u2019 stocks.\n\u2200x (is_mature_company_stock(x) \u2192 is_suitable_for_retirement_fund(x)) ::: All mature companies\u2019 stocks are suitable for a retirement fund.\nis_mature_company_stock(\"ko\") ::: KO is a mature company\u2019s stock.\nQuery:\nis_growth_company_stock(\"ko\") \u2228 is_mature_company_stock(\"ko\") ::: KO is a company stock.",
            "problem": " All growth companies\u2019 stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies\u2019 stocks are growth companies\u2019 stocks. All mature companies\u2019 stocks are suitable for a retirement fund. KO is a mature company\u2019s stock.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nKO is a company stock."
        },
        {
            "example": 72,
            "response": [
                "is_growth_company_stock(\"ko\")  &   -is_mature_company_stock(\"ko\")",
                [
                    "all x ((is_growth_company_stock(x)  ->  is_volatile(x)) )",
                    "all x ((is_volatile(x)  ->   -is_suitable_for_retirement_fund(x)) )",
                    "exists x ((is_growth_company_stock(x)) )",
                    "all x ((is_mature_company_stock(x)  ->  is_suitable_for_retirement_fund(x)) )",
                    "is_mature_company_stock(\"ko\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nko ::: represents KO\nPredicates:\nis_growth_company_stock(x) ::: x is a growth company's stock.\nis_volatile(x) ::: x is volatile.\nis_suitable_for_retirement_fund(x) ::: x is suitable for a retirement fund.\nis_mature_company_stock(x) ::: x is a mature company's stock.\nPremises:\n\u2200x (is_growth_company_stock(x) \u2192 is_volatile(x)) ::: All growth companies\u2019 stocks are volatile.\n\u2200x (is_volatile(x) \u2192 \u00acis_suitable_for_retirement_fund(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\n\u2203x (is_growth_company_stock(x)) ::: Some companies\u2019 stocks are growth companies\u2019 stocks.\n\u2200x (is_mature_company_stock(x) \u2192 is_suitable_for_retirement_fund(x)) ::: All mature companies\u2019 stocks are suitable for a retirement fund.\nis_mature_company_stock(\"ko\") ::: KO is a mature company\u2019s stock.\nQuery:\nis_growth_company_stock(\"ko\") \u2227 \u00acis_mature_company_stock(\"ko\") ::: KO is a company stock and a growth company\u2019s stock.",
            "problem": " All growth companies\u2019 stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies\u2019 stocks are growth companies\u2019 stocks. All mature companies\u2019 stocks are suitable for a retirement fund. KO is a mature company\u2019s stock.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nKO is a company stock and a growth company\u2019s stock."
        },
        {
            "example": 73,
            "response": [
                "((is_growth_company_stock(\"ko\")  |  is_volatile(\"ko\"))  ->   -(is_growth_company_stock(\"ko\")  |  is_volatile(\"ko\")))",
                [
                    "all x ((is_growth_company_stock(x)  ->  is_volatile(x)) )",
                    "all x ((is_volatile(x)  ->   -is_suitable_for_retirement_fund(x)) )",
                    "exists x ((is_growth_company_stock(x)) )",
                    "all x ((is_mature_company_stock(x)  ->  is_suitable_for_retirement_fund(x)) )",
                    "is_mature_company_stock(\"ko\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nko ::: represents KO\nPredicates:\nis_growth_company_stock(x) ::: x is a growth company's stock.\nis_volatile(x) ::: x is volatile.\nis_suitable_for_retirement_fund(x) ::: x is suitable for a retirement fund.\nis_mature_company_stock(x) ::: x is a mature company's stock.\nPremises:\n\u2200x (is_growth_company_stock(x) \u2192 is_volatile(x)) ::: All growth companies\u2019 stocks are volatile.\n\u2200x (is_volatile(x) \u2192 \u00acis_suitable_for_retirement_fund(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\n\u2203x (is_growth_company_stock(x)) ::: Some companies\u2019 stocks are growth companies\u2019 stocks.\n\u2200x (is_mature_company_stock(x) \u2192 is_suitable_for_retirement_fund(x)) ::: All mature companies\u2019 stocks are suitable for a retirement fund.\nis_mature_company_stock(\"ko\") ::: KO is a mature company\u2019s stock.\nQuery:\n((is_growth_company_stock(\"ko\") \u2228 is_volatile(\"ko\")) \u2192 \u00ac(is_growth_company_stock(\"ko\") \u2228 is_volatile(\"ko\"))) ::: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.",
            "problem": " All growth companies\u2019 stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies\u2019 stocks are growth companies\u2019 stocks. All mature companies\u2019 stocks are suitable for a retirement fund. KO is a mature company\u2019s stock.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile."
        },
        {
            "example": 74,
            "response": [
                "begin_with(\"joe\", \"34\")",
                [
                    "all x ((from(x, \"istanbul\")  ->  begin_with(x, \"34\")) )",
                    "all x (( -begin_with(x, \"34\")  ->   -from(x, \"istanbul\")) )",
                    "from(\"joe\", \"istanbul\") ",
                    "begin_with(\"tom\", \"35\") ",
                    "begin_with(x, \"35\")  ->   -begin_with(x, \"34\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\njoe ::: represents joe\ntom ::: represents tom\nistanbul ::: represents istanbul\n34 ::: represents the number 34\n35 ::: represents the number 35\nPredicates:\nbegin_with(x, y) ::: x begins with y.\nfrom(x, y) ::: x is from y.\nPremises:\n\u2200x (from(x, \"istanbul\") \u2192 begin_with(x, \"34\")) ::: All vehicle registration plates in Istanbul begin with the number 34.\n\u2200x (\u00acbegin_with(x, \"34\") \u2192 \u00acfrom(x, \"istanbul\")) ::: Plates that do not begin with the number 34 are not from Istanbul.\nfrom(\"joe\", \"istanbul\") ::: Joe's vehicle registration plate is from Istanbul.\nbegin_with(\"tom\", \"35\") ::: Tom's license plate begins with the number 35.\nbegin_with(x, \"35\") \u2192 \u00acbegin_with(x, \"34\") ::: If a license plate begins with the number 35, then it does not begin with the number 34.\nQuery:\nbegin_with(\"joe\", \"34\") ::: Joe's license plate begins with the number 34.",
            "problem": " All vehicle registration plates in Istanbul begin with the number 34. Plates that do not begin with the number 34 are not from Istanbul.  Joe's vehicle registration plate is from Istanbul.  Tom's license plate begins with the number 35.  [BG] If a license plate begins with the number 35, then it does not begin with the number 34.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJoe's license plate begins with the number 34."
        },
        {
            "example": 75,
            "response": [
                "is_from(\"tom\", \"istanbul\")",
                [
                    "all x ((is_vehicle_registration_plate(x)  &  is_from(x, \"istanbul\")  ->  begin_with(x, \"number_34\")) )",
                    "all x ((is_vehicle_registration_plate(x)  &   -begin_with(x, \"number_34\")  ->   -is_from(x, \"istanbul\")) )",
                    "is_vehicle_registration_plate(\"joe\")  &  is_from(\"joe\", \"istanbul\") ",
                    "is_vehicle_registration_plate(\"tom\")  &  begin_with(\"tom\", \"number_35\") ",
                    "begin_with(\"number_35\", \"number_34\")  ->   -begin_with(\"number_35\", \"number_34\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\njoe ::: represents joe\ntom ::: represents tom\nistanbul ::: represents istanbul\nnumber_34 ::: represents the number 34\nnumber_35 ::: represents the number 35\nPredicates:\nbegin_with(x, y) ::: x begins with y.\nis_from(x, y) ::: x is from y.\nis_vehicle_registration_plate(x) ::: x is a vehicle registration plate.\nPremises:\n\u2200x (is_vehicle_registration_plate(x) \u2227 is_from(x, \"istanbul\") \u2192 begin_with(x, \"number_34\")) ::: All vehicle registration plates in Istanbul begin with the number 34.\n\u2200x (is_vehicle_registration_plate(x) \u2227 \u00acbegin_with(x, \"number_34\") \u2192 \u00acis_from(x, \"istanbul\")) ::: Plates that do not begin with the number 34 are not from Istanbul.\nis_vehicle_registration_plate(\"joe\") \u2227 is_from(\"joe\", \"istanbul\") ::: Joe's vehicle registration plate is from Istanbul.\nis_vehicle_registration_plate(\"tom\") \u2227 begin_with(\"tom\", \"number_35\") ::: Tom's license plate begins with the number 35.\nbegin_with(\"number_35\", \"number_34\") \u2192 \u00acbegin_with(\"number_35\", \"number_34\") ::: If a license plate begins with the number 35, then it does not begin with the number 34.\nQuery:\nis_from(\"tom\", \"istanbul\") ::: Tom's license plate is from Istanbul.",
            "problem": " All vehicle registration plates in Istanbul begin with the number 34. Plates that do not begin with the number 34 are not from Istanbul.  Joe's vehicle registration plate is from Istanbul.  Tom's license plate begins with the number 35.  [BG] If a license plate begins with the number 35, then it does not begin with the number 34.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTom's license plate is from Istanbul."
        },
        {
            "example": 76,
            "response": [
                "need_to_earn_money(\"mary\", \"college_tuition\")",
                [
                    "all x ((work_in_student_jobs(x)  ->  need_to_earn_money(x, \"college_tuition\")) )",
                    "all x ((order_takeout_frequently(x)  ->  work_in_student_jobs(x)) )",
                    " all x ((order_takeout_frequently(x)  &   -enjoy(x, \"dining_hall_meals_and_recipes\"))  |  ( -order_takeout_frequently(x)  &  enjoy(x, \"dining_hall_meals_and_recipes\"))) ",
                    " all x (enjoy(x, \"dining_hall_meals_and_recipes\")  ->   -is_picky_eater(x)) ",
                    " all x (enjoy(x, \"dining_hall_meals_and_recipes\")  ->  spend_time_eating_and_catching_up(x, \"campus_dining_halls\")) ",
                    "(work_in_student_jobs(\"mary\")  &  need_to_earn_money(\"mary\", \"college_tuition\"))  ->  (( -work_in_student_jobs(\"mary\")  &   -need_to_earn_money(\"mary\", \"college_tuition\"))  |  ( -is_picky_eater(\"mary\")  &   -need_to_earn_money(\"mary\", \"college_tuition\"))) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nmary ::: represents mary\ncollege_tuition ::: represents college tuition\ndining_hall_meals_and_recipes ::: represents dining hall meals and recipes\ncampus_dining_halls ::: represents campus dining halls\nPredicates:\nwork_in_student_jobs(x) ::: x works in student jobs on campus.\nneed_to_earn_money(x, y) ::: x needs to earn money to help pay for y.\norder_takeout_frequently(x) ::: x orders takeout frequently in college.\nenjoy(x, y) ::: x enjoys y.\nis_picky_eater(x) ::: x is a picky eater.\nspend_time_eating_and_catching_up(x, y) ::: x spends a lot of their time eating and catching up with friends in y.\nPremises:\n\u2200x (work_in_student_jobs(x) \u2192 need_to_earn_money(x, \"college_tuition\")) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n\u2200x (order_takeout_frequently(x) \u2192 work_in_student_jobs(x)) ::: If people order takeout frequently in college, then they work in student jobs on campus.\n\u2200x ((order_takeout_frequently(x) \u2227 \u00acenjoy(x, \"dining_hall_meals_and_recipes\")) \u2228 (\u00acorder_takeout_frequently(x) \u2227 enjoy(x, \"dining_hall_meals_and_recipes\"))) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\n\u2200x (enjoy(x, \"dining_hall_meals_and_recipes\") \u2192 \u00acis_picky_eater(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\n\u2200x (enjoy(x, \"dining_hall_meals_and_recipes\") \u2192 spend_time_eating_and_catching_up(x, \"campus_dining_halls\")) ::: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n(work_in_student_jobs(\"mary\") \u2227 need_to_earn_money(\"mary\", \"college_tuition\")) \u2192 ((\u00acwork_in_student_jobs(\"mary\") \u2227 \u00acneed_to_earn_money(\"mary\", \"college_tuition\")) \u2228 (\u00acis_picky_eater(\"mary\") \u2227 \u00acneed_to_earn_money(\"mary\", \"college_tuition\"))) ::: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nQuery:\nneed_to_earn_money(\"mary\", \"college_tuition\") ::: Mary needs to earn money to help pay for her college tuition.",
            "problem": " If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMary needs to earn money to help pay for her college tuition."
        },
        {
            "example": 77,
            "response": [
                "is_not_picky(\"mary\")  &  spend_time_eating_and_catching_up(\"mary\", \"campus_dining_halls\")",
                [
                    "all x ((work_in_student_jobs(x)  ->  need_to_earn_money(x, \"college_tuition\")) )",
                    "all x ((order_takeout_frequently(x)  ->  work_in_student_jobs(x)) )",
                    " all x ((order_takeout_frequently(x)  &   -enjoy(x, \"dining_hall_meals_and_recipes\"))  |  ( -order_takeout_frequently(x)  &  enjoy(x, \"dining_hall_meals_and_recipes\"))) ",
                    " all x (enjoy(x, \"dining_hall_meals_and_recipes\")  ->  is_not_picky(x)) ",
                    " all x (enjoy(x, \"dining_hall_meals_and_recipes\")  ->  spend_time_eating_and_catching_up(x, \"campus_dining_halls\")) ",
                    "(work_in_student_jobs(\"mary\")  &  need_to_earn_money(\"mary\", \"college_tuition\"))  ->  (( -work_in_student_jobs(\"mary\")  &   -need_to_earn_money(\"mary\", \"college_tuition\"))  |  (is_not_picky(\"mary\")  &   -need_to_earn_money(\"mary\", \"college_tuition\"))) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nmary ::: represents mary\ncollege_tuition ::: represents college tuition\ndining_hall_meals_and_recipes ::: represents dining hall meals and recipes\ncampus_dining_halls ::: represents campus dining halls\nPredicates:\nwork_in_student_jobs(x) ::: x works in student jobs on campus.\nneed_to_earn_money(x, y) ::: x needs to earn money to help pay for y.\norder_takeout_frequently(x) ::: x orders takeout frequently in college.\nenjoy(x, y) ::: x enjoys y.\nis_not_picky(x) ::: x is not a picky eater.\nspend_time_eating_and_catching_up(x, y) ::: x spends a lot of their time eating and catching up with friends in y.\nPremises:\n\u2200x (work_in_student_jobs(x) \u2192 need_to_earn_money(x, \"college_tuition\")) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n\u2200x (order_takeout_frequently(x) \u2192 work_in_student_jobs(x)) ::: If people order takeout frequently in college, then they work in student jobs on campus.\n\u2200x ((order_takeout_frequently(x) \u2227 \u00acenjoy(x, \"dining_hall_meals_and_recipes\")) \u2228 (\u00acorder_takeout_frequently(x) \u2227 enjoy(x, \"dining_hall_meals_and_recipes\"))) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\n\u2200x (enjoy(x, \"dining_hall_meals_and_recipes\") \u2192 is_not_picky(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\n\u2200x (enjoy(x, \"dining_hall_meals_and_recipes\") \u2192 spend_time_eating_and_catching_up(x, \"campus_dining_halls\")) ::: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n(work_in_student_jobs(\"mary\") \u2227 need_to_earn_money(\"mary\", \"college_tuition\")) \u2192 ((\u00acwork_in_student_jobs(\"mary\") \u2227 \u00acneed_to_earn_money(\"mary\", \"college_tuition\")) \u2228 (is_not_picky(\"mary\") \u2227 \u00acneed_to_earn_money(\"mary\", \"college_tuition\"))) ::: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nQuery:\nis_not_picky(\"mary\") \u2227 spend_time_eating_and_catching_up(\"mary\", \"campus_dining_halls\") ::: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
            "problem": " If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls."
        },
        {
            "example": 78,
            "response": [
                "(is_not_picky_eater(\"mary\")  |  ( -is_not_picky_eater(\"mary\")  &  spend_time_eating_and_catching_up(\"mary\", \"campus_dining_halls\")))",
                [
                    "all x ((work_in_student_jobs(x)  ->  need_to_earn_money(x, \"college_tuition\")) )",
                    "all x ((order_takeout_frequently(x)  ->  work_in_student_jobs(x)) )",
                    " all x ((order_takeout_frequently(x)  &   -enjoy(x, \"dining_hall_meals_and_recipes\"))  |  ( -order_takeout_frequently(x)  &  enjoy(x, \"dining_hall_meals_and_recipes\"))) ",
                    " all x (enjoy(x, \"dining_hall_meals_and_recipes\")  ->  is_not_picky_eater(x)) ",
                    " all x (enjoy(x, \"dining_hall_meals_and_recipes\")  ->  spend_time_eating_and_catching_up(x, \"campus_dining_halls\")) ",
                    "(work_in_student_jobs(\"mary\")  &  need_to_earn_money(\"mary\", \"college_tuition\"))  ->  (( -work_in_student_jobs(\"mary\")  &   -need_to_earn_money(\"mary\", \"college_tuition\"))  |  (is_not_picky_eater(\"mary\")  &   -need_to_earn_money(\"mary\", \"college_tuition\"))) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nmary ::: represents mary\ncollege_tuition ::: represents college tuition\ndining_hall_meals_and_recipes ::: represents dining hall meals and recipes\ncampus_dining_halls ::: represents campus dining halls\nPredicates:\nwork_in_student_jobs(x) ::: x works in student jobs on campus.\nneed_to_earn_money(x, y) ::: x needs to earn money to help pay for y.\norder_takeout_frequently(x) ::: x orders takeout frequently.\nenjoy(x, y) ::: x enjoys y.\nis_not_picky_eater(x) ::: x is not a picky eater.\nspend_time_eating_and_catching_up(x, y) ::: x spends a lot of their time eating and catching up with friends in y.\nPremises:\n\u2200x (work_in_student_jobs(x) \u2192 need_to_earn_money(x, \"college_tuition\")) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n\u2200x (order_takeout_frequently(x) \u2192 work_in_student_jobs(x)) ::: If people order takeout frequently in college, then they work in student jobs on campus.\n\u2200x ((order_takeout_frequently(x) \u2227 \u00acenjoy(x, \"dining_hall_meals_and_recipes\")) \u2228 (\u00acorder_takeout_frequently(x) \u2227 enjoy(x, \"dining_hall_meals_and_recipes\"))) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\n\u2200x (enjoy(x, \"dining_hall_meals_and_recipes\") \u2192 is_not_picky_eater(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\n\u2200x (enjoy(x, \"dining_hall_meals_and_recipes\") \u2192 spend_time_eating_and_catching_up(x, \"campus_dining_halls\")) ::: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n(work_in_student_jobs(\"mary\") \u2227 need_to_earn_money(\"mary\", \"college_tuition\")) \u2192 ((\u00acwork_in_student_jobs(\"mary\") \u2227 \u00acneed_to_earn_money(\"mary\", \"college_tuition\")) \u2228 (is_not_picky_eater(\"mary\") \u2227 \u00acneed_to_earn_money(\"mary\", \"college_tuition\"))) ::: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nQuery:\n(is_not_picky_eater(\"mary\") \u2228 (\u00acis_not_picky_eater(\"mary\") \u2227 spend_time_eating_and_catching_up(\"mary\", \"campus_dining_halls\"))) ::: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
            "problem": " If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls."
        },
        {
            "example": 79,
            "response": [
                "is_product_of(\"dried_thai_chilies\", \"baked_by_melissa\")",
                [
                    "all x ((is_bakery(x)  ->   -is_spicy(x)) )",
                    "all x ((is_cupcake(x)  ->  is_bakery(x)) )",
                    "all x ((is_hotpot(x)  ->  is_spicy(x)) )",
                    "all x ((is_product_of(x, \"baked_by_melissa\")  ->  is_cupcake(x)) )",
                    "((is_spicy(\"dried_thai_chilies\")  |  is_bakery(\"dried_thai_chilies\"))  ->  (is_hotpot(\"dried_thai_chilies\")  |  is_spicy(\"dried_thai_chilies\"))) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nbaked_by_melissa ::: represents Baked by Melissa\ndried_thai_chilies ::: represents dried Thai chilies\nPredicates:\nis_bakery(x) ::: x is a bakery.\nis_spicy(x) ::: x is spicy.\nis_cupcake(x) ::: x is a cupcake.\nis_hotpot(x) ::: x is a hotpot.\nis_product_of(x, y) ::: x is a product of y.\nPremises:\n\u2200x (is_bakery(x) \u2192 \u00acis_spicy(x)) ::: No bakery is spicy.\n\u2200x (is_cupcake(x) \u2192 is_bakery(x)) ::: All cupcakes are bakeries.\n\u2200x (is_hotpot(x) \u2192 is_spicy(x)) ::: All hotpots are spicy.\n\u2200x (is_product_of(x, \"baked_by_melissa\") \u2192 is_cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n((is_spicy(\"dried_thai_chilies\") \u2228 is_bakery(\"dried_thai_chilies\")) \u2192 (is_hotpot(\"dried_thai_chilies\") \u2228 is_spicy(\"dried_thai_chilies\"))) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nQuery:\nis_product_of(\"dried_thai_chilies\", \"baked_by_melissa\") ::: Dried Thai chilies are a product of Baked by Melissa.",
            "problem": " No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDried Thai chilies are a product of Baked by Melissa."
        },
        {
            "example": 80,
            "response": [
                " -is_product_of(\"dried_thai_chilies\", \"baked_by_melissa\")",
                [
                    "all x ((is_bakery(x)  ->   -is_spicy(x)) )",
                    "all x ((is_cupcake(x)  ->  is_bakery(x)) )",
                    "all x ((is_hotpot(x)  ->  is_spicy(x)) )",
                    "all x ((is_product_of(x, \"baked_by_melissa\")  ->  is_cupcake(x)) )",
                    "((is_spicy(\"dried_thai_chilies\")  |  is_bakery(\"dried_thai_chilies\"))  ->  (is_hotpot(\"dried_thai_chilies\")  |  is_spicy(\"dried_thai_chilies\"))) "
                ]
            ],
            "label": "True",
            "text": "Constants:\ndried_thai_chilies ::: represents dried Thai chilies\nbaked_by_melissa ::: represents Baked by Melissa\nPredicates:\nis_bakery(x) ::: x is a bakery.\nis_spicy(x) ::: x is spicy.\nis_cupcake(x) ::: x is a cupcake.\nis_hotpot(x) ::: x is a hotpot.\nis_product_of(x, y) ::: x is a product of y.\nPremises:\n\u2200x (is_bakery(x) \u2192 \u00acis_spicy(x)) ::: No bakery is spicy.\n\u2200x (is_cupcake(x) \u2192 is_bakery(x)) ::: All cupcakes are bakeries.\n\u2200x (is_hotpot(x) \u2192 is_spicy(x)) ::: All hotpots are spicy.\n\u2200x (is_product_of(x, \"baked_by_melissa\") \u2192 is_cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n((is_spicy(\"dried_thai_chilies\") \u2228 is_bakery(\"dried_thai_chilies\")) \u2192 (is_hotpot(\"dried_thai_chilies\") \u2228 is_spicy(\"dried_thai_chilies\"))) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nQuery:\n\u00acis_product_of(\"dried_thai_chilies\", \"baked_by_melissa\") ::: Dried Thai chilies are not a product of Baked by Melissa.",
            "problem": " No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDried Thai chilies are not a product of Baked by Melissa."
        },
        {
            "example": 81,
            "response": [
                "is_hotpot(\"dried_thai_chilies\")",
                [
                    "all x ((is_bakery(x)  ->   -is_spicy(x)) )",
                    "all x ((is_cupcake(x)  ->  is_bakery(x)) )",
                    "all x ((is_hotpot(x)  ->  is_spicy(x)) )",
                    "all x ((is_product_of(x, \"baked_by_melissa\")  ->  is_cupcake(x)) )",
                    "((is_spicy(\"dried_thai_chilies\")  |  is_bakery(\"dried_thai_chilies\"))  ->  (is_hotpot(\"dried_thai_chilies\")  |  is_spicy(\"dried_thai_chilies\"))) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\ndried_thai_chilies ::: represents dried Thai chilies\nbaked_by_melissa ::: represents Baked by Melissa\nPredicates:\nis_bakery(x) ::: x is a bakery.\nis_spicy(x) ::: x is spicy.\nis_cupcake(x) ::: x is a cupcake.\nis_hotpot(x) ::: x is a hotpot.\nis_product_of(x, y) ::: x is a product of y.\nPremises:\n\u2200x (is_bakery(x) \u2192 \u00acis_spicy(x)) ::: No bakery is spicy.\n\u2200x (is_cupcake(x) \u2192 is_bakery(x)) ::: All cupcakes are bakeries.\n\u2200x (is_hotpot(x) \u2192 is_spicy(x)) ::: All hotpots are spicy.\n\u2200x (is_product_of(x, \"baked_by_melissa\") \u2192 is_cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n((is_spicy(\"dried_thai_chilies\") \u2228 is_bakery(\"dried_thai_chilies\")) \u2192 (is_hotpot(\"dried_thai_chilies\") \u2228 is_spicy(\"dried_thai_chilies\"))) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nQuery:\nis_hotpot(\"dried_thai_chilies\") ::: Dried Thai chilies are a hotpot.",
            "problem": " No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDried Thai chilies are a hotpot."
        },
        {
            "example": 82,
            "response": [
                " -is_product_of(\"dried_thai_chilies\", \"baked_by_melissa\")  &   -is_bakery(\"dried_thai_chilies\")",
                [
                    "all x ((is_bakery(x)  ->   -is_spicy(x)) )",
                    "all x ((is_cupcake(x)  ->  is_bakery(x)) )",
                    "all x ((is_hotpot(x)  ->  is_spicy(x)) )",
                    "all x ((is_product_of(x, \"baked_by_melissa\")  ->  is_cupcake(x)) )",
                    "((is_spicy(\"dried_thai_chilies\")  |  is_bakery(\"dried_thai_chilies\"))  ->  (is_hotpot(\"dried_thai_chilies\")  |  is_spicy(\"dried_thai_chilies\"))) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nbaked_by_melissa ::: represents Baked by Melissa\ndried_thai_chilies ::: represents dried Thai chilies\nPredicates:\nis_bakery(x) ::: x is a bakery.\nis_spicy(x) ::: x is spicy.\nis_cupcake(x) ::: x is a cupcake.\nis_hotpot(x) ::: x is a hotpot.\nis_product_of(x, y) ::: x is a product of y.\nPremises:\n\u2200x (is_bakery(x) \u2192 \u00acis_spicy(x)) ::: No bakery is spicy.\n\u2200x (is_cupcake(x) \u2192 is_bakery(x)) ::: All cupcakes are bakeries.\n\u2200x (is_hotpot(x) \u2192 is_spicy(x)) ::: All hotpots are spicy.\n\u2200x (is_product_of(x, \"baked_by_melissa\") \u2192 is_cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n((is_spicy(\"dried_thai_chilies\") \u2228 is_bakery(\"dried_thai_chilies\")) \u2192 (is_hotpot(\"dried_thai_chilies\") \u2228 is_spicy(\"dried_thai_chilies\"))) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nQuery:\n\u00acis_product_of(\"dried_thai_chilies\", \"baked_by_melissa\") \u2227 \u00acis_bakery(\"dried_thai_chilies\") ::: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.",
            "problem": " No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery."
        },
        {
            "example": 83,
            "response": [
                "is_cupcake(\"dried_thai_chilies\")  &  is_product_of(\"dried_thai_chilies\", \"baked_by_melissa\")",
                [
                    "all x ((is_bakery(x)  ->   -is_spicy(x)) )",
                    "all x ((is_cupcake(x)  ->  is_bakery(x)) )",
                    "all x ((is_hotpot(x)  ->  is_spicy(x)) )",
                    "all x ((is_product_of(x, \"baked_by_melissa\")  ->  is_cupcake(x)) )",
                    "((is_spicy(\"dried_thai_chilies\")  |  is_bakery(\"dried_thai_chilies\"))  ->  (is_hotpot(\"dried_thai_chilies\")  |  is_spicy(\"dried_thai_chilies\"))) "
                ]
            ],
            "label": "False",
            "text": "Constants:\ndried_thai_chilies ::: represents dried Thai chilies\nbaked_by_melissa ::: represents Baked by Melissa\nPredicates:\nis_bakery(x) ::: x is a bakery.\nis_spicy(x) ::: x is spicy.\nis_cupcake(x) ::: x is a cupcake.\nis_hotpot(x) ::: x is a hotpot.\nis_product_of(x, y) ::: x is a product of y.\nPremises:\n\u2200x (is_bakery(x) \u2192 \u00acis_spicy(x)) ::: No bakery is spicy.\n\u2200x (is_cupcake(x) \u2192 is_bakery(x)) ::: All cupcakes are bakeries.\n\u2200x (is_hotpot(x) \u2192 is_spicy(x)) ::: All hotpots are spicy.\n\u2200x (is_product_of(x, \"baked_by_melissa\") \u2192 is_cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n((is_spicy(\"dried_thai_chilies\") \u2228 is_bakery(\"dried_thai_chilies\")) \u2192 (is_hotpot(\"dried_thai_chilies\") \u2228 is_spicy(\"dried_thai_chilies\"))) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nQuery:\nis_cupcake(\"dried_thai_chilies\") \u2227 is_product_of(\"dried_thai_chilies\", \"baked_by_melissa\") ::: Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
            "problem": " No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDried Thai chilies are cupcakes and a product of Baked by Melissa."
        },
        {
            "example": 84,
            "response": [
                "(provide_takeout_service(\"subway\")  &  receive_negative_reviews(\"subway\"))  ->  (rating_greater_than_9(\"subway\")  &   -provide_takeout_service(\"subway\"))",
                [
                    "all x ((listed_in(x, \"yelp_recommendations\")  ->   -receive_negative_reviews(x)) )",
                    "all x ((rating_greater_than_9(x)  ->  listed_in(x, \"yelp_recommendations\")) )",
                    "exists x (( -provide_takeout_service(x)  &  receive_negative_reviews(x)) )",
                    "all x ((popular_among_locals(x)  ->  rating_greater_than_9(x)) )",
                    "(rating_greater_than_9(\"subway\")  |  popular_among_locals(\"subway\")) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nsubway ::: represents subway\nyelp_recommendations ::: represents yelp's recommendations\nPredicates:\nlisted_in(x, y) ::: x is listed in y.\nreceive_negative_reviews(x) ::: x receives many negative reviews.\nrating_greater_than_9(x) ::: x has a rating greater than 9.\nprovide_takeout_service(x) ::: x provides take-out service.\npopular_among_locals(x) ::: x is popular among local residents.\nPremises:\n\u2200x (listed_in(x, \"yelp_recommendations\") \u2192 \u00acreceive_negative_reviews(x)) ::: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\n\u2200x (rating_greater_than_9(x) \u2192 listed_in(x, \"yelp_recommendations\")) ::: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\n\u2203x (\u00acprovide_takeout_service(x) \u2227 receive_negative_reviews(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.\n\u2200x (popular_among_locals(x) \u2192 rating_greater_than_9(x)) ::: All restaurants that are popular among local residents have ratings greater than 9.\n(rating_greater_than_9(\"subway\") \u2228 popular_among_locals(\"subway\")) ::: Subway has a rating greater than 9 or is popular among local residents.\nQuery:\n(provide_takeout_service(\"subway\") \u2227 receive_negative_reviews(\"subway\")) \u2192 (rating_greater_than_9(\"subway\") \u2227 \u00acprovide_takeout_service(\"subway\")) ::: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.",
            "problem": " If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service."
        },
        {
            "example": 85,
            "response": [
                "provides_takeout(\"subway\")  &   -receive_negative_reviews(\"subway\")",
                [
                    "all x ((is_listed_in(x, \"yelp_recommendations\")  ->   -receive_negative_reviews(x)) )",
                    "all x ((has_rating_greater_than_9(x)  ->  is_listed_in(x, \"yelp_recommendations\")) )",
                    "exists x ((does_not_provide_takeout(x)  &  receive_negative_reviews(x)) )",
                    "all x ((is_popular_among_locals(x)  ->  has_rating_greater_than_9(x)) )",
                    "(has_rating_greater_than_9(\"subway\")  |  is_popular_among_locals(\"subway\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nsubway ::: represents subway\nyelp_recommendations ::: represents yelp's recommendations\nPredicates:\nis_listed_in(x, y) ::: x is listed in y.\nreceive_negative_reviews(x) ::: x receives many negative reviews.\nhas_rating_greater_than_9(x) ::: x has a rating greater than 9.\ndoes_not_provide_takeout(x) ::: x does not provide take-out service.\nis_popular_among_locals(x) ::: x is popular among local residents.\nprovides_takeout(x) ::: x provides take-out service.\nPremises:\n\u2200x (is_listed_in(x, \"yelp_recommendations\") \u2192 \u00acreceive_negative_reviews(x)) ::: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\n\u2200x (has_rating_greater_than_9(x) \u2192 is_listed_in(x, \"yelp_recommendations\")) ::: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\n\u2203x (does_not_provide_takeout(x) \u2227 receive_negative_reviews(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.\n\u2200x (is_popular_among_locals(x) \u2192 has_rating_greater_than_9(x)) ::: All restaurants that are popular among local residents have ratings greater than 9.\n(has_rating_greater_than_9(\"subway\") \u2228 is_popular_among_locals(\"subway\")) ::: Subway has a rating greater than 9 or is popular among local residents.\nQuery:\nprovides_takeout(\"subway\") \u2227 \u00acreceive_negative_reviews(\"subway\") ::: Subway provides take-out service and does not receive many negative reviews.",
            "problem": " If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSubway provides take-out service and does not receive many negative reviews."
        },
        {
            "example": 86,
            "response": [
                "does_not_provide_take_out_service(\"subway\")",
                [
                    "all x ((is_listed_in(x, \"yelp_recommendations\")  ->   -receive_negative_reviews(x)) )",
                    "all x ((has_rating_greater_than_9(x)  ->  is_listed_in(x, \"yelp_recommendations\")) )",
                    "exists x ((does_not_provide_take_out_service(x)  &  receive_negative_reviews(x)) )",
                    "all x ((is_popular_among_local_residents(x)  ->  has_rating_greater_than_9(x)) )",
                    "(has_rating_greater_than_9(\"subway\")  |  is_popular_among_local_residents(\"subway\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nsubway ::: represents subway\nyelp_recommendations ::: represents yelp's recommendations\nPredicates:\nis_listed_in(x, y) ::: x is listed in y.\nreceive_negative_reviews(x) ::: x receives many negative reviews.\nhas_rating_greater_than_9(x) ::: x has a rating greater than 9.\ndoes_not_provide_take_out_service(x) ::: x does not provide take-out service.\nis_popular_among_local_residents(x) ::: x is popular among local residents.\nPremises:\n\u2200x (is_listed_in(x, \"yelp_recommendations\") \u2192 \u00acreceive_negative_reviews(x)) ::: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\n\u2200x (has_rating_greater_than_9(x) \u2192 is_listed_in(x, \"yelp_recommendations\")) ::: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\n\u2203x (does_not_provide_take_out_service(x) \u2227 receive_negative_reviews(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.\n\u2200x (is_popular_among_local_residents(x) \u2192 has_rating_greater_than_9(x)) ::: All restaurants that are popular among local residents have ratings greater than 9.\n(has_rating_greater_than_9(\"subway\") \u2228 is_popular_among_local_residents(\"subway\")) ::: Subway has a rating greater than 9 or is popular among local residents.\nQuery:\ndoes_not_provide_take_out_service(\"subway\") ::: Subway does not provide take-out service.",
            "problem": " If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSubway does not provide take-out service."
        },
        {
            "example": 87,
            "response": [
                "lose(\"nemesis\")",
                [
                    "all x ((is_superhero_movie(x)  ->  win(\"good_guys\")) )",
                    "is_superhero_movie(\"surprising_adventures_of_sir_digby_chicken_caesar\") ",
                    " all x  all y ((is_good_guy(x)  &   -is_good_guy(y))  ->  (fight(x, y)  &  fight(y, x))) ",
                    "fight(\"sir_digby\", \"nemesis\") ",
                    " all x  all y (is_superhero_movie(x)  &  is_named_after(x, y)  ->  is_good_guy(y)) ",
                    "is_named_after(\"surprising_adventures_of_sir_digby_chicken_caesar\", \"sir_digby\") ",
                    " all x  all y (fight(x, y)  &  win(x)  ->  lose(y)) ",
                    " all x  all y (is_superhero_movie(x)  &  is_named_after(x, y)  ->  appear_in(y, x)) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nsir_digby ::: represents Sir Digby\nsurprising_adventures_of_sir_digby_chicken_caesar ::: represents The Surprising Adventures of Sir Digby Chicken Caesar\nnemesis ::: represents Sir Digby's nemesis\nPredicates:\nis_superhero_movie(x) ::: x is a superhero movie.\nwin(x) ::: x wins.\nfight(x, y) ::: x fights y.\nis_named_after(x, y) ::: x is named after y.\nis_good_guy(x) ::: x is a good guy.\nappear_in(x, y) ::: x appears in y.\nlose(x) ::: x loses.\nPremises:\n\u2200x (is_superhero_movie(x) \u2192 win(\"good_guys\")) ::: In superhero movies, the good guys always win.\nis_superhero_movie(\"surprising_adventures_of_sir_digby_chicken_caesar\") ::: The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.\n\u2200x \u2200y ((is_good_guy(x) \u2227 \u00acis_good_guy(y)) \u2192 (fight(x, y) \u2227 fight(y, x))) ::: Good guys fight bad guys and vice versa.\nfight(\"sir_digby\", \"nemesis\") ::: Sir Digby fights his nemesis.\n\u2200x \u2200y (is_superhero_movie(x) \u2227 is_named_after(x, y) \u2192 is_good_guy(y)) ::: If a superhero movie is named after a character, that character is a good guy.\nis_named_after(\"surprising_adventures_of_sir_digby_chicken_caesar\", \"sir_digby\") ::: The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.\n\u2200x \u2200y (fight(x, y) \u2227 win(x) \u2192 lose(y)) ::: If somebody wins a fight, the person they are fighting loses.\n\u2200x \u2200y (is_superhero_movie(x) \u2227 is_named_after(x, y) \u2192 appear_in(y, x)) ::: If a superhero movie is named after a character, that character appears in the movie.\nQuery:\nlose(\"nemesis\") ::: Sir Digby\u2019s nemesis loses.",
            "problem": " In superhero movies, the good guys always win. The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie. Good guys fight bad guys and vice versa. Sir Digby fights his nemesis. If a superhero movie is named after a character, that character is a good guy. The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby. If somebody wins a fight, the person they are fighting loses. If a superhero movie is named after a character, that character appears in the movie.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSir Digby\u2019s nemesis loses."
        },
        {
            "example": 88,
            "response": [
                "contain(\"walden\", \"knowledge\")",
                [
                    " all x  all y (is_book(x)  ->  contain(x, y)) ",
                    " all x  all y (read(x, y)  ->  gain(x, \"knowledge\")) ",
                    "all x ((gain(x, \"knowledge\")  ->  is_smarter(x)) )",
                    "read(\"harry\", \"walden\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nharry ::: represents harry\nwalden ::: represents the book \"Walden\"\nPredicates:\ncontain(x, y) ::: x contains y.\nread(x, y) ::: x reads y.\ngain(x, y) ::: x gains y.\nis_smarter(x) ::: x is smarter.\nPremises:\n\u2200x \u2200y (is_book(x) \u2192 contain(x, y)) ::: Books contain tons of knowledge.\n\u2200x \u2200y (read(x, y) \u2192 gain(x, \"knowledge\")) ::: When a person reads a book, that person gains knowledge.\n\u2200x (gain(x, \"knowledge\") \u2192 is_smarter(x)) ::: If a person gains knowledge, they become smarter.\nread(\"harry\", \"walden\") ::: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nQuery:\ncontain(\"walden\", \"knowledge\") ::: Walden contains knowledge.",
            "problem": " [BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge.  [BG] If a person gains knowledge, they become smarter. Harry read the book \u201cWalden\u201d by Henry Thoreau.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nWalden contains knowledge."
        },
        {
            "example": 89,
            "response": [
                "become_smarter(\"harry\")",
                [
                    " all x  all y (is_book(x)  ->  contain(x, \"knowledge\")) ",
                    " all x  all y (read(x, y)  &  is_book(y)  ->  gain(x, \"knowledge\")) ",
                    "all x ((gain(x, \"knowledge\")  ->  become_smarter(x)) )",
                    "read(\"harry\", \"walden\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nharry ::: represents harry\nwalden ::: represents the book \"Walden\"\nPredicates:\ncontain(x, y) ::: x contains y.\nread(x, y) ::: x reads y.\ngain(x, y) ::: x gains y.\nbecome_smarter(x) ::: x becomes smarter.\nPremises:\n\u2200x \u2200y (is_book(x) \u2192 contain(x, \"knowledge\")) ::: Books contain tons of knowledge.\n\u2200x \u2200y (read(x, y) \u2227 is_book(y) \u2192 gain(x, \"knowledge\")) ::: When a person reads a book, that person gains knowledge.\n\u2200x (gain(x, \"knowledge\") \u2192 become_smarter(x)) ::: If a person gains knowledge, they become smarter.\nread(\"harry\", \"walden\") ::: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nQuery:\nbecome_smarter(\"harry\") ::: Harry is smarter than before.",
            "problem": " [BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge.  [BG] If a person gains knowledge, they become smarter. Harry read the book \u201cWalden\u201d by Henry Thoreau.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nHarry is smarter than before."
        },
        {
            "example": 90,
            "response": [
                "all x ((become_smarter(x)  ->  gain(x, \"knowledge\")))",
                [
                    "all x ((is_book(x)  ->  contain(x, \"knowledge\")) )",
                    " all x  all y (read(x, y)  ->  gain(x, \"knowledge\")) ",
                    "all x ((gain(x, \"knowledge\")  ->  become_smarter(x)) )",
                    "read(\"harry\", \"walden\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nharry ::: represents harry\nwalden ::: represents the book \"Walden\"\nPredicates:\ncontain(x, y) ::: x contains y.\nread(x, y) ::: x reads y.\ngain(x, y) ::: x gains y.\nbecome_smarter(x) ::: x becomes smarter.\nPremises:\n\u2200x (is_book(x) \u2192 contain(x, \"knowledge\")) ::: Books contain tons of knowledge.\n\u2200x \u2200y (read(x, y) \u2192 gain(x, \"knowledge\")) ::: When a person reads a book, that person gains knowledge.\n\u2200x (gain(x, \"knowledge\") \u2192 become_smarter(x)) ::: If a person gains knowledge, they become smarter.\nread(\"harry\", \"walden\") ::: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nQuery:\n\u2200x (become_smarter(x) \u2192 gain(x, \"knowledge\")) ::: A person who is smarter has gained knowledge.",
            "problem": " [BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge.  [BG] If a person gains knowledge, they become smarter. Harry read the book \u201cWalden\u201d by Henry Thoreau.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nA person who is smarter has gained knowledge."
        },
        {
            "example": 91,
            "response": [
                "is_language_generation_task(\"machine_translation\")",
                [
                    "all x (((is_nlp_task(x)  ->  (is_language_generation_task(x)  |  is_language_understanding_task(x)))  &  (is_language_generation_task(x)  ->   -is_language_understanding_task(x))  &  (is_language_understanding_task(x)  ->   -is_language_generation_task(x))) )",
                    "all x ((is_nlp_task(x)  &  is_output_text_sequence(x)  ->  is_language_generation_task(x)) )",
                    "is_nlp_task(\"machine_translation\") ",
                    "is_output_text_sequence(\"machine_translation\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nmachine_translation ::: represents machine translation\nPredicates:\nis_nlp_task(x) ::: x is a natural language processing task.\nis_language_generation_task(x) ::: x is a language generation task.\nis_language_understanding_task(x) ::: x is a language understanding task.\nis_output_text_sequence(x) ::: the output of x is a text sequence.\nPremises:\n\u2200x ((is_nlp_task(x) \u2192 (is_language_generation_task(x) \u2228 is_language_understanding_task(x))) \u2227 (is_language_generation_task(x) \u2192 \u00acis_language_understanding_task(x)) \u2227 (is_language_understanding_task(x) \u2192 \u00acis_language_generation_task(x))) ::: Natural language processing tasks can be categorized as either language generation task or language understanding task.\n\u2200x (is_nlp_task(x) \u2227 is_output_text_sequence(x) \u2192 is_language_generation_task(x)) ::: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nis_nlp_task(\"machine_translation\") ::: Machine translation is a natural language processing task.\nis_output_text_sequence(\"machine_translation\") ::: The output of machine translation is a text sequence.\nQuery:\nis_language_generation_task(\"machine_translation\") ::: Machine translation is a language generation task.",
            "problem": " Natural language processing tasks can be categorized as either language generation task or language understanding task. If the output of a natural language processing task is a text sequence, then it is a language generation task. Machine translation is a natural language processing task. The output of machine translation is a text sequence.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMachine translation is a language generation task."
        },
        {
            "example": 92,
            "response": [
                "is_language_understanding_task(\"machine_translation\")",
                [
                    "all x (((is_nlp_task(x)  ->  (is_language_generation_task(x)  |  is_language_understanding_task(x)))  &  (is_language_generation_task(x)  ->   -is_language_understanding_task(x))  &  (is_language_understanding_task(x)  ->   -is_language_generation_task(x))) )",
                    "all x ((is_nlp_task(x)  &  is_output_text_sequence(x)  ->  is_language_generation_task(x)) )",
                    "is_nlp_task(\"machine_translation\") ",
                    "is_output_text_sequence(\"machine_translation\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nmachine_translation ::: represents machine translation\nPredicates:\nis_nlp_task(x) ::: x is a natural language processing task.\nis_language_generation_task(x) ::: x is a language generation task.\nis_language_understanding_task(x) ::: x is a language understanding task.\nis_output_text_sequence(x) ::: the output of x is a text sequence.\nPremises:\n\u2200x ((is_nlp_task(x) \u2192 (is_language_generation_task(x) \u2228 is_language_understanding_task(x))) \u2227 (is_language_generation_task(x) \u2192 \u00acis_language_understanding_task(x)) \u2227 (is_language_understanding_task(x) \u2192 \u00acis_language_generation_task(x))) ::: Natural language processing tasks can be categorized as either language generation task or language understanding task.\n\u2200x (is_nlp_task(x) \u2227 is_output_text_sequence(x) \u2192 is_language_generation_task(x)) ::: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nis_nlp_task(\"machine_translation\") ::: Machine translation is a natural language processing task.\nis_output_text_sequence(\"machine_translation\") ::: The output of machine translation is a text sequence.\nQuery:\nis_language_understanding_task(\"machine_translation\") ::: Machine translation is a language understanding task.",
            "problem": " Natural language processing tasks can be categorized as either language generation task or language understanding task. If the output of a natural language processing task is a text sequence, then it is a language generation task. Machine translation is a natural language processing task. The output of machine translation is a text sequence.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMachine translation is a language understanding task."
        },
        {
            "example": 93,
            "response": [
                "will_rent(\"tom\", \"olive_garden\")",
                [
                    "exists x ((is_managed_building(x)  &  allowed_in(\"pets\", x)) )",
                    "all x ((is_managed_building(x)  ->  require_deposit(x)) )",
                    "all x ((require_deposit(x)  ->  (equal_to_one_month_rent(x)  |  more_than_one_month_rent(x))) )",
                    "is_cat(\"fluffy\")  &  is_owner(\"tom\", \"fluffy\") ",
                    "all x ((is_cat(x)  ->  is_pet(x)) )",
                    "is_managed_building(\"olive_garden\") ",
                    "monthly_rent(\"olive_garden\", \"2000_dollars\") ",
                    " all x  all y (is_managed_building(x)  &  is_pet(y)  &  allowed_in(y, x)  &   -more_than(\"1500_dollars\", x)  ->  will_rent(\"tom\", x)) ",
                    "more_than(\"2000_dollars\", \"1500_dollars\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nfluffy ::: represents fluffy\ntom ::: represents tom\nolive_garden ::: represents the olive garden\n2000_dollars ::: represents 2000 dollars\n1500_dollars ::: represents 1500 dollars\nPredicates:\nallowed_in(x, y) ::: x is allowed in y.\nis_pet(x) ::: x is a pet.\nis_cat(x) ::: x is a cat.\nis_managed_building(x) ::: x is a managed building.\nrequire_deposit(x) ::: x requires a deposit.\nequal_to_one_month_rent(x) ::: x is equal to one month's rent.\nmore_than_one_month_rent(x) ::: x is more than one month's rent.\nis_owner(x, y) ::: x is the owner of y.\nmonthly_rent(x, y) ::: x has a monthly rent of y.\nwill_rent(x, y) ::: x will rent y.\nmore_than(x, y) ::: x is more than y.\nPremises:\n\u2203x (is_managed_building(x) \u2227 allowed_in(\"pets\", x)) ::: Pets are allowed in some managed buildings.\n\u2200x (is_managed_building(x) \u2192 require_deposit(x)) ::: A deposit is required to rent an apartment in a managed building.\n\u2200x (require_deposit(x) \u2192 (equal_to_one_month_rent(x) \u2228 more_than_one_month_rent(x))) ::: The security deposit can be either equal to one month's rent or more.\nis_cat(\"fluffy\") \u2227 is_owner(\"tom\", \"fluffy\") ::: Fluffy is Tom's cat.\n\u2200x (is_cat(x) \u2192 is_pet(x)) ::: Cats are pets.\nis_managed_building(\"olive_garden\") ::: The Olive Garden is a managed building.\nmonthly_rent(\"olive_garden\", \"2000_dollars\") ::: The monthly rent at the Olive Garden is $2000.\n\u2200x \u2200y (is_managed_building(x) \u2227 is_pet(y) \u2227 allowed_in(y, x) \u2227 \u00acmore_than(\"1500_dollars\", x) \u2192 will_rent(\"tom\", x)) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nmore_than(\"2000_dollars\", \"1500_dollars\") ::: 2000$ is more than $1500.\nQuery:\nwill_rent(\"tom\", \"olive_garden\") ::: Tom will rent an apartment in The Olive Garden.",
            "problem": " Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTom will rent an apartment in The Olive Garden."
        },
        {
            "example": 94,
            "response": [
                "allowed_in(\"tom\", \"olive_garden\")  &  move_in_with(\"tom\", \"fluffy\")",
                [
                    "exists x ((is_managed_building(x)  &  allowed_in(\"pets\", x)) )",
                    "all x ((is_managed_building(x)  ->  required_deposit(x)) )",
                    " all x  all y (required_deposit(x)  ->  is_equal_or_more(y, \"one_month_rent\")) ",
                    "is_cat(\"fluffy\")  &  is_pet(\"fluffy\")  &  \"fluffy\" = \"tom's_cat\" ",
                    "all x ((is_cat(x)  ->  is_pet(x)) )",
                    "is_managed_building(\"olive_garden\") ",
                    "is_monthly_rent(\"2000_dollars\", \"olive_garden\") ",
                    "(will_rent(\"tom\", \"managed_building\")  <->  (move_in_with(\"tom\", \"fluffy\")  &  is_no_more_than(\"security_deposit\", \"1500_dollars\"))) ",
                    "is_more_than(\"2000_dollars\", \"1500_dollars\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nfluffy ::: represents fluffy\ntom ::: represents tom\nolive_garden ::: represents the olive garden\n2000_dollars ::: represents 2000 dollars\n1500_dollars ::: represents 1500 dollars\nPredicates:\nallowed_in(x, y) ::: x is allowed in y.\nis_managed_building(x) ::: x is a managed building.\nrequired_deposit(x) ::: a deposit is required to rent an apartment in x.\nis_equal_or_more(x, y) ::: x is equal or more than y.\nis_cat(x) ::: x is a cat.\nis_pet(x) ::: x is a pet.\nis_monthly_rent(x, y) ::: x is the monthly rent at y.\nwill_rent(x, y) ::: x will rent an apartment in y.\nmove_in_with(x, y) ::: x is allowed to move in with y.\nis_no_more_than(x, y) ::: x is no more than y.\nis_more_than(x, y) ::: x is more than y.\nPremises:\n\u2203x (is_managed_building(x) \u2227 allowed_in(\"pets\", x)) ::: Pets are allowed in some managed buildings.\n\u2200x (is_managed_building(x) \u2192 required_deposit(x)) ::: A deposit is required to rent an apartment in a managed building.\n\u2200x \u2200y (required_deposit(x) \u2192 is_equal_or_more(y, \"one_month_rent\")) ::: The security deposit can be either equal to one month's rent or more.\nis_cat(\"fluffy\") \u2227 is_pet(\"fluffy\") \u2227 \"fluffy\" = \"tom's_cat\" ::: Fluffy is Tom's cat.\n\u2200x (is_cat(x) \u2192 is_pet(x)) ::: Cats are pets.\nis_managed_building(\"olive_garden\") ::: The Olive Garden is a managed building.\nis_monthly_rent(\"2000_dollars\", \"olive_garden\") ::: The monthly rent at the Olive Garden is $2000.\n(will_rent(\"tom\", \"managed_building\") \u2194 (move_in_with(\"tom\", \"fluffy\") \u2227 is_no_more_than(\"security_deposit\", \"1500_dollars\"))) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nis_more_than(\"2000_dollars\", \"1500_dollars\") ::: 2000$ is more than $1500.\nQuery:\nallowed_in(\"tom\", \"olive_garden\") \u2227 move_in_with(\"tom\", \"fluffy\") ::: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.",
            "problem": " Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTom is allowed to move in an apartment in The Olive Garden with Fluffy."
        },
        {
            "example": 95,
            "response": [
                "is_equal_to(\"security_deposit_olive_garden\", 2000)  |  is_more_than(\"security_deposit_olive_garden\", 2000)",
                [
                    "exists x ((is_pet(x)  &  is_allowed_in(x, \"managed_building\")) )",
                    "all x ((is_managed_building(x)  ->  requires_deposit(x)) )",
                    " all x  all y (requires_deposit(x)  ->  (is_equal_to(y, \"one_month_rent\")  |  is_more_than(y, \"one_month_rent\"))) ",
                    "is_cat(\"fluffy\")  &  is_owner(\"tom\", \"fluffy\") ",
                    "all x ((is_cat(x)  ->  is_pet(x)) )",
                    "is_managed_building(\"olive_garden\") ",
                    "is_monthly_rent(\"olive_garden\", 2000) ",
                    "will_rent(\"tom\", \"managed_building\")  <->  (is_allowed_in(\"fluffy\", \"managed_building\")  &   -is_more_than(\"security_deposit\", 1500)) ",
                    "is_more_than(2000, 1500) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nfluffy ::: represents fluffy\ntom ::: represents tom\nolive_garden ::: represents the olive garden\nPredicates:\nis_pet(x) ::: x is a pet.\nis_allowed_in(x, y) ::: x is allowed in y.\nis_managed_building(x) ::: x is a managed building.\nrequires_deposit(x) ::: x requires a deposit.\nis_cat(x) ::: x is a cat.\nis_owner(x, y) ::: x is the owner of y.\nis_monthly_rent(x, y) ::: x is the monthly rent of y.\nwill_rent(x, y) ::: x will rent y.\nis_equal_to(x, y) ::: x is equal to y.\nis_more_than(x, y) ::: x is more than y.\nPremises:\n\u2203x (is_pet(x) \u2227 is_allowed_in(x, \"managed_building\")) ::: Pets are allowed in some managed buildings.\n\u2200x (is_managed_building(x) \u2192 requires_deposit(x)) ::: A deposit is required to rent an apartment in a managed building.\n\u2200x \u2200y (requires_deposit(x) \u2192 (is_equal_to(y, \"one_month_rent\") \u2228 is_more_than(y, \"one_month_rent\"))) ::: The security deposit can be either equal to one month's rent or more.\nis_cat(\"fluffy\") \u2227 is_owner(\"tom\", \"fluffy\") ::: Fluffy is Tom's cat.\n\u2200x (is_cat(x) \u2192 is_pet(x)) ::: Cats are pets.\nis_managed_building(\"olive_garden\") ::: The Olive Garden is a managed building.\nis_monthly_rent(\"olive_garden\", 2000) ::: The monthly rent at the Olive Garden is $2000.\nwill_rent(\"tom\", \"managed_building\") \u2194 (is_allowed_in(\"fluffy\", \"managed_building\") \u2227 \u00acis_more_than(\"security_deposit\", 1500)) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nis_more_than(2000, 1500) ::: 2000$ is more than $1500.\nQuery:\nis_equal_to(\"security_deposit_olive_garden\", 2000) \u2228 is_more_than(\"security_deposit_olive_garden\", 2000) ::: The security deposit at the Olive Garden is either $2000 or more.",
            "problem": " Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThe security deposit at the Olive Garden is either $2000 or more."
        },
        {
            "example": 96,
            "response": [
                "love_to_sleep(\"koala\")",
                [
                    "all x ((loved_by_tourists(x)  ->  favorite_animals(\"max\", x)) )",
                    "all x ((from_australia(x)  ->  loved_by_tourists(x)) )",
                    "all x ((is_quokka(x)  ->  from_australia(x)) )",
                    "all x ((favorite_animals(\"max\", x)  ->  is_very_fluffy(x)) )",
                    "all x ((favorite_animals(\"max\", x)  ->  love_to_sleep(x)) )",
                    "all x ((is_koala(x)  &  is_very_fluffy(x)  ->   -is_quokka(x)) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nmax ::: represents max\naustralia ::: represents australia\nquokka ::: represents quokka\nkoala ::: represents koala\nPredicates:\nloved_by_tourists(x) ::: x is loved by tourists.\nfavorite_animals(x, y) ::: y are x's favorite animals.\nfrom_australia(x) ::: x is from australia.\nis_quokka(x) ::: x is a quokka.\nis_very_fluffy(x) ::: x is very fluffy.\nlove_to_sleep(x) ::: x loves to sleep.\nis_koala(x) ::: x is a koala.\nPremises:\n\u2200x (loved_by_tourists(x) \u2192 favorite_animals(\"max\", x)) ::: If animals are loved by tourists, then they are Max's favorite animals.\n\u2200x (from_australia(x) \u2192 loved_by_tourists(x)) ::: All animals from Australia are loved by tourists.\n\u2200x (is_quokka(x) \u2192 from_australia(x)) ::: All quokka are animals from Australia.\n\u2200x (favorite_animals(\"max\", x) \u2192 is_very_fluffy(x)) ::: All of Max's favorite animals are very fluffy.\n\u2200x (favorite_animals(\"max\", x) \u2192 love_to_sleep(x)) ::: All of Max's favorite animals love to sleep.\n\u2200x (is_koala(x) \u2227 is_very_fluffy(x) \u2192 \u00acis_quokka(x)) ::: If a koala is very fluffy, then the koala is not a quokka.\nQuery:\nlove_to_sleep(\"koala\") ::: Koalas love to sleep.",
            "problem": " If animals are loved by tourists, then they are Max's favorite animals.  All animals from Australia are loved by tourists.  All quokka are animals from Australia.  All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep.  If a koala is very fluffy, then the koala is not a quokka.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nKoalas love to sleep."
        },
        {
            "example": 97,
            "response": [
                "love_to_sleep(\"koala\")  &  quokka(\"koala\")",
                [
                    "all x ((loved_by_tourists(x)  ->  favorite_animals(\"max\", x)) )",
                    "all x ((from_australia(x)  ->  loved_by_tourists(x)) )",
                    "all x ((quokka(x)  ->  from_australia(x)) )",
                    "all x ((favorite_animals(\"max\", x)  ->  very_fluffy(x)) )",
                    "all x ((favorite_animals(\"max\", x)  ->  love_to_sleep(x)) )",
                    "all x ((very_fluffy(x)  ->   -quokka(x)) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\nmax ::: represents Max\naustralia ::: represents Australia\nquokka ::: represents quokka\nkoala ::: represents koala\nPredicates:\nloved_by_tourists(x) ::: x is loved by tourists.\nfavorite_animals(x, y) ::: y are x's favorite animals.\nfrom_australia(x) ::: x is from Australia.\nvery_fluffy(x) ::: x is very fluffy.\nlove_to_sleep(x) ::: x loves to sleep.\nPremises:\n\u2200x (loved_by_tourists(x) \u2192 favorite_animals(\"max\", x)) ::: If animals are loved by tourists, then they are Max's favorite animals.\n\u2200x (from_australia(x) \u2192 loved_by_tourists(x)) ::: All animals from Australia are loved by tourists.\n\u2200x (quokka(x) \u2192 from_australia(x)) ::: All quokka are animals from Australia.\n\u2200x (favorite_animals(\"max\", x) \u2192 very_fluffy(x)) ::: All of Max's favorite animals are very fluffy.\n\u2200x (favorite_animals(\"max\", x) \u2192 love_to_sleep(x)) ::: All of Max's favorite animals love to sleep.\n\u2200x (very_fluffy(x) \u2192 \u00acquokka(x)) ::: If a koala is very fluffy, then the koala is not a quokka.\nQuery:\nlove_to_sleep(\"koala\") \u2227 quokka(\"koala\") ::: Koalas love to sleep and are quokka.",
            "problem": " If animals are loved by tourists, then they are Max's favorite animals.  All animals from Australia are loved by tourists.  All quokka are animals from Australia.  All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep.  If a koala is very fluffy, then the koala is not a quokka.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nKoalas love to sleep and are quokka."
        },
        {
            "example": 98,
            "response": [
                "(\"koala\" = \"quokka\")  ->  (love_to_sleep(\"koala\")  |  is_very_fluffy(\"koala\"))",
                [
                    "all x ((loved_by(x, \"tourists\")  ->  is_favorite_animal(\"max\", x)) )",
                    "all x ((is_from(x, \"australia\")  ->  loved_by(x, \"tourists\")) )",
                    "is_from(\"quokka\", \"australia\") ",
                    "all x ((is_favorite_animal(\"max\", x)  ->  is_very_fluffy(x)) )",
                    "all x ((is_favorite_animal(\"max\", x)  ->  love_to_sleep(x)) )",
                    "is_very_fluffy(\"koala\")  ->   -(\"koala\" = \"quokka\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nmax ::: represents Max\naustralia ::: represents Australia\nquokka ::: represents quokka\nkoala ::: represents koala\ntourists ::: represents tourists\nPredicates:\nloved_by(x, y) ::: x is loved by y.\nis_favorite_animal(x, y) ::: y is the favorite animal of x.\nis_from(x, y) ::: x is from y.\nis_very_fluffy(x) ::: x is very fluffy.\nlove_to_sleep(x) ::: x loves to sleep.\nPremises:\n\u2200x (loved_by(x, \"tourists\") \u2192 is_favorite_animal(\"max\", x)) ::: If animals are loved by tourists, then they are Max's favorite animals.\n\u2200x (is_from(x, \"australia\") \u2192 loved_by(x, \"tourists\")) ::: All animals from Australia are loved by tourists.\nis_from(\"quokka\", \"australia\") ::: All quokka are animals from Australia.\n\u2200x (is_favorite_animal(\"max\", x) \u2192 is_very_fluffy(x)) ::: All of Max's favorite animals are very fluffy.\n\u2200x (is_favorite_animal(\"max\", x) \u2192 love_to_sleep(x)) ::: All of Max's favorite animals love to sleep.\nis_very_fluffy(\"koala\") \u2192 \u00ac(\"koala\" = \"quokka\") ::: If a koala is very fluffy, then the koala is not a quokka.\nQuery:\n(\"koala\" = \"quokka\") \u2192 (love_to_sleep(\"koala\") \u2228 is_very_fluffy(\"koala\")) ::: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.",
            "problem": " If animals are loved by tourists, then they are Max's favorite animals.  All animals from Australia are loved by tourists.  All quokka are animals from Australia.  All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep.  If a koala is very fluffy, then the koala is not a quokka.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy."
        },
        {
            "example": 99,
            "response": [
                "is_ceo(\"harry\")",
                [
                    "all x (((is_kind(x)  &   -is_evil(x))  |  ( -is_kind(x)  &  is_evil(x))) )",
                    "all x ((is_ugly(x)  ->   -is_handsome(x)) )",
                    "all x ((is_evil(x)  ->  is_ugly(x)) )",
                    "all x ((is_gentleman(x)  ->  is_handsome(x)) )",
                    "all x ((is_ceo(x)  ->  is_gentleman(x)) )",
                    "is_gentleman(\"harry\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nharry ::: represents harry\nPredicates:\nis_kind(x) ::: x is kind.\nis_evil(x) ::: x is evil.\nis_ugly(x) ::: x is ugly.\nis_handsome(x) ::: x is handsome.\nis_gentleman(x) ::: x is a gentleman.\nis_ceo(x) ::: x is a CEO.\nPremises:\n\u2200x ((is_kind(x) \u2227 \u00acis_evil(x)) \u2228 (\u00acis_kind(x) \u2227 is_evil(x))) ::: A man is either kind or evil.\n\u2200x (is_ugly(x) \u2192 \u00acis_handsome(x)) ::: No ugly person is handsome.\n\u2200x (is_evil(x) \u2192 is_ugly(x)) ::: All evil people are ugly.\n\u2200x (is_gentleman(x) \u2192 is_handsome(x)) ::: All gentlemen are handsome.\n\u2200x (is_ceo(x) \u2192 is_gentleman(x)) ::: All CEOs are gentlemen.\nis_gentleman(\"harry\") ::: Harry is a gentleman.\nQuery:\nis_ceo(\"harry\") ::: Harry is a CEO.",
            "problem": " A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nHarry is a CEO."
        },
        {
            "example": 100,
            "response": [
                "(is_kind(\"harry\")  |  is_ceo(\"harry\"))",
                [
                    "all x (((is_kind(x)  &   -is_evil(x))  |  ( -is_kind(x)  &  is_evil(x))) )",
                    "all x ((is_ugly(x)  ->   -is_handsome(x)) )",
                    "all x ((is_evil(x)  ->  is_ugly(x)) )",
                    "all x ((is_gentleman(x)  ->  is_handsome(x)) )",
                    "all x ((is_ceo(x)  ->  is_gentleman(x)) )",
                    "is_gentleman(\"harry\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nharry ::: represents harry\nPredicates:\nis_kind(x) ::: x is kind.\nis_evil(x) ::: x is evil.\nis_ugly(x) ::: x is ugly.\nis_handsome(x) ::: x is handsome.\nis_gentleman(x) ::: x is a gentleman.\nis_ceo(x) ::: x is a CEO.\nPremises:\n\u2200x ((is_kind(x) \u2227 \u00acis_evil(x)) \u2228 (\u00acis_kind(x) \u2227 is_evil(x))) ::: A man is either kind or evil.\n\u2200x (is_ugly(x) \u2192 \u00acis_handsome(x)) ::: No ugly person is handsome.\n\u2200x (is_evil(x) \u2192 is_ugly(x)) ::: All evil people are ugly.\n\u2200x (is_gentleman(x) \u2192 is_handsome(x)) ::: All gentlemen are handsome.\n\u2200x (is_ceo(x) \u2192 is_gentleman(x)) ::: All CEOs are gentlemen.\nis_gentleman(\"harry\") ::: Harry is a gentleman.\nQuery:\n(is_kind(\"harry\") \u2228 is_ceo(\"harry\")) ::: Harry is kind or a CEO.",
            "problem": " A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nHarry is kind or a CEO."
        },
        {
            "example": 101,
            "response": [
                "((is_evil(\"harry\")  &  is_ugly(\"harry\"))  |  ( -is_evil(\"harry\")  &   -is_ugly(\"harry\")))  ->  (( -is_kind(\"harry\")  &   -is_ceo(\"harry\"))  |  (is_kind(\"harry\")  &  is_ceo(\"harry\")))",
                [
                    "all x (((is_kind(x)  &   -is_evil(x))  |  ( -is_kind(x)  &  is_evil(x))) )",
                    "all x ((is_ugly(x)  ->   -is_handsome(x)) )",
                    "all x ((is_evil(x)  ->  is_ugly(x)) )",
                    "all x ((is_gentleman(x)  ->  is_handsome(x)) )",
                    "all x ((is_ceo(x)  ->  is_gentleman(x)) )",
                    "is_gentleman(\"harry\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nharry ::: represents harry\nPredicates:\nis_kind(x) ::: x is kind.\nis_evil(x) ::: x is evil.\nis_ugly(x) ::: x is ugly.\nis_handsome(x) ::: x is handsome.\nis_gentleman(x) ::: x is a gentleman.\nis_ceo(x) ::: x is a CEO.\nPremises:\n\u2200x ((is_kind(x) \u2227 \u00acis_evil(x)) \u2228 (\u00acis_kind(x) \u2227 is_evil(x))) ::: A man is either kind or evil.\n\u2200x (is_ugly(x) \u2192 \u00acis_handsome(x)) ::: No ugly person is handsome.\n\u2200x (is_evil(x) \u2192 is_ugly(x)) ::: All evil people are ugly.\n\u2200x (is_gentleman(x) \u2192 is_handsome(x)) ::: All gentlemen are handsome.\n\u2200x (is_ceo(x) \u2192 is_gentleman(x)) ::: All CEOs are gentlemen.\nis_gentleman(\"harry\") ::: Harry is a gentleman.\nQuery:\n((is_evil(\"harry\") \u2227 is_ugly(\"harry\")) \u2228 (\u00acis_evil(\"harry\") \u2227 \u00acis_ugly(\"harry\"))) \u2192 ((\u00acis_kind(\"harry\") \u2227 \u00acis_ceo(\"harry\")) \u2228 (is_kind(\"harry\") \u2227 is_ceo(\"harry\"))) ::: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.",
            "problem": " A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO."
        },
        {
            "example": 102,
            "response": [
                "spend_time_with_siblings(\"luke\")",
                [
                    "all x ((is_twin_or_triplet(x)  ->  spend_time_with_siblings(x)) )",
                    "all x ((have_same_age_siblings(x)  ->  is_twin_or_triplet(x)) )",
                    "all x ((complain_about_siblings(x)  ->  have_same_age_siblings(x)) )",
                    "all x (( -live_at_home_regularly(x)  ->   -develop_strong_bonds(x)) )",
                    "all x ((spend_time_with_siblings(x)  ->   -live_at_home_regularly(x)) )",
                    "((is_twin_or_triplet(\"luke\")  &  develop_strong_bonds(\"luke\"))  |  ( -is_twin_or_triplet(\"luke\")  &   -develop_strong_bonds(\"luke\"))) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nluke ::: represents luke\nPredicates:\nis_twin_or_triplet(x) ::: x is a twin or triplet.\nspend_time_with_siblings(x) ::: x spends a lot of time hanging out with and playing with their siblings.\nhave_same_age_siblings(x) ::: x has siblings who are the same age.\ncomplain_about_siblings(x) ::: x complains often about annoying siblings.\nlive_at_home_regularly(x) ::: x lives at home regularly.\ndevelop_strong_bonds(x) ::: x develops strong bonds with their family members.\nPremises:\n\u2200x (is_twin_or_triplet(x) \u2192 spend_time_with_siblings(x)) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\n\u2200x (have_same_age_siblings(x) \u2192 is_twin_or_triplet(x)) ::: If people have siblings who are the same age, then they are twins or triplets.\n\u2200x (complain_about_siblings(x) \u2192 have_same_age_siblings(x)) ::: If people complain often about annoying siblings, then they have siblings who are the same age.\n\u2200x (\u00aclive_at_home_regularly(x) \u2192 \u00acdevelop_strong_bonds(x)) ::: If people do not live at home regularly, then they do not develop strong bonds with their family members.\n\u2200x (spend_time_with_siblings(x) \u2192 \u00aclive_at_home_regularly(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\n((is_twin_or_triplet(\"luke\") \u2227 develop_strong_bonds(\"luke\")) \u2228 (\u00acis_twin_or_triplet(\"luke\") \u2227 \u00acdevelop_strong_bonds(\"luke\"))) ::: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nQuery:\nspend_time_with_siblings(\"luke\") ::: Luke spends a lot of time hanging out and playing with his siblings.",
            "problem": " If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nLuke spends a lot of time hanging out and playing with his siblings."
        },
        {
            "example": 103,
            "response": [
                "complain_about_siblings(\"luke\")",
                [
                    "all x ((is_twin_or_triplet(x)  ->  spend_time_with_siblings(x)) )",
                    "all x ((have_same_age_siblings(x)  ->  is_twin_or_triplet(x)) )",
                    "all x ((complain_about_siblings(x)  ->  have_same_age_siblings(x)) )",
                    "all x (( -live_at_home_regularly(x)  ->   -develop_strong_bonds(x)) )",
                    "all x ((spend_time_with_siblings(x)  ->   -live_at_home_regularly(x)) )",
                    "((is_twin_or_triplet(\"luke\")  &  develop_strong_bonds(\"luke\"))  |  ( -is_twin_or_triplet(\"luke\")  &   -develop_strong_bonds(\"luke\"))) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nluke ::: represents luke\nPredicates:\nis_twin_or_triplet(x) ::: x is a twin or triplet.\nspend_time_with_siblings(x) ::: x spends a lot of time hanging out with and playing with their siblings.\nhave_same_age_siblings(x) ::: x has siblings who are the same age.\ncomplain_about_siblings(x) ::: x complains often about annoying siblings.\nlive_at_home_regularly(x) ::: x lives at home regularly.\ndevelop_strong_bonds(x) ::: x develops strong bonds with his family members.\nPremises:\n\u2200x (is_twin_or_triplet(x) \u2192 spend_time_with_siblings(x)) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\n\u2200x (have_same_age_siblings(x) \u2192 is_twin_or_triplet(x)) ::: If people have siblings who are the same age, then they are twins or triplets.\n\u2200x (complain_about_siblings(x) \u2192 have_same_age_siblings(x)) ::: If people complain often about annoying siblings, then they have siblings who are the same age.\n\u2200x (\u00aclive_at_home_regularly(x) \u2192 \u00acdevelop_strong_bonds(x)) ::: If people do not live at home regularly, then they do not develop strong bonds with their family members.\n\u2200x (spend_time_with_siblings(x) \u2192 \u00aclive_at_home_regularly(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\n((is_twin_or_triplet(\"luke\") \u2227 develop_strong_bonds(\"luke\")) \u2228 (\u00acis_twin_or_triplet(\"luke\") \u2227 \u00acdevelop_strong_bonds(\"luke\"))) ::: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nQuery:\ncomplain_about_siblings(\"luke\") ::: Luke complains often about annoying siblings.",
            "problem": " If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nLuke complains often about annoying siblings."
        },
        {
            "example": 104,
            "response": [
                " -is_twin_or_triplet(\"luke\")  &   -complain_about_siblings(\"luke\")",
                [
                    "all x ((is_twin_or_triplet(x)  ->  spend_time_with_siblings(x)) )",
                    "all x ((have_same_age_siblings(x)  ->  is_twin_or_triplet(x)) )",
                    "all x ((complain_about_siblings(x)  ->  have_same_age_siblings(x)) )",
                    "all x (( -live_at_home_regularly(x)  ->   -develop_strong_bonds(x)) )",
                    "all x ((spend_time_with_siblings(x)  ->   -live_at_home_regularly(x)) )",
                    "((is_twin_or_triplet(\"luke\")  &  develop_strong_bonds(\"luke\"))  |  ( -is_twin_or_triplet(\"luke\")  &   -develop_strong_bonds(\"luke\"))) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nluke ::: represents luke\nPredicates:\nis_twin_or_triplet(x) ::: x is a twin or triplet.\nspend_time_with_siblings(x) ::: x spends a lot of time hanging out with and playing with their siblings.\nhave_same_age_siblings(x) ::: x has siblings who are the same age.\ncomplain_about_siblings(x) ::: x complains often about annoying siblings.\nlive_at_home_regularly(x) ::: x lives at home regularly.\ndevelop_strong_bonds(x) ::: x develops strong bonds with their family members.\nPremises:\n\u2200x (is_twin_or_triplet(x) \u2192 spend_time_with_siblings(x)) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\n\u2200x (have_same_age_siblings(x) \u2192 is_twin_or_triplet(x)) ::: If people have siblings who are the same age, then they are twins or triplets.\n\u2200x (complain_about_siblings(x) \u2192 have_same_age_siblings(x)) ::: If people complain often about annoying siblings, then they have siblings who are the same age.\n\u2200x (\u00aclive_at_home_regularly(x) \u2192 \u00acdevelop_strong_bonds(x)) ::: If people do not live at home regularly, then they do not develop strong bonds with their family members.\n\u2200x (spend_time_with_siblings(x) \u2192 \u00aclive_at_home_regularly(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\n((is_twin_or_triplet(\"luke\") \u2227 develop_strong_bonds(\"luke\")) \u2228 (\u00acis_twin_or_triplet(\"luke\") \u2227 \u00acdevelop_strong_bonds(\"luke\"))) ::: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nQuery:\n\u00acis_twin_or_triplet(\"luke\") \u2227 \u00accomplain_about_siblings(\"luke\") ::: Luke is neither a twin nor triplet nor complains often about annoying siblings.",
            "problem": " If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nLuke is neither a twin nor triplet nor complains often about annoying siblings."
        },
        {
            "example": 105,
            "response": [
                "exists x ((prove(\"tom\", \"economic_hardship\")  &  provides_aid(\"ets\", x)))",
                [
                    "costs(\"gre_test\", \"us_205_dollars\") ",
                    "all x ((prove(x, \"economic_hardship\")  ->  provides_aid(\"ets\", x)) )",
                    "refers_to(\"economic_hardship\", \"difficulty_caused_by_having_too_little_money_or_too_few_resources\") ",
                    "lives_in(\"tom\", \"single_parent_family\") ",
                    "out_of_work(\"dad\", \"one_year\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\ngre_test ::: represents the GRE test\nus_205_dollars ::: represents US $205\nets ::: represents ETS\neconomic_hardship ::: represents economic hardship\ntom ::: represents Tom\nsingle_parent_family ::: represents a single-parent family\ndad ::: represents Tom's dad\none_year ::: represents one year\nPredicates:\ncosts(x, y) ::: x costs y.\nprovides_aid(x, y) ::: x provides financial aid to y.\nprove(x, y) ::: x proves y.\nrefers_to(x, y) ::: x refers to y.\nlives_in(x, y) ::: x lives in y.\nout_of_work(x, y) ::: x has been out of work for y.\nPremises:\ncosts(\"gre_test\", \"us_205_dollars\") ::: It costs US $205 to take the GRE test.\n\u2200x (prove(x, \"economic_hardship\") \u2192 provides_aid(\"ets\", x)) ::: ETS provides financial aid to those GRE applicants who prove economic hardship.\nrefers_to(\"economic_hardship\", \"difficulty caused by having too little money or too few resources\") ::: Economic hardship refers to difficulty caused by having too little money or too few resources.\nlives_in(\"tom\", \"single_parent_family\") ::: Tom lives in a single-parent family.\nout_of_work(\"dad\", \"one_year\") ::: His dad has been out of work for more than a year.\nQuery:\n\u2203x (prove(\"tom\", \"economic_hardship\") \u2227 provides_aid(\"ets\", x)) ::: Tom can apply for financial aid from ETS to take the GRE test.",
            "problem": " It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTom can apply for financial aid from ETS to take the GRE test."
        },
        {
            "example": 106,
            "response": [
                "costs(\"gre_test\", \"below_us_300\")",
                [
                    "costs(\"gre_test\", \"us_205\") ",
                    "provides(\"ets\", \"economic_hardship\") ",
                    "refers_to(\"economic_hardship\", \"difficulty_caused_by_having_too_little_money_or_too_few_resources\") ",
                    "lives_in(\"tom\", \"single_parent_family\") ",
                    "out_of_work(\"dad\", \"more_than_a_year\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\ngre_test ::: represents the GRE test\nus_205 ::: represents US $205\nets ::: represents ETS\neconomic_hardship ::: represents economic hardship\ntom ::: represents Tom\nsingle_parent_family ::: represents a single-parent family\ndad ::: represents Tom's dad\nmore_than_a_year ::: represents more than a year\nPredicates:\ncosts(x, y) ::: x costs y.\nprovides(x, y) ::: x provides y.\nprove(x, y) ::: x proves y.\nrefers_to(x, y) ::: x refers to y.\nlives_in(x, y) ::: x lives in y.\nout_of_work(x, y) ::: x has been out of work for y.\nPremises:\ncosts(\"gre_test\", \"us_205\") ::: It costs US $205 to take the GRE test.\nprovides(\"ets\", \"economic_hardship\") ::: ETS provides financial aid to those GRE applicants who prove economic hardship.\nrefers_to(\"economic_hardship\", \"difficulty caused by having too little money or too few resources\") ::: Economic hardship refers to difficulty caused by having too little money or too few resources.\nlives_in(\"tom\", \"single_parent_family\") ::: Tom lives in a single-parent family.\nout_of_work(\"dad\", \"more_than_a_year\") ::: His dad has been out of work for more than a year.\nQuery:\ncosts(\"gre_test\", \"below_us_300\") ::: It cost below US $300 to take the GRE test.",
            "problem": " It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIt cost below US $300 to take the GRE test."
        },
        {
            "example": 107,
            "response": [
                "- exists x (provides_financial_aid(\"ets\", x))",
                [
                    "costs(\"gre_test\", \"us_205_dollars\") ",
                    "all x ((prove(x, \"economic_hardship\")  ->  provides_financial_aid(\"ets\", x)) )",
                    "refers_to(\"economic_hardship\", \"difficulty_caused_by_having_too_little_money_or_too_few_resources\") ",
                    "lives_in(\"tom\", \"single_parent_family\") ",
                    "out_of_work(\"tom's_dad\", \"more_than_a_year\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\ngre_test ::: represents the GRE test\nus_205_dollars ::: represents US $205\nets ::: represents ETS\neconomic_hardship ::: represents economic hardship\ntom ::: represents Tom\nsingle_parent_family ::: represents a single-parent family\nmore_than_a_year ::: represents more than a year\nPredicates:\ncosts(x, y) ::: x costs y.\nprovides_financial_aid(x, y) ::: x provides financial aid to y.\nprove(x, y) ::: x proves y.\nrefers_to(x, y) ::: x refers to y.\nlives_in(x, y) ::: x lives in y.\nout_of_work(x, y) ::: x has been out of work for y.\nPremises:\ncosts(\"gre_test\", \"us_205_dollars\") ::: It costs US $205 to take the GRE test.\n\u2200x (prove(x, \"economic_hardship\") \u2192 provides_financial_aid(\"ets\", x)) ::: ETS provides financial aid to those GRE applicants who prove economic hardship.\nrefers_to(\"economic_hardship\", \"difficulty caused by having too little money or too few resources\") ::: Economic hardship refers to difficulty caused by having too little money or too few resources.\nlives_in(\"tom\", \"single_parent_family\") ::: Tom lives in a single-parent family.\nout_of_work(\"tom's dad\", \"more_than_a_year\") ::: His dad has been out of work for more than a year.\nQuery:\n\u00ac\u2203x provides_financial_aid(\"ets\", x) ::: There is no financial aid available for the GRE test.",
            "problem": " It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThere is no financial aid available for the GRE test."
        },
        {
            "example": 108,
            "response": [
                "tidy_consistently(\"peter\")  &  enjoy_cleaning(\"peter\")",
                [
                    "all x ((spill_lot(x)  ->   -tidy_consistently(x)  &   -enjoy_cleaning(x)) )",
                    "all x ((is_foodie(x)  &  go_out_frequently(x)  ->  spill_lot(x)) )",
                    "all x ((grew_up_only_child(x)  ->  tidy_consistently(x)  &  enjoy_cleaning(x)) )",
                    "all x ((have_busy_parents(x)  ->  grew_up_only_child(x)) )",
                    "all x ((is_high_net_income(x)  ->  have_busy_parents(x)) )",
                    "((spill_lot(\"peter\")  &  grew_up_only_child(\"peter\"))  |   -(spill_lot(\"peter\")  |  grew_up_only_child(\"peter\"))) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\npeter ::: represents peter\nhigh_net_income ::: represents high net income\nPredicates:\nspill_lot(x) ::: x spills a lot of food on their clothing.\ntidy_consistently(x) ::: x tidies their spaces consistently.\nenjoy_cleaning(x) ::: x enjoys the process of cleaning.\nis_foodie(x) ::: x is a foodie.\ngo_out_frequently(x) ::: x goes out frequently to find new food restaurants to try.\ngrew_up_only_child(x) ::: x grew up as an only child with no siblings.\nhave_busy_parents(x) ::: x has parents who are very busy with their regular jobs.\nis_high_net_income(x) ::: x is a household with a high net income.\nPremises:\n\u2200x (spill_lot(x) \u2192 \u00actidy_consistently(x) \u2227 \u00acenjoy_cleaning(x)) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n\u2200x (is_foodie(x) \u2227 go_out_frequently(x) \u2192 spill_lot(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n\u2200x (grew_up_only_child(x) \u2192 tidy_consistently(x) \u2227 enjoy_cleaning(x)) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n\u2200x (have_busy_parents(x) \u2192 grew_up_only_child(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n\u2200x (is_high_net_income(x) \u2192 have_busy_parents(x)) ::: All households with a high net income have people who have parents who are very busy with their regular jobs.\n((spill_lot(\"peter\") \u2227 grew_up_only_child(\"peter\")) \u2228 \u00ac(spill_lot(\"peter\") \u2228 grew_up_only_child(\"peter\"))) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\nQuery:\ntidy_consistently(\"peter\") \u2227 enjoy_cleaning(\"peter\") ::: Peter tidies his space consistently and enjoys the process of cleaning.",
            "problem": " If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPeter tidies his space consistently and enjoys the process of cleaning."
        },
        {
            "example": 109,
            "response": [
                "(is_foodie(\"peter\")  &  go_out_frequently(\"peter\"))  |  belongs_to_high_net_income(\"peter\")",
                [
                    "all x ((spill_food(x)  ->   -tidy_spaces(x)  &   -enjoy_cleaning(x)) )",
                    "all x ((is_foodie(x)  &  go_out_frequently(x)  ->  spill_food(x)) )",
                    "all x ((is_only_child(x)  ->  tidy_spaces(x)  &  enjoy_cleaning(x)) )",
                    "all x ((have_busy_parents(x)  ->  is_only_child(x)) )",
                    "all x ((belongs_to_high_net_income(x)  ->  have_busy_parents(x)) )",
                    "((spill_food(\"peter\")  &  is_only_child(\"peter\"))  |   -(spill_food(\"peter\")  |  is_only_child(\"peter\"))) "
                ]
            ],
            "label": "False",
            "text": "Constants:\npeter ::: represents peter\nhigh_net_income ::: represents high net income\nPredicates:\nspill_food(x) ::: x spills a lot of food on their clothing.\ntidy_spaces(x) ::: x tidies their spaces consistently.\nenjoy_cleaning(x) ::: x enjoys the process of cleaning.\nis_foodie(x) ::: x is a foodie.\ngo_out_frequently(x) ::: x goes out frequently to find new food restaurants to try.\nis_only_child(x) ::: x grew up as an only child with no siblings.\nhave_busy_parents(x) ::: x has parents who are very busy with their regular jobs.\nbelongs_to_high_net_income(x) ::: x belongs to a household with a high net income.\nPremises:\n\u2200x (spill_food(x) \u2192 \u00actidy_spaces(x) \u2227 \u00acenjoy_cleaning(x)) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n\u2200x (is_foodie(x) \u2227 go_out_frequently(x) \u2192 spill_food(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n\u2200x (is_only_child(x) \u2192 tidy_spaces(x) \u2227 enjoy_cleaning(x)) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n\u2200x (have_busy_parents(x) \u2192 is_only_child(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n\u2200x (belongs_to_high_net_income(x) \u2192 have_busy_parents(x)) ::: All households with a high net income have people who have parents who are very busy with their regular jobs.\n((spill_food(\"peter\") \u2227 is_only_child(\"peter\")) \u2228 \u00ac(spill_food(\"peter\") \u2228 is_only_child(\"peter\"))) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\nQuery:\n(is_foodie(\"peter\") \u2227 go_out_frequently(\"peter\")) \u2228 belongs_to_high_net_income(\"peter\") ::: Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.",
            "problem": " If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPeter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income."
        },
        {
            "example": 110,
            "response": [
                "((is_foodie(\"peter\")  &  go_out_frequently(\"peter\")  &  belongs_to(\"peter\", \"high_net_income\"))  |  (is_foodie(\"peter\")  &  go_out_frequently(\"peter\")  &   -belongs_to(\"peter\", \"high_net_income\")))",
                [
                    "all x ((spill_food(x)  ->   -tidy_spaces(x)  &   -enjoy_cleaning(x)) )",
                    "all x ((is_foodie(x)  &  go_out_frequently(x)  ->  spill_food(x)) )",
                    "all x ((only_child(x)  ->  tidy_spaces(x)  &  enjoy_cleaning(x)) )",
                    "all x ((busy_parents(x)  ->  only_child(x)) )",
                    "all x ((belongs_to(x, \"high_net_income\")  ->  busy_parents(x)) )",
                    "((spill_food(\"peter\")  &  only_child(\"peter\"))  |  ( -spill_food(\"peter\")  &   -only_child(\"peter\"))) "
                ]
            ],
            "label": "True",
            "text": "Constants:\npeter ::: represents peter\nhigh_net_income ::: represents high net income\nPredicates:\nspill_food(x) ::: x spills a lot of food on their clothing.\ntidy_spaces(x) ::: x tidies their spaces consistently.\nenjoy_cleaning(x) ::: x enjoys the process of cleaning.\nis_foodie(x) ::: x is a foodie.\ngo_out_frequently(x) ::: x goes out frequently to find new food restaurants to try.\nonly_child(x) ::: x grew up as an only child with no siblings.\nbusy_parents(x) ::: x has parents who are very busy with their regular jobs.\nbelongs_to(x, y) ::: x belongs to y.\nPremises:\n\u2200x (spill_food(x) \u2192 \u00actidy_spaces(x) \u2227 \u00acenjoy_cleaning(x)) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n\u2200x (is_foodie(x) \u2227 go_out_frequently(x) \u2192 spill_food(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n\u2200x (only_child(x) \u2192 tidy_spaces(x) \u2227 enjoy_cleaning(x)) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n\u2200x (busy_parents(x) \u2192 only_child(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n\u2200x (belongs_to(x, \"high_net_income\") \u2192 busy_parents(x)) ::: All households with a high net income have people who have parents who are very busy with their regular jobs.\n((spill_food(\"peter\") \u2227 only_child(\"peter\")) \u2228 (\u00acspill_food(\"peter\") \u2227 \u00aconly_child(\"peter\"))) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\nQuery:\n((is_foodie(\"peter\") \u2227 go_out_frequently(\"peter\") \u2227 belongs_to(\"peter\", \"high_net_income\")) \u2228 (is_foodie(\"peter\") \u2227 go_out_frequently(\"peter\") \u2227 \u00acbelongs_to(\"peter\", \"high_net_income\"))) ::: Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.",
            "problem": " If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPeter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income."
        },
        {
            "example": 111,
            "response": [
                "exists x ((is_evergreen(x)  &   -is_object_of_worship(x)))",
                [
                    "all x ((is_fir_tree(x)  ->  is_evergreen(x)) )",
                    "exists x ((is_object_of_worship(x)  &  is_fir_tree(x)) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nfir_trees ::: represents fir trees\nevergreens ::: represents evergreens\nobjects_of_worship ::: represents objects of worship\nPredicates:\nis_fir_tree(x) ::: x is a fir tree.\nis_evergreen(x) ::: x is an evergreen.\nis_object_of_worship(x) ::: x is an object of worship.\nPremises:\n\u2200x (is_fir_tree(x) \u2192 is_evergreen(x)) ::: All fir trees are evergreens.\n\u2203x (is_object_of_worship(x) \u2227 is_fir_tree(x)) ::: Some objects of worship are fir trees.\nQuery:\n\u2203x (is_evergreen(x) \u2227 \u00acis_object_of_worship(x)) ::: Some evergreens are not objects of worship.",
            "problem": " All fir trees are evergreens. Some objects of worship are fir trees.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSome evergreens are not objects of worship."
        },
        {
            "example": 112,
            "response": [
                "visited(\"juan_de_onate\", \"picuris_mountains\")  &  is_in(\"picuris_mountains\", \"new_mexico\")",
                [
                    "is_mountain_range(\"picuris_mountains\")  &  (is_in(\"picuris_mountains\", \"new_mexico\")  |  is_in(\"picuris_mountains\", \"texas\")) ",
                    "visited(\"juan_de_onate\", \"picuris_mountains\") ",
                    "is_mine(\"harding_pegmatite_mine\")  &  located_in(\"harding_pegmatite_mine\", \"picuris_mountains\")  &  donated(\"harding_pegmatite_mine\") ",
                    "all x ((is_mountain_range(x)  &  is_in(x, \"texas\")  ->   - exists y (is_mine(y)  &  located_in(y, x)  &  donated(y))) )"
                ]
            ],
            "label": "True",
            "text": "Constants:\njuan_de_onate ::: represents Juan de Onate\npicuris_mountains ::: represents the Picuris Mountains\nnew_mexico ::: represents New Mexico\ntexas ::: represents Texas\nharding_pegmatite_mine ::: represents the Harding Pegmatite Mine\nPredicates:\nis_mountain_range(x) ::: x is a mountain range.\nis_in(x, y) ::: x is in y.\nvisited(x, y) ::: x visited y.\nis_mine(x) ::: x is a mine.\nlocated_in(x, y) ::: x is located in y.\ndonated(x) ::: x was donated.\nPremises:\nis_mountain_range(\"picuris_mountains\") \u2227 (is_in(\"picuris_mountains\", \"new_mexico\") \u2228 is_in(\"picuris_mountains\", \"texas\")) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\nvisited(\"juan_de_onate\", \"picuris_mountains\") ::: Juan de Onate visited the Picuris Mountains.\nis_mine(\"harding_pegmatite_mine\") \u2227 located_in(\"harding_pegmatite_mine\", \"picuris_mountains\") \u2227 donated(\"harding_pegmatite_mine\") ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n\u2200x (is_mountain_range(x) \u2227 is_in(x, \"texas\") \u2192 \u00ac\u2203y (is_mine(y) \u2227 located_in(y, x) \u2227 donated(y))) ::: There are no mountain ranges in texas that have mines which have been donated.\nQuery:\nvisited(\"juan_de_onate\", \"picuris_mountains\") \u2227 is_in(\"picuris_mountains\", \"new_mexico\") ::: Juan de Onate visited a mountain range in New Mexico.",
            "problem": " The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJuan de Onate visited a mountain range in New Mexico."
        },
        {
            "example": 113,
            "response": [
                "visited(\"juan_de_onate\", \"texas\")",
                [
                    "is_mountain_range(\"picuris_mountains\")  &  (located_in(\"picuris_mountains\", \"new_mexico\")  |  located_in(\"picuris_mountains\", \"texas\")) ",
                    "visited(\"juan_de_onate\", \"picuris_mountains\") ",
                    "located_in(\"harding_pegmatite_mine\", \"picuris_mountains\")  &  donated(\"harding_pegmatite_mine\") ",
                    "all x ((is_mountain_range(x)  &  located_in(x, \"texas\")  &  has_mines(x)  ->   -donated(x)) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\njuan_de_onate ::: represents Juan de Onate\npicuris_mountains ::: represents the Picuris Mountains\nnew_mexico ::: represents New Mexico\ntexas ::: represents Texas\nharding_pegmatite_mine ::: represents the Harding Pegmatite Mine\nPredicates:\nis_mountain_range(x) ::: x is a mountain range.\nlocated_in(x, y) ::: x is located in y.\nvisited(x, y) ::: x visited y.\ndonated(x) ::: x was donated.\nhas_mines(x) ::: x has mines.\nPremises:\nis_mountain_range(\"picuris_mountains\") \u2227 (located_in(\"picuris_mountains\", \"new_mexico\") \u2228 located_in(\"picuris_mountains\", \"texas\")) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\nvisited(\"juan_de_onate\", \"picuris_mountains\") ::: Juan de Onate visited the Picuris Mountains.\nlocated_in(\"harding_pegmatite_mine\", \"picuris_mountains\") \u2227 donated(\"harding_pegmatite_mine\") ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n\u2200x (is_mountain_range(x) \u2227 located_in(x, \"texas\") \u2227 has_mines(x) \u2192 \u00acdonated(x)) ::: There are no mountain ranges in texas that have mines which have been donated.\nQuery:\nvisited(\"juan_de_onate\", \"texas\") ::: Juan de Onate visited a mountain range in Texas.",
            "problem": " The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJuan de Onate visited a mountain range in Texas."
        },
        {
            "example": 114,
            "response": [
                " -is_in(\"harding_pegmatite_mine\", \"new_mexico\")",
                [
                    "is_mountain_range(\"picuris_mountains\")  &  (is_in(\"picuris_mountains\", \"new_mexico\")  |  is_in(\"picuris_mountains\", \"texas\")) ",
                    "visited(\"juan_de_onate\", \"picuris_mountains\") ",
                    "located_in(\"harding_pegmatite_mine\", \"picuris_mountains\")  &  donated(\"harding_pegmatite_mine\") ",
                    "all x ((is_mountain_range(x)  &  is_in(x, \"texas\")  ->   -has_mines(x)) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\npicuris_mountains ::: represents the Picuris Mountains\nnew_mexico ::: represents New Mexico\ntexas ::: represents Texas\njuan_de_onate ::: represents Juan de Onate\nharding_pegmatite_mine ::: represents the Harding Pegmatite Mine\nPredicates:\nis_mountain_range(x) ::: x is a mountain range.\nis_in(x, y) ::: x is in y.\nvisited(x, y) ::: x visited y.\nlocated_in(x, y) ::: x is located in y.\ndonated(x) ::: x was donated.\nhas_mines(x) ::: x has mines.\nPremises:\nis_mountain_range(\"picuris_mountains\") \u2227 (is_in(\"picuris_mountains\", \"new_mexico\") \u2228 is_in(\"picuris_mountains\", \"texas\")) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\nvisited(\"juan_de_onate\", \"picuris_mountains\") ::: Juan de Onate visited the Picuris Mountains.\nlocated_in(\"harding_pegmatite_mine\", \"picuris_mountains\") \u2227 donated(\"harding_pegmatite_mine\") ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n\u2200x (is_mountain_range(x) \u2227 is_in(x, \"texas\") \u2192 \u00achas_mines(x)) ::: There are no mountain ranges in texas that have mines which have been donated.\nQuery:\n\u00acis_in(\"harding_pegmatite_mine\", \"new_mexico\") ::: The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
            "problem": " The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThe Harding Pegmatite Mine is not located in a mountain range in New Mexico."
        },
        {
            "example": 115,
            "response": [
                "exists x ((is_man(x)  &  is_taller_than(\"peter\", x)))",
                [
                    " all x  all y (is_man(x)  &  is_man(y)  &  is_taller_than(x, y)  ->  can_block(x, y)) ",
                    "is_man(\"michael\")  &   all x (is_man(x)  ->  is_taller_than(\"michael\", x)) ",
                    " all x  all y  all z ((is_taller_than(x, y)  &  is_taller_than(y, z))  ->  is_taller_than(x, z)) ",
                    "is_man(\"peter\")  &  is_taller_than(\"peter\", \"michael\") ",
                    "all x ((is_man(x)  &   -can_jump(x)  ->  can_block(\"michael\", x)) )",
                    " -can_block(\"michael\", \"windy\") ",
                    "all x ((can_jump(x)  ->  is_great_shooter(x)) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\nmichael ::: represents michael\npeter ::: represents peter\nwindy ::: represents windy\nPredicates:\nis_man(x) ::: x is a man.\nis_taller_than(x, y) ::: x is taller than y.\ncan_block(x, y) ::: x can block y's shooting.\ncan_jump(x) ::: x can jump when shooting.\nis_great_shooter(x) ::: x is a great shooter.\nPremises:\n\u2200x \u2200y (is_man(x) \u2227 is_man(y) \u2227 is_taller_than(x, y) \u2192 can_block(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.\nis_man(\"michael\") \u2227 \u2200x (is_man(x) \u2192 is_taller_than(\"michael\", x)) ::: Michael is a man who is taller than everyone else in his class.\n\u2200x \u2200y \u2200z ((is_taller_than(x, y) \u2227 is_taller_than(y, z)) \u2192 is_taller_than(x, z)) ::: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nis_man(\"peter\") \u2227 is_taller_than(\"peter\", \"michael\") ::: Peter is a man who is taller than Michael.\n\u2200x (is_man(x) \u2227 \u00accan_jump(x) \u2192 can_block(\"michael\", x)) ::: Michael can block any shooting from a person as long as the person does not jump when shooting.\n\u00accan_block(\"michael\", \"windy\") ::: Michael cannot block Windy's shooting.\n\u2200x (can_jump(x) \u2192 is_great_shooter(x)) ::: Every shooter who can jump when shooting is a great shooter.\nQuery:\n\u2203x (is_man(x) \u2227 is_taller_than(\"peter\", x)) ::: Peter is shorter than a man in Michael's class.",
            "problem": " If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPeter is shorter than a man in Michael's class."
        },
        {
            "example": 116,
            "response": [
                "is_great_shooter(\"windy\")",
                [
                    " all x  all y (is_man(x)  &  is_man(y)  &  is_taller_than(x, y)  ->  can_block(x, y)) ",
                    "is_man(\"michael\")  &   all x (is_man(x)  ->  is_taller_than(\"michael\", x)) ",
                    " all x  all y  all z ((is_taller_than(x, y)  &  is_taller_than(y, z))  ->  is_taller_than(x, z)) ",
                    "is_man(\"peter\")  &  is_taller_than(\"peter\", \"michael\") ",
                    "all x (( -can_jump(x)  ->  can_block(\"michael\", x)) )",
                    " -can_block(\"michael\", \"windy\") ",
                    "all x ((can_jump(x)  ->  is_great_shooter(x)) )"
                ]
            ],
            "label": "True",
            "text": "Constants:\nmichael ::: represents michael\npeter ::: represents peter\nwindy ::: represents windy\nPredicates:\nis_man(x) ::: x is a man.\nis_taller_than(x, y) ::: x is taller than y.\ncan_block(x, y) ::: x can block y's shooting.\ncan_jump(x) ::: x can jump when shooting.\nis_great_shooter(x) ::: x is a great shooter.\nPremises:\n\u2200x \u2200y (is_man(x) \u2227 is_man(y) \u2227 is_taller_than(x, y) \u2192 can_block(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.\nis_man(\"michael\") \u2227 \u2200x (is_man(x) \u2192 is_taller_than(\"michael\", x)) ::: Michael is a man who is taller than everyone else in his class.\n\u2200x \u2200y \u2200z ((is_taller_than(x, y) \u2227 is_taller_than(y, z)) \u2192 is_taller_than(x, z)) ::: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nis_man(\"peter\") \u2227 is_taller_than(\"peter\", \"michael\") ::: Peter is a man who is taller than Michael.\n\u2200x (\u00accan_jump(x) \u2192 can_block(\"michael\", x)) ::: Michael can block any shooting from a person as long as the person does not jump when shooting.\n\u00accan_block(\"michael\", \"windy\") ::: Michael cannot block Windy's shooting.\n\u2200x (can_jump(x) \u2192 is_great_shooter(x)) ::: Every shooter who can jump when shooting is a great shooter.\nQuery:\nis_great_shooter(\"windy\") ::: Windy is a great shooter.",
            "problem": " If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nWindy is a great shooter."
        },
        {
            "example": 117,
            "response": [
                "can_block(\"peter\", \"windy\")",
                [
                    " all x  all y (is_man(x)  &  is_man(y)  &  is_taller_than(x, y)  ->  can_block(x, y)) ",
                    "is_man(\"michael\")  &   all x (is_man(x)  ->  is_taller_than(\"michael\", x)) ",
                    " all x  all y  all z ((is_taller_than(x, y)  &  is_taller_than(y, z))  ->  is_taller_than(x, z)) ",
                    "is_man(\"peter\")  &  is_taller_than(\"peter\", \"michael\") ",
                    "all x (( -can_jump(x)  ->  can_block(\"michael\", x)) )",
                    " -can_block(\"michael\", \"windy\") ",
                    "all x ((can_jump(x)  ->  is_great_shooter(x)) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nmichael ::: represents michael\npeter ::: represents peter\nwindy ::: represents windy\nPredicates:\nis_man(x) ::: x is a man.\nis_taller_than(x, y) ::: x is taller than y.\ncan_block(x, y) ::: x can block y's shooting.\ncan_jump(x) ::: x can jump when shooting.\nis_great_shooter(x) ::: x is a great shooter.\nPremises:\n\u2200x \u2200y (is_man(x) \u2227 is_man(y) \u2227 is_taller_than(x, y) \u2192 can_block(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.\nis_man(\"michael\") \u2227 \u2200x (is_man(x) \u2192 is_taller_than(\"michael\", x)) ::: Michael is a man who is taller than everyone else in his class.\n\u2200x \u2200y \u2200z ((is_taller_than(x, y) \u2227 is_taller_than(y, z)) \u2192 is_taller_than(x, z)) ::: If person x is taller than person y, and person y is taller than person z, than x is taller than z\nis_man(\"peter\") \u2227 is_taller_than(\"peter\", \"michael\") ::: Peter is a man who is taller than Michael.\n\u2200x (\u00accan_jump(x) \u2192 can_block(\"michael\", x)) ::: Michael can block any shooting from a person as long as the person does not jump when shooting.\n\u00accan_block(\"michael\", \"windy\") ::: Michael cannot block Windy's shooting.\n\u2200x (can_jump(x) \u2192 is_great_shooter(x)) ::: Every shooter who can jump when shooting is a great shooter.\nQuery:\ncan_block(\"peter\", \"windy\") ::: Peter can block Windy's shooting.",
            "problem": " If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPeter can block Windy's shooting."
        },
        {
            "example": 118,
            "response": [
                "all x ((is_named_after(\"barutin\", x)  &  is_part_of(x, \"antarctica\")))",
                [
                    "is_named_after(\"barutin_cove\", \"barutin\") ",
                    "is_on(\"barutin_cove\", \"southwest_coast\")  &  is_located_in(\"southwest_coast\", \"snow_island\") ",
                    "include(\"south_shetland_islands\", \"snow_island\")  &  include(\"south_shetland_islands\", \"greenwich_island\")  &  include(\"south_shetland_islands\", \"deception_island\") ",
                    "is_part_of(\"south_shetland_islands\", \"antarctica\") ",
                    " all x  all y  all z ((is_located_in(x, y)  &  is_located_in(y, z))  ->  is_located_in(x, z)) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nbarutin_cove ::: represents barutin cove\nbarutin ::: represents the bulgarian settlement of barutin\nsnow_island ::: represents snow island\nsouthwest_coast ::: represents the southwest coast\nsouth_shetland_islands ::: represents the south shetland islands\ngreenwich_island ::: represents greenwich island\ndeception_island ::: represents deception island\nantarctica ::: represents antarctica\nPredicates:\nis_named_after(x, y) ::: x is named after y.\nis_on(x, y) ::: x is on y.\ninclude(x, y) ::: x includes y.\nis_part_of(x, y) ::: x is part of y.\nis_located_in(x, y) ::: x is located in y.\nPremises:\nis_named_after(\"barutin_cove\", \"barutin\") ::: Barutin Cove is named after the Bulgarian settlement of Barutin.\nis_on(\"barutin_cove\", \"southwest_coast\") \u2227 is_located_in(\"southwest_coast\", \"snow_island\") ::: Barutin Cove is on the southwest coast of Snow Island.\ninclude(\"south_shetland_islands\", \"snow_island\") \u2227 include(\"south_shetland_islands\", \"greenwich_island\") \u2227 include(\"south_shetland_islands\", \"deception_island\") ::: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nis_part_of(\"south_shetland_islands\", \"antarctica\") ::: The South Shetland Islands are considered part of Antarctica.\n\u2200x \u2200y \u2200z ((is_located_in(x, y) \u2227 is_located_in(y, z)) \u2192 is_located_in(x, z)) ::: If A is located in B and B is located in C, then A is located in C.\nQuery:\n\u2200x (is_named_after(\"barutin\", x) \u2227 is_part_of(x, \"antarctica\")) ::: Barutin is named after all islands in Antarctica.",
            "problem": " Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBarutin is named after all islands in Antarctica."
        },
        {
            "example": 119,
            "response": [
                "exists x ((is_named_after(x, \"barutin\")  &  is_located_in(x, \"antarctica\")))",
                [
                    "is_named_after(\"barutin_cove\", \"barutin\") ",
                    "is_on(\"barutin_cove\", \"snow_island\")  &  is_on_coast(\"barutin_cove\", \"southwest\") ",
                    "include(\"south_shetland_islands\", \"snow_island\")  &  include(\"south_shetland_islands\", \"greenwich_island\")  &  include(\"south_shetland_islands\", \"deception_island\") ",
                    "is_part_of(\"south_shetland_islands\", \"antarctica\") ",
                    " all x  all y  all z ((is_located_in(x, y)  &  is_located_in(y, z))  ->  is_located_in(x, z)) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nbarutin_cove ::: represents Barutin Cove\nbarutin ::: represents the Bulgarian settlement of Barutin\nsnow_island ::: represents Snow Island\nsouth_shetland_islands ::: represents the South Shetland Islands\ngreenwich_island ::: represents Greenwich Island\ndeception_island ::: represents Deception Island\nantarctica ::: represents Antarctica\nPredicates:\nis_named_after(x, y) ::: x is named after y.\nis_on(x, y) ::: x is on y.\nis_on_coast(x, y) ::: x is on the coast of y.\ninclude(x, y) ::: x includes y.\nis_part_of(x, y) ::: x is part of y.\nis_located_in(x, y) ::: x is located in y.\nPremises:\nis_named_after(\"barutin_cove\", \"barutin\") ::: Barutin Cove is named after the Bulgarian settlement of Barutin.\nis_on(\"barutin_cove\", \"snow_island\") \u2227 is_on_coast(\"barutin_cove\", \"southwest\") ::: Barutin Cove is on the southwest coast of Snow Island.\ninclude(\"south_shetland_islands\", \"snow_island\") \u2227 include(\"south_shetland_islands\", \"greenwich_island\") \u2227 include(\"south_shetland_islands\", \"deception_island\") ::: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nis_part_of(\"south_shetland_islands\", \"antarctica\") ::: The South Shetland Islands are considered part of Antarctica.\n\u2200x \u2200y \u2200z ((is_located_in(x, y) \u2227 is_located_in(y, z)) \u2192 is_located_in(x, z)) ::: If A is located in B and B is located in C, then A is located in C.\nQuery:\n\u2203x (is_named_after(x, \"barutin\") \u2227 is_located_in(x, \"antarctica\")) ::: There is at least one cove in Antarctica named after a place in Bulgaria.",
            "problem": " Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThere is at least one cove in Antarctica named after a place in Bulgaria."
        },
        {
            "example": 120,
            "response": [
                " -is_located_in(\"barutin\", \"antarctica\")",
                [
                    "is_named_after(\"barutin_cove\", \"barutin\") ",
                    "is_on(\"barutin_cove\", \"snow_island\") ",
                    "include(\"south_shetland_islands\", \"snow_island\")  &  include(\"south_shetland_islands\", \"greenwich_island\")  &  include(\"south_shetland_islands\", \"deception_island\") ",
                    "is_part_of(\"south_shetland_islands\", \"antarctica\") ",
                    " all x  all y  all z ((is_located_in(x, y)  &  is_located_in(y, z))  ->  is_located_in(x, z)) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nbarutin_cove ::: represents Barutin Cove\nbarutin ::: represents the Bulgarian settlement of Barutin\nsnow_island ::: represents Snow Island\nsouth_shetland_islands ::: represents the South Shetland Islands\ngreenwich_island ::: represents Greenwich Island\ndeception_island ::: represents Deception Island\nantarctica ::: represents Antarctica\nPredicates:\nis_named_after(x, y) ::: x is named after y.\nis_on(x, y) ::: x is on y.\ninclude(x, y) ::: x includes y.\nis_part_of(x, y) ::: x is part of y.\nis_located_in(x, y) ::: x is located in y.\nPremises:\nis_named_after(\"barutin_cove\", \"barutin\") ::: Barutin Cove is named after the Bulgarian settlement of Barutin.\nis_on(\"barutin_cove\", \"snow_island\") ::: Barutin Cove is on the southwest coast of Snow Island.\ninclude(\"south_shetland_islands\", \"snow_island\") \u2227 include(\"south_shetland_islands\", \"greenwich_island\") \u2227 include(\"south_shetland_islands\", \"deception_island\") ::: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nis_part_of(\"south_shetland_islands\", \"antarctica\") ::: The South Shetland Islands are considered part of Antarctica.\n\u2200x \u2200y \u2200z ((is_located_in(x, y) \u2227 is_located_in(y, z)) \u2192 is_located_in(x, z)) ::: If A is located in B and B is located in C, then A is located in C.\nQuery:\n\u00acis_located_in(\"barutin\", \"antarctica\") ::: Barutin is not located in Antarctica.",
            "problem": " Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBarutin is not located in Antarctica."
        },
        {
            "example": 121,
            "response": [
                "exists x ((is_affection(x)  &  is_positive(x)))",
                [
                    "exists x ((is_affection(x)  &  is_love(x)) )",
                    "exists x ((is_love(x)  &  is_positive(x)) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\naffection ::: represents affection\nlove ::: represents love\npositive ::: represents positive\nPredicates:\nis_affection(x) ::: x is affection.\nis_love(x) ::: x is love.\nis_positive(x) ::: x is positive.\nPremises:\n\u2203x (is_affection(x) \u2227 is_love(x)) ::: Some affection is love.\n\u2203x (is_love(x) \u2227 is_positive(x)) ::: Some love is positive.\nQuery:\n\u2203x (is_affection(x) \u2227 is_positive(x)) ::: Some affection is positive.",
            "problem": " Some affection is love. Some love is positive.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSome affection is positive."
        },
        {
            "example": 122,
            "response": [
                "is_airline(\"greyhound\")",
                [
                    "all x ((can_transport(x)  ->   -is_empty(x)) )",
                    "all x ((is_airline(x)  ->  can_transport(x)) )",
                    "all x ((is_plane(x)  ->  is_empty(x)) )",
                    "all x ((is_plane(x)  ->  is_plane(\"boeing_707\")) )",
                    " -is_airline(\"greyhound\")  ->   -is_plane(\"greyhound\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\ngreyhound ::: represents greyhound\nboeing_707 ::: represents boeing 707\nPredicates:\ncan_transport(x) ::: x can transport multiple passengers.\nis_empty(x) ::: x is empty.\nis_airline(x) ::: x is an airline.\nis_plane(x) ::: x is a plane.\nPremises:\n\u2200x (can_transport(x) \u2192 \u00acis_empty(x)) ::: If something can transport multiple passengers, then they are not empty.\n\u2200x (is_airline(x) \u2192 can_transport(x)) ::: All airlines can transport multiple passengers.\n\u2200x (is_plane(x) \u2192 is_empty(x)) ::: All planes are empty.\n\u2200x (is_plane(x) \u2192 is_plane(\"boeing_707\")) ::: All Boeing 707s are planes.\n\u00acis_airline(\"greyhound\") \u2192 \u00acis_plane(\"greyhound\") ::: If Greyhound is not an airline, then there are no Greyhound planes.\nQuery:\nis_airline(\"greyhound\") ::: Greyhound is an airline.",
            "problem": " If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nGreyhound is an airline."
        },
        {
            "example": 123,
            "response": [
                "is_plane(\"greyhound\")  &  is_plane(\"boeing_707\")",
                [
                    "all x ((can_transport(x)  ->   -is_empty(x)) )",
                    "all x ((is_airline(x)  ->  can_transport(x)) )",
                    "all x ((is_plane(x)  ->  is_empty(x)) )",
                    "all x ((is_plane(x)  ->  is_plane(\"boeing_707\")) )",
                    " -is_airline(\"greyhound\")  ->   - exists x (is_plane(x)  &  is_plane(\"greyhound\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\ngreyhound ::: represents Greyhound\nboeing_707 ::: represents Boeing 707\nPredicates:\ncan_transport(x) ::: x can transport multiple passengers.\nis_empty(x) ::: x is empty.\nis_airline(x) ::: x is an airline.\nis_plane(x) ::: x is a plane.\nPremises:\n\u2200x (can_transport(x) \u2192 \u00acis_empty(x)) ::: If something can transport multiple passengers, then they are not empty.\n\u2200x (is_airline(x) \u2192 can_transport(x)) ::: All airlines can transport multiple passengers.\n\u2200x (is_plane(x) \u2192 is_empty(x)) ::: All planes are empty.\n\u2200x (is_plane(x) \u2192 is_plane(\"boeing_707\")) ::: All Boeing 707s are planes.\n\u00acis_airline(\"greyhound\") \u2192 \u00ac\u2203x (is_plane(x) \u2227 is_plane(\"greyhound\")) ::: If Greyhound is not an airline, then there are no Greyhound planes.\nQuery:\nis_plane(\"greyhound\") \u2227 is_plane(\"boeing_707\") ::: A Greyhound is a Boeing 707.",
            "problem": " If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nA Greyhound is a Boeing 707."
        },
        {
            "example": 124,
            "response": [
                " -(\"greyhound\" = \"boeing_707\")",
                [
                    "all x ((can_transport(x)  ->   -is_empty(x)) )",
                    "all x ((is_airline(x)  ->  can_transport(x)) )",
                    "all x ((is_plane(x)  ->  is_empty(x)) )",
                    "all x ((is_plane(x)  ->  is_plane(\"boeing_707\")) )",
                    " -is_airline(\"greyhound\")  ->   - exists x (is_plane(x)  &  \"greyhound\" = x) "
                ]
            ],
            "label": "True",
            "text": "Constants:\ngreyhound ::: represents Greyhound\nboeing_707 ::: represents Boeing 707\nPredicates:\ncan_transport(x) ::: x can transport multiple passengers.\nis_empty(x) ::: x is empty.\nis_airline(x) ::: x is an airline.\nis_plane(x) ::: x is a plane.\nPremises:\n\u2200x (can_transport(x) \u2192 \u00acis_empty(x)) ::: If something can transport multiple passengers, then they are not empty.\n\u2200x (is_airline(x) \u2192 can_transport(x)) ::: All airlines can transport multiple passengers.\n\u2200x (is_plane(x) \u2192 is_empty(x)) ::: All planes are empty.\n\u2200x (is_plane(x) \u2192 is_plane(\"boeing_707\")) ::: All Boeing 707s are planes.\n\u00acis_airline(\"greyhound\") \u2192 \u00ac\u2203x (is_plane(x) \u2227 \"greyhound\" = x) ::: If Greyhound is not an airline, then there are no Greyhound planes.\nQuery:\n\u00ac(\"greyhound\" = \"boeing_707\") ::: A Greyhound is not a Boeing 707.",
            "problem": " If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nA Greyhound is not a Boeing 707."
        },
        {
            "example": 125,
            "response": [
                "is_monkey(\"rock\")",
                [
                    "all x ((is_mammal(x)  ->  is_animal(x)) )",
                    "all x ((is_monkey(x)  ->  is_mammal(x)) )",
                    "all x (((is_monkey(x)  &   -is_bird(x))  |  ( -is_monkey(x)  &  is_bird(x))) )",
                    "all x ((is_bird(x)  ->  fly(x)) )",
                    "all x ((is_animal(x)  ->  breathe(x)) )",
                    "all x ((fly(x)  ->  has_wings(x)) )",
                    "(( -fly(\"rock\")  &   -is_bird(\"rock\"))  ->  ( -fly(\"rock\")  &   -breathe(\"rock\"))) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nrock ::: represents rock\nPredicates:\nis_mammal(x) ::: x is a mammal.\nis_animal(x) ::: x is an animal.\nis_monkey(x) ::: x is a monkey.\nis_bird(x) ::: x is a bird.\nfly(x) ::: x flies.\nbreathe(x) ::: x breathes.\nhas_wings(x) ::: x has wings.\nPremises:\n\u2200x (is_mammal(x) \u2192 is_animal(x)) ::: All mammals are animals.\n\u2200x (is_monkey(x) \u2192 is_mammal(x)) ::: All monkeys are mammals.\n\u2200x ((is_monkey(x) \u2227 \u00acis_bird(x)) \u2228 (\u00acis_monkey(x) \u2227 is_bird(x))) ::: An animal is either a monkey or a bird.\n\u2200x (is_bird(x) \u2192 fly(x)) ::: All birds fly.\n\u2200x (is_animal(x) \u2192 breathe(x)) ::: All animals breathe.\n\u2200x (fly(x) \u2192 has_wings(x)) ::: If something can fly, then it has wings.\n((\u00acfly(\"rock\") \u2227 \u00acis_bird(\"rock\")) \u2192 (\u00acfly(\"rock\") \u2227 \u00acbreathe(\"rock\"))) ::: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nQuery:\nis_monkey(\"rock\") ::: Rock is a monkey.",
            "problem": " All mammals are animals. All monkeys are mammals.  An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRock is a monkey."
        },
        {
            "example": 126,
            "response": [
                "has_wings(\"rock\")",
                [
                    "all x ((is_mammal(x)  ->  is_animal(x)) )",
                    "all x ((is_monkey(x)  ->  is_mammal(x)) )",
                    "all x (((is_monkey(x)  &   -is_bird(x))  |  ( -is_monkey(x)  &  is_bird(x))) )",
                    "all x ((is_bird(x)  ->  fly(x)) )",
                    "all x ((is_animal(x)  ->  breathe(x)) )",
                    "all x ((fly(x)  ->  has_wings(x)) )",
                    " -(fly(\"rock\")  |  is_bird(\"rock\"))  ->   -(fly(\"rock\")  |  breathe(\"rock\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nrock ::: represents rock\nPredicates:\nis_mammal(x) ::: x is a mammal.\nis_animal(x) ::: x is an animal.\nis_monkey(x) ::: x is a monkey.\nis_bird(x) ::: x is a bird.\nfly(x) ::: x flies.\nbreathe(x) ::: x breathes.\nhas_wings(x) ::: x has wings.\nPremises:\n\u2200x (is_mammal(x) \u2192 is_animal(x)) ::: All mammals are animals.\n\u2200x (is_monkey(x) \u2192 is_mammal(x)) ::: All monkeys are mammals.\n\u2200x ((is_monkey(x) \u2227 \u00acis_bird(x)) \u2228 (\u00acis_monkey(x) \u2227 is_bird(x))) ::: An animal is either a monkey or a bird.\n\u2200x (is_bird(x) \u2192 fly(x)) ::: All birds fly.\n\u2200x (is_animal(x) \u2192 breathe(x)) ::: All animals breathe.\n\u2200x (fly(x) \u2192 has_wings(x)) ::: If something can fly, then it has wings.\n\u00ac(fly(\"rock\") \u2228 is_bird(\"rock\")) \u2192 \u00ac(fly(\"rock\") \u2228 breathe(\"rock\")) ::: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nQuery:\nhas_wings(\"rock\") ::: Rock has wings.",
            "problem": " All mammals are animals. All monkeys are mammals.  An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRock has wings."
        },
        {
            "example": 127,
            "response": [
                " -has_wings(\"rock\")",
                [
                    "all x ((is_mammal(x)  ->  is_animal(x)) )",
                    "all x ((is_monkey(x)  ->  is_mammal(x)) )",
                    "all x (((is_monkey(x)  &   -is_bird(x))  |  ( -is_monkey(x)  &  is_bird(x))) )",
                    "all x ((is_bird(x)  ->  fly(x)) )",
                    "all x ((is_animal(x)  ->  breathe(x)) )",
                    "all x ((fly(x)  ->  has_wings(x)) )",
                    " -(fly(\"rock\")  |  is_bird(\"rock\"))  ->   -(fly(\"rock\")  |  breathe(\"rock\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nrock ::: represents rock\nPredicates:\nis_mammal(x) ::: x is a mammal.\nis_animal(x) ::: x is an animal.\nis_monkey(x) ::: x is a monkey.\nis_bird(x) ::: x is a bird.\nfly(x) ::: x flies.\nbreathe(x) ::: x breathes.\nhas_wings(x) ::: x has wings.\nPremises:\n\u2200x (is_mammal(x) \u2192 is_animal(x)) ::: All mammals are animals.\n\u2200x (is_monkey(x) \u2192 is_mammal(x)) ::: All monkeys are mammals.\n\u2200x ((is_monkey(x) \u2227 \u00acis_bird(x)) \u2228 (\u00acis_monkey(x) \u2227 is_bird(x))) ::: An animal is either a monkey or a bird.\n\u2200x (is_bird(x) \u2192 fly(x)) ::: All birds fly.\n\u2200x (is_animal(x) \u2192 breathe(x)) ::: All animals breathe.\n\u2200x (fly(x) \u2192 has_wings(x)) ::: If something can fly, then it has wings.\n\u00ac(fly(\"rock\") \u2228 is_bird(\"rock\")) \u2192 \u00ac(fly(\"rock\") \u2228 breathe(\"rock\")) ::: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nQuery:\n\u00achas_wings(\"rock\") ::: Rock does not have wings.",
            "problem": " All mammals are animals. All monkeys are mammals.  An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRock does not have wings."
        },
        {
            "example": 128,
            "response": [
                "has_wedding(\"john\")  &  is_well_attended(\"john\")",
                [
                    "all x ((has_wedding(x)  ->  has_child(x)) )",
                    "all x ((travel_to(x, \"paris\")  ->  has_wedding(x)) )",
                    "all x ((occur_in(x, \"july\")  ->  travel_to(x, \"paris\")) )",
                    "exists x ((occur_in(x, \"july\")  &  is_well_attended(x)) )",
                    "(has_child(\"john\")  ->   -travel_to(\"john\", \"paris\")  &   -has_wedding(\"john\")) ",
                    "(has_wedding(\"john\")  &  is_well_attended(\"john\")  ->  (occur_in(\"john\", \"july\")  |   -occur_in(\"john\", \"july\")  &  travel_to(\"john\", \"paris\"))) "
                ]
            ],
            "label": "False",
            "text": "Constants:\njohn ::: represents john\nparis ::: represents paris\njuly ::: represents july\nPredicates:\nhas_wedding(x) ::: x has a wedding.\nhas_child(x) ::: x has at least one child.\ntravel_to(x, y) ::: x travels to y.\noccur_in(x, y) ::: x occurs in y.\nis_well_attended(x) ::: x is well-attended.\nPremises:\n\u2200x (has_wedding(x) \u2192 has_child(x)) ::: All people who have a wedding are people who have at least one child.\n\u2200x (travel_to(x, \"paris\") \u2192 has_wedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.\n\u2200x (occur_in(x, \"july\") \u2192 travel_to(x, \"paris\")) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n\u2203x (occur_in(x, \"july\") \u2227 is_well_attended(x)) ::: Some weddings in July are well-attended.\n(has_child(\"john\") \u2192 \u00actravel_to(\"john\", \"paris\") \u2227 \u00achas_wedding(\"john\")) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\n(has_wedding(\"john\") \u2227 is_well_attended(\"john\") \u2192 (occur_in(\"john\", \"july\") \u2228 \u00acoccur_in(\"john\", \"july\") \u2227 travel_to(\"john\", \"paris\"))) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nQuery:\nhas_wedding(\"john\") \u2227 is_well_attended(\"john\") ::: John has a wedding that is well-attended.",
            "problem": " All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJohn has a wedding that is well-attended."
        },
        {
            "example": 129,
            "response": [
                " -(have_wedding(\"john\")  &  well_attended(\"john\"))",
                [
                    "all x ((have_wedding(x)  ->  have_child(x)) )",
                    "all x ((travel_to(x, \"paris\")  ->  have_wedding(x)) )",
                    "all x ((occur_in(x, \"july\")  ->  travel_to(x, \"paris\")) )",
                    "exists x ((occur_in(x, \"july\")  &  well_attended(x)) )",
                    "have_child(\"john\")  ->  ( -travel_to(\"john\", \"paris\")  &   -have_wedding(\"john\")) ",
                    "(have_wedding(\"john\")  &  well_attended(\"john\"))  ->  ((occur_in(\"john\", \"july\")  |  travel_to(\"john\", \"paris\"))  &  (occur_in(\"john\", \"july\")  |  travel_to(\"john\", \"paris\"))) "
                ]
            ],
            "label": "True",
            "text": "Constants:\njohn ::: represents john\nparis ::: represents paris\njuly ::: represents july\nPredicates:\nhave_wedding(x) ::: x has a wedding.\nhave_child(x) ::: x has at least one child.\ntravel_to(x, y) ::: x travels to y.\noccur_in(x, y) ::: x occurs in y.\nwell_attended(x) ::: x is well-attended.\nPremises:\n\u2200x (have_wedding(x) \u2192 have_child(x)) ::: All people who have a wedding are people who have at least one child.\n\u2200x (travel_to(x, \"paris\") \u2192 have_wedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.\n\u2200x (occur_in(x, \"july\") \u2192 travel_to(x, \"paris\")) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n\u2203x (occur_in(x, \"july\") \u2227 well_attended(x)) ::: Some weddings in July are well-attended.\nhave_child(\"john\") \u2192 (\u00actravel_to(\"john\", \"paris\") \u2227 \u00achave_wedding(\"john\")) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\n(have_wedding(\"john\") \u2227 well_attended(\"john\")) \u2192 ((occur_in(\"john\", \"july\") \u2228 travel_to(\"john\", \"paris\")) \u2227 (occur_in(\"john\", \"july\") \u2228 travel_to(\"john\", \"paris\"))) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nQuery:\n\u00ac(have_wedding(\"john\") \u2227 well_attended(\"john\")) ::: John does not have a wedding that is well-attended.",
            "problem": " All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJohn does not have a wedding that is well-attended."
        },
        {
            "example": 130,
            "response": [
                "have_child(\"john\")",
                [
                    "all x ((have_wedding(x)  ->  have_child(x)) )",
                    "all x ((travel_to_paris(x)  ->  have_wedding(x)) )",
                    "all x ((occur_in_july(x)  ->  travel_to_paris(x)) )",
                    "exists x ((occur_in_july(x)  &  well_attended(x)) )",
                    "have_child(\"john\")  ->   -travel_to_paris(\"john\")  &   -have_wedding(\"john\") ",
                    "well_attended(\"john\")  ->  (occur_in_july(\"john\")  |  travel_to_paris(\"john\")) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\njohn ::: represents john\nparis ::: represents paris\njuly ::: represents july\nPredicates:\nhave_wedding(x) ::: x has a wedding.\nhave_child(x) ::: x has at least one child.\ntravel_to_paris(x) ::: x travels to Paris for their honeymoon.\noccur_in_july(x) ::: x occurs in July.\nwell_attended(x) ::: x is well-attended.\nPremises:\n\u2200x (have_wedding(x) \u2192 have_child(x)) ::: All people who have a wedding are people who have at least one child.\n\u2200x (travel_to_paris(x) \u2192 have_wedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.\n\u2200x (occur_in_july(x) \u2192 travel_to_paris(x)) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n\u2203x (occur_in_july(x) \u2227 well_attended(x)) ::: Some weddings in July are well-attended.\nhave_child(\"john\") \u2192 \u00actravel_to_paris(\"john\") \u2227 \u00achave_wedding(\"john\") ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\nwell_attended(\"john\") \u2192 (occur_in_july(\"john\") \u2228 travel_to_paris(\"john\")) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nQuery:\nhave_child(\"john\") ::: John has at least one child.",
            "problem": " All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJohn has at least one child."
        },
        {
            "example": 131,
            "response": [
                " -(have_wedding(\"john\")  &  well_attended(\"john\"))  &   -travel_to(\"john\", \"paris\")",
                [
                    "all x ((have_wedding(x)  ->  have_child(x)) )",
                    "all x ((travel_to(x, \"paris\")  ->  have_wedding(x)) )",
                    "all x ((occur_in(x, \"july\")  ->  travel_to(x, \"paris\")) )",
                    "exists x ((occur_in(x, \"july\")  &  well_attended(x)) )",
                    "have_child(\"john\")  ->  ( -travel_to(\"john\", \"paris\")  &   -have_wedding(\"john\")) ",
                    "(have_wedding(\"john\")  &  well_attended(\"john\"))  ->  (occur_in(\"john\", \"july\")  |  travel_to(\"john\", \"paris\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\njohn ::: represents john\nparis ::: represents paris\njuly ::: represents july\nPredicates:\nhave_wedding(x) ::: x has a wedding.\nhave_child(x) ::: x has at least one child.\ntravel_to(x, y) ::: x travels to y.\noccur_in(x, y) ::: x occurs in y.\nwell_attended(x) ::: x is well-attended.\nPremises:\n\u2200x (have_wedding(x) \u2192 have_child(x)) ::: All people who have a wedding are people who have at least one child.\n\u2200x (travel_to(x, \"paris\") \u2192 have_wedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.\n\u2200x (occur_in(x, \"july\") \u2192 travel_to(x, \"paris\")) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n\u2203x (occur_in(x, \"july\") \u2227 well_attended(x)) ::: Some weddings in July are well-attended.\nhave_child(\"john\") \u2192 (\u00actravel_to(\"john\", \"paris\") \u2227 \u00achave_wedding(\"john\")) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\n(have_wedding(\"john\") \u2227 well_attended(\"john\")) \u2192 (occur_in(\"john\", \"july\") \u2228 travel_to(\"john\", \"paris\")) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nQuery:\n\u00ac(have_wedding(\"john\") \u2227 well_attended(\"john\")) \u2227 \u00actravel_to(\"john\", \"paris\") ::: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.",
            "problem": " All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJohn has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon."
        },
        {
            "example": 132,
            "response": [
                "is_mammal(\"platypus\")  &   -have_teeth(\"platypus\")",
                [
                    "exists x ((is_mammal(x)  &  have_teeth(x)) )",
                    "is_mammal(\"platypus\")  &   -have_teeth(\"platypus\") ",
                    "is_mammal(\"platypus\") ",
                    "have_teeth(\"humans\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nplatypus ::: represents a platypus\nhumans ::: represents humans\nPredicates:\nis_mammal(x) ::: x is a mammal.\nhave_teeth(x) ::: x has teeth.\nPremises:\n\u2203x (is_mammal(x) \u2227 have_teeth(x)) ::: Some mammals have teeth.\nis_mammal(\"platypus\") \u2227 \u00achave_teeth(\"platypus\") ::: Platypus have no teeth.\nis_mammal(\"platypus\") ::: Platypus are mammals.\nhave_teeth(\"humans\") ::: Humans have teeth.\nQuery:\nis_mammal(\"platypus\") \u2227 \u00achave_teeth(\"platypus\") ::: Platypus are mammals with no teeth.",
            "problem": " [BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals.  Humans have teeth.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPlatypus are mammals with no teeth."
        },
        {
            "example": 133,
            "response": [
                " -is_mammal(\"platypus\")",
                [
                    "exists x ((is_mammal(x)  &  have_teeth(x)) )",
                    " -have_teeth(\"platypus\") ",
                    "is_mammal(\"platypus\") ",
                    "have_teeth(\"humans\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nplatypus ::: represents a platypus\nhumans ::: represents humans\nPredicates:\nis_mammal(x) ::: x is a mammal.\nhave_teeth(x) ::: x has teeth.\nPremises:\n\u2203x (is_mammal(x) \u2227 have_teeth(x)) ::: Some mammals have teeth.\n\u00achave_teeth(\"platypus\") ::: Platypus have no teeth.\nis_mammal(\"platypus\") ::: Platypus are mammals.\nhave_teeth(\"humans\") ::: Humans have teeth.\nQuery:\n\u00acis_mammal(\"platypus\") ::: Platypus are reptiles.",
            "problem": " [BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals.  Humans have teeth.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPlatypus are reptiles."
        },
        {
            "example": 134,
            "response": [
                "is_mammal(\"humans\")",
                [
                    "exists x ((is_mammal(x)  &  have_teeth(x)) )",
                    "is_mammal(\"platypus\")  &   -have_teeth(\"platypus\") ",
                    "is_mammal(\"platypus\") ",
                    "have_teeth(\"humans\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nplatypus ::: represents a platypus\nhumans ::: represents humans\nPredicates:\nis_mammal(x) ::: x is a mammal.\nhave_teeth(x) ::: x has teeth.\nPremises:\n\u2203x (is_mammal(x) \u2227 have_teeth(x)) ::: Some mammals have teeth.\nis_mammal(\"platypus\") \u2227 \u00achave_teeth(\"platypus\") ::: Platypus have no teeth.\nis_mammal(\"platypus\") ::: Platypus are mammals.\nhave_teeth(\"humans\") ::: Humans have teeth.\nQuery:\nis_mammal(\"humans\") ::: Humans are mammals.",
            "problem": " [BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals.  Humans have teeth.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nHumans are mammals."
        },
        {
            "example": 135,
            "response": [
                "suck(\"space\")",
                [
                    "suck(\"plunger\") ",
                    "suck(\"vacuum\") ",
                    "suck(\"vampire\") ",
                    "is_vacuum(\"space\") ",
                    "is_household_appliance(\"duster\")  &   -suck(\"duster\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nplunger ::: represents a plunger\nvacuum ::: represents a vacuum\nvampire ::: represents a vampire\nspace ::: represents space\nduster ::: represents a duster\nPredicates:\nsuck(x) ::: x sucks.\nis_vacuum(x) ::: x is a vacuum.\nis_household_appliance(x) ::: x is a household appliance.\nPremises:\nsuck(\"plunger\") ::: Plungers suck.\nsuck(\"vacuum\") ::: Vacuums suck.\nsuck(\"vampire\") ::: Vampires suck.\nis_vacuum(\"space\") ::: Space is a vacuum.\nis_household_appliance(\"duster\") \u2227 \u00acsuck(\"duster\") ::: A duster is a household appliance that doesn't suck.\nQuery:\nsuck(\"space\") ::: Space sucks.",
            "problem": " Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSpace sucks."
        },
        {
            "example": 136,
            "response": [
                "is_vampire(\"space\")",
                [
                    "suck(\"plunger\") ",
                    "suck(\"vacuum\") ",
                    "suck(\"vampire\") ",
                    "is_vacuum(\"space\") ",
                    "is_household_appliance(\"duster\")  &   -suck(\"duster\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nplunger ::: represents a plunger\nvacuum ::: represents a vacuum\nvampire ::: represents a vampire\nspace ::: represents space\nduster ::: represents a duster\nPredicates:\nsuck(x) ::: x sucks.\nis_vacuum(x) ::: x is a vacuum.\nis_household_appliance(x) ::: x is a household appliance.\nPremises:\nsuck(\"plunger\") ::: Plungers suck.\nsuck(\"vacuum\") ::: Vacuums suck.\nsuck(\"vampire\") ::: Vampires suck.\nis_vacuum(\"space\") ::: Space is a vacuum.\nis_household_appliance(\"duster\") \u2227 \u00acsuck(\"duster\") ::: A duster is a household appliance that doesn't suck.\nQuery:\nis_vampire(\"space\") ::: Space is a vampire.",
            "problem": " Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSpace is a vampire."
        },
        {
            "example": 137,
            "response": [
                "all x ((is_household_appliance(x)  ->  suck(x)))",
                [
                    "suck(\"plunger\") ",
                    "suck(\"vacuum\") ",
                    "suck(\"vampire\") ",
                    "is_vacuum(\"space\") ",
                    "is_household_appliance(\"duster\")  &   -suck(\"duster\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nplunger ::: represents a plunger\nvacuum ::: represents a vacuum\nvampire ::: represents a vampire\nspace ::: represents space\nduster ::: represents a duster\nPredicates:\nsuck(x) ::: x sucks.\nis_vacuum(x) ::: x is a vacuum.\nis_household_appliance(x) ::: x is a household appliance.\nPremises:\nsuck(\"plunger\") ::: Plungers suck.\nsuck(\"vacuum\") ::: Vacuums suck.\nsuck(\"vampire\") ::: Vampires suck.\nis_vacuum(\"space\") ::: Space is a vacuum.\nis_household_appliance(\"duster\") \u2227 \u00acsuck(\"duster\") ::: A duster is a household appliance that doesn't suck.\nQuery:\n\u2200x (is_household_appliance(x) \u2192 suck(x)) ::: If something is a household appliance, it sucks.",
            "problem": " Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf something is a household appliance, it sucks."
        },
        {
            "example": 138,
            "response": [
                "is_used_to_train(\"supervised_learning\", \"text_summarization_model\")",
                [
                    "is_category_of(\"supervised_learning\", \"machine_learning_algorithms\")  &  is_category_of(\"unsupervised_learning\", \"machine_learning_algorithms\")  &  is_category_of(\"reinforcement_learning\", \"machine_learning_algorithms\") ",
                    "requires(\"unsupervised_learning\",  -\"labelled_data\") ",
                    "is_trained_with(\"text_summarization_model\", \"machine_learning_algorithms\") ",
                    " -is_used_to_train(\"reinforcement_learning\", \"text_summarization_model\") ",
                    "requires(\"machine_learning_algorithms\", \"labelled_data\")  &  is_used_to_train(\"machine_learning_algorithms\", \"text_summarization_model\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nmachine_learning_algorithms ::: represents machine learning algorithms\nsupervised_learning ::: represents supervised learning\nunsupervised_learning ::: represents unsupervised learning\nreinforcement_learning ::: represents reinforcement learning\ntext_summarization_model ::: represents the text summarization model\nlabelled_data ::: represents labelled data\nPredicates:\nis_category_of(x, y) ::: x is a category of y.\nrequires(x, y) ::: x requires y.\nis_trained_with(x, y) ::: x is trained with y.\nis_used_to_train(x, y) ::: x is used to train y.\nPremises:\nis_category_of(\"supervised_learning\", \"machine_learning_algorithms\") \u2227 is_category_of(\"unsupervised_learning\", \"machine_learning_algorithms\") \u2227 is_category_of(\"reinforcement_learning\", \"machine_learning_algorithms\") ::: Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\nrequires(\"unsupervised_learning\", \u00ac\"labelled_data\") ::: Unsupervised learning doesn't require labelled data.\nis_trained_with(\"text_summarization_model\", \"machine_learning_algorithms\") ::: The state-of-the-art text summarization model is trained with machine learning algorithms.\n\u00acis_used_to_train(\"reinforcement_learning\", \"text_summarization_model\") ::: Reinforcement learning is not used to train the state-of-the-art text summarization model.\nrequires(\"machine_learning_algorithms\", \"labelled_data\") \u2227 is_used_to_train(\"machine_learning_algorithms\", \"text_summarization_model\") ::: The Machine Learning algorithm for training text summarization model requires labelled data.\nQuery:\nis_used_to_train(\"supervised_learning\", \"text_summarization_model\") ::: Supervised learning is used to train the state-of-the-art text summarization model.",
            "problem": " Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning. Unsupervised learning doesn't require labelled data. The state-of-the-art text summarization model is trained with machine learning algorithms. Reinforcement learning is not used to train the state-of-the-art text summarization model. The Machine Learning algorithm for training text summarization model requires labelled data.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSupervised learning is used to train the state-of-the-art text summarization model."
        },
        {
            "example": 139,
            "response": [
                "is_used_to_train(\"unsupervised_learning\", \"text_summarization_model\")",
                [
                    "is_category_of(\"supervised_learning\", \"machine_learning_algorithms\")  &  is_category_of(\"unsupervised_learning\", \"machine_learning_algorithms\")  &  is_category_of(\"reinforcement_learning\", \"machine_learning_algorithms\") ",
                    " -requires(\"unsupervised_learning\", \"labelled_data\") ",
                    "is_trained_with(\"text_summarization_model\", \"machine_learning_algorithms\") ",
                    " -is_used_to_train(\"reinforcement_learning\", \"text_summarization_model\") ",
                    "all x ((is_used_to_train(x, \"text_summarization_model\")  ->  requires(x, \"labelled_data\")) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\nmachine_learning_algorithms ::: represents machine learning algorithms\nsupervised_learning ::: represents supervised learning\nunsupervised_learning ::: represents unsupervised learning\nreinforcement_learning ::: represents reinforcement learning\ntext_summarization_model ::: represents the text summarization model\nlabelled_data ::: represents labelled data\nPredicates:\nis_category_of(x, y) ::: x is a category of y.\nrequires(x, y) ::: x requires y.\nis_trained_with(x, y) ::: x is trained with y.\nis_used_to_train(x, y) ::: x is used to train y.\nPremises:\nis_category_of(\"supervised_learning\", \"machine_learning_algorithms\") \u2227 is_category_of(\"unsupervised_learning\", \"machine_learning_algorithms\") \u2227 is_category_of(\"reinforcement_learning\", \"machine_learning_algorithms\") ::: Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\n\u00acrequires(\"unsupervised_learning\", \"labelled_data\") ::: Unsupervised learning doesn't require labelled data.\nis_trained_with(\"text_summarization_model\", \"machine_learning_algorithms\") ::: The state-of-the-art text summarization model is trained with machine learning algorithms.\n\u00acis_used_to_train(\"reinforcement_learning\", \"text_summarization_model\") ::: Reinforcement learning is not used to train the state-of-the-art text summarization model.\n\u2200x (is_used_to_train(x, \"text_summarization_model\") \u2192 requires(x, \"labelled_data\")) ::: The Machine Learning algorithm for training text summarization model requires labelled data.\nQuery:\nis_used_to_train(\"unsupervised_learning\", \"text_summarization_model\") ::: Unsupervised learning is used to train the state-of-the-art text summarization model.",
            "problem": " Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning. Unsupervised learning doesn't require labelled data. The state-of-the-art text summarization model is trained with machine learning algorithms. Reinforcement learning is not used to train the state-of-the-art text summarization model. The Machine Learning algorithm for training text summarization model requires labelled data.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nUnsupervised learning is used to train the state-of-the-art text summarization model."
        },
        {
            "example": 140,
            "response": [
                "is_loved_by_children(\"ben\")",
                [
                    "all x ((is_funny(x)  ->  is_popular(x)) )",
                    "all x ((is_ugly(x)  ->   -is_popular(x)) )",
                    "all x ((is_loved_by_children(x)  ->  is_funny(x)) )",
                    "all x ((is_from(x, \"the_simpsons\")  ->  is_loved_by_children(x)) )",
                    "all x ((is_yellow(x)  ->  is_from(x, \"the_simpsons\")) )",
                    "(is_from(\"ben\", \"the_simpsons\")  &   -is_funny(\"ben\"))  |  ( -is_from(\"ben\", \"the_simpsons\")  &  is_funny(\"ben\")) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nben ::: represents ben\nthe_simpsons ::: represents The Simpsons\nPredicates:\nis_funny(x) ::: x is a cartoon character that is funny.\nis_popular(x) ::: x is a cartoon character that is popular.\nis_ugly(x) ::: x is a cartoon character that is ugly.\nis_loved_by_children(x) ::: x is a cartoon character that is loved by children.\nis_from(x, y) ::: x is a cartoon character from y.\nis_yellow(x) ::: x is a cartoon character that is yellow.\nPremises:\n\u2200x (is_funny(x) \u2192 is_popular(x)) ::: If a cartoon character is funny, then it is popular.\n\u2200x (is_ugly(x) \u2192 \u00acis_popular(x)) ::: If a cartoon character is ugly, then it is not popular.\n\u2200x (is_loved_by_children(x) \u2192 is_funny(x)) ::: If a cartoon character is loved by children, then it is funny.\n\u2200x (is_from(x, \"the_simpsons\") \u2192 is_loved_by_children(x)) ::: If a cartoon character is from The Simpsons, then it is loved by children.\n\u2200x (is_yellow(x) \u2192 is_from(x, \"the_simpsons\")) ::: If a cartoon character is yellow, then it is from The Simpsons.\n(is_from(\"ben\", \"the_simpsons\") \u2227 \u00acis_funny(\"ben\")) \u2228 (\u00acis_from(\"ben\", \"the_simpsons\") \u2227 is_funny(\"ben\")) ::: Ben is either from The Simpsons or funny.\nQuery:\nis_loved_by_children(\"ben\") ::: Ben is loved by children.",
            "problem": " If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBen is loved by children."
        },
        {
            "example": 141,
            "response": [
                "(is_ugly(\"ben\")  &   -is_yellow(\"ben\"))  |  ( -is_ugly(\"ben\")  &  is_yellow(\"ben\"))",
                [
                    "all x ((is_funny(x)  ->  is_popular(x)) )",
                    "all x ((is_ugly(x)  ->   -is_popular(x)) )",
                    "all x ((is_loved_by_children(x)  ->  is_funny(x)) )",
                    "all x ((is_from(x, \"the_simpsons\")  ->  is_loved_by_children(x)) )",
                    "all x ((is_yellow(x)  ->  is_from(x, \"the_simpsons\")) )",
                    "(is_from(\"ben\", \"the_simpsons\")  &   -is_funny(\"ben\"))  |  ( -is_from(\"ben\", \"the_simpsons\")  &  is_funny(\"ben\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nben ::: represents ben\nthe_simpsons ::: represents The Simpsons\nPredicates:\nis_funny(x) ::: x is a cartoon character that is funny.\nis_popular(x) ::: x is a cartoon character that is popular.\nis_ugly(x) ::: x is a cartoon character that is ugly.\nis_loved_by_children(x) ::: x is a cartoon character that is loved by children.\nis_from(x, y) ::: x is a cartoon character from y.\nis_yellow(x) ::: x is a cartoon character that is yellow.\nPremises:\n\u2200x (is_funny(x) \u2192 is_popular(x)) ::: If a cartoon character is funny, then it is popular.\n\u2200x (is_ugly(x) \u2192 \u00acis_popular(x)) ::: If a cartoon character is ugly, then it is not popular.\n\u2200x (is_loved_by_children(x) \u2192 is_funny(x)) ::: If a cartoon character is loved by children, then it is funny.\n\u2200x (is_from(x, \"the_simpsons\") \u2192 is_loved_by_children(x)) ::: If a cartoon character is from The Simpsons, then it is loved by children.\n\u2200x (is_yellow(x) \u2192 is_from(x, \"the_simpsons\")) ::: If a cartoon character is yellow, then it is from The Simpsons.\n(is_from(\"ben\", \"the_simpsons\") \u2227 \u00acis_funny(\"ben\")) \u2228 (\u00acis_from(\"ben\", \"the_simpsons\") \u2227 is_funny(\"ben\")) ::: Ben is either from The Simpsons or funny.\nQuery:\n(is_ugly(\"ben\") \u2227 \u00acis_yellow(\"ben\")) \u2228 (\u00acis_ugly(\"ben\") \u2227 is_yellow(\"ben\")) ::: Ben is ugly or yellow.",
            "problem": " If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBen is ugly or yellow."
        },
        {
            "example": 142,
            "response": [
                "((is_yellow(\"ben\")  &  is_ugly(\"ben\"))  |  ( -is_yellow(\"ben\")  &   -is_ugly(\"ben\")))",
                [
                    "all x ((is_funny(x)  ->  is_popular(x)) )",
                    "all x ((is_ugly(x)  ->   -is_popular(x)) )",
                    "all x ((is_loved_by_children(x)  ->  is_funny(x)) )",
                    "all x ((is_from(x, \"the_simpsons\")  ->  is_loved_by_children(x)) )",
                    "all x ((is_yellow(x)  ->  is_from(x, \"the_simpsons\")) )",
                    "(is_from(\"ben\", \"the_simpsons\")  |  is_funny(\"ben\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nben ::: represents ben\nthe_simpsons ::: represents The Simpsons\nPredicates:\nis_funny(x) ::: x is a cartoon character that is funny.\nis_popular(x) ::: x is a cartoon character that is popular.\nis_ugly(x) ::: x is a cartoon character that is ugly.\nis_loved_by_children(x) ::: x is a cartoon character that is loved by children.\nis_from(x, y) ::: x is a cartoon character from y.\nis_yellow(x) ::: x is a cartoon character that is yellow.\nPremises:\n\u2200x (is_funny(x) \u2192 is_popular(x)) ::: If a cartoon character is funny, then it is popular.\n\u2200x (is_ugly(x) \u2192 \u00acis_popular(x)) ::: If a cartoon character is ugly, then it is not popular.\n\u2200x (is_loved_by_children(x) \u2192 is_funny(x)) ::: If a cartoon character is loved by children, then it is funny.\n\u2200x (is_from(x, \"the_simpsons\") \u2192 is_loved_by_children(x)) ::: If a cartoon character is from The Simpsons, then it is loved by children.\n\u2200x (is_yellow(x) \u2192 is_from(x, \"the_simpsons\")) ::: If a cartoon character is yellow, then it is from The Simpsons.\n(is_from(\"ben\", \"the_simpsons\") \u2228 is_funny(\"ben\")) ::: Ben is either from The Simpsons or funny.\nQuery:\n((is_yellow(\"ben\") \u2227 is_ugly(\"ben\")) \u2228 (\u00acis_yellow(\"ben\") \u2227 \u00acis_ugly(\"ben\"))) ::: Ben is either yellow and ugly or neither yellow nor ugly.",
            "problem": " If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBen is either yellow and ugly or neither yellow nor ugly."
        },
        {
            "example": 143,
            "response": [
                "exists x ((were_bred_back(\"heck_cattle\", x)))",
                [
                    "is_form_of(\"breeding_back\", \"artificial_selection\")  &  is_deliberate_selective_breeding(\"breeding_back\") ",
                    "were_bred_back(\"heck_cattle\", \"year_1920s\")  &  resemble(\"heck_cattle\", \"aurochs\") ",
                    "is_animal(\"heck_cattle\") ",
                    "is_animal(\"aurochs\") ",
                    "exists x ((is_animal(x)  &  were_bred_back(x)  &  resemble(x, y)  &  are_extinct(y)) )"
                ]
            ],
            "label": "True",
            "text": "Constants:\nbreeding_back ::: represents breeding back\nheck_cattle ::: represents heck cattle\naurochs ::: represents aurochs\nyear_1920s ::: represents the 1920s\nPredicates:\nis_form_of(x, y) ::: x is a form of y.\nis_deliberate_selective_breeding(x) ::: x is a deliberate selective breeding.\nwere_bred_back(x, y) ::: x were bred-back in y.\nresemble(x, y) ::: x resembles y.\nis_animal(x) ::: x is an animal.\nare_extinct(x) ::: x are extinct.\nPremises:\nis_form_of(\"breeding_back\", \"artificial_selection\") \u2227 is_deliberate_selective_breeding(\"breeding_back\") ::: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nwere_bred_back(\"heck_cattle\", \"year_1920s\") \u2227 resemble(\"heck_cattle\", \"aurochs\") ::: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nis_animal(\"heck_cattle\") ::: Heck cattle are animals.\nis_animal(\"aurochs\") ::: Aurochs are animals.\n\u2203x (is_animal(x) \u2227 were_bred_back(x) \u2227 resemble(x, y) \u2227 are_extinct(y)) ::: Some animals to be bred-back resemble animals that are extinct.\nQuery:\n\u2203x (were_bred_back(\"heck_cattle\", x)) ::: Some Heck cattle are artificially selected.",
            "problem": " Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals. Heck cattle were bred-back in the 1920s to resemble the aurochs. [BG] Heck cattle are animals. [BG] Aurochs are animals. Some animals to be bred-back resemble animals that are extinct.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSome Heck cattle are artificially selected."
        },
        {
            "example": 144,
            "response": [
                "is_extinct(\"aurochs\")",
                [
                    "is_form_of(\"breeding_back\", \"artificial_selection\")  &  is_selective_breeding(\"breeding_back\")  &   all x (is_domestic_animal(x)  ->  is_selective_breeding(x)) ",
                    "bred_back(\"heck_cattle\", \"year_1920s\")  &  resemble(\"heck_cattle\", \"aurochs\") ",
                    "is_animal(\"heck_cattle\") ",
                    "is_animal(\"aurochs\") ",
                    "exists x ((is_animal(x)  &  resemble(x, \"aurochs\")  &  is_extinct(\"aurochs\")) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nbreeding_back ::: represents breeding back\nheck_cattle ::: represents heck cattle\naurochs ::: represents aurochs\nyear_1920s ::: represents the 1920s\nPredicates:\nis_form_of(x, y) ::: x is a form of y.\nis_selective_breeding(x) ::: x is selective breeding.\nis_domestic_animal(x) ::: x is a domestic animal.\nbred_back(x, y) ::: x was bred back in y.\nresemble(x, y) ::: x resembles y.\nis_animal(x) ::: x is an animal.\nis_extinct(x) ::: x is extinct.\nPremises:\nis_form_of(\"breeding_back\", \"artificial_selection\") \u2227 is_selective_breeding(\"breeding_back\") \u2227 \u2200x (is_domestic_animal(x) \u2192 is_selective_breeding(x)) ::: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nbred_back(\"heck_cattle\", \"year_1920s\") \u2227 resemble(\"heck_cattle\", \"aurochs\") ::: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nis_animal(\"heck_cattle\") ::: Heck cattle are animals.\nis_animal(\"aurochs\") ::: Aurochs are animals.\n\u2203x (is_animal(x) \u2227 resemble(x, \"aurochs\") \u2227 is_extinct(\"aurochs\")) ::: Some animals to be bred-back resemble animals that are extinct.\nQuery:\nis_extinct(\"aurochs\") ::: Aurochs are extinct.",
            "problem": " Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals. Heck cattle were bred-back in the 1920s to resemble the aurochs. [BG] Heck cattle are animals. [BG] Aurochs are animals. Some animals to be bred-back resemble animals that are extinct.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nAurochs are extinct."
        },
        {
            "example": 145,
            "response": [
                "is_young(\"jerry\")",
                [
                    "all x ((is_student(x)  ->  is_human(x)) )",
                    "all x ((studies(x)  ->  is_student(x)) )",
                    "all x (((studies(x)  &   -teaches(x))  |  ( -studies(x)  &  teaches(x))) )",
                    "all x ((is_young(x)  ->   -teaches(x)) )",
                    " -teaches(\"jerry\")  &   -is_manager(\"jerry\") ",
                    "(is_student(\"rose\")  |  is_young(\"rose\"))  &  (is_student(\"rose\")  |   -is_young(\"rose\")) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\njerry ::: represents jerry\nrose ::: represents rose\nPredicates:\nis_student(x) ::: x is a student.\nis_human(x) ::: x is a human.\nstudies(x) ::: x studies.\nteaches(x) ::: x teaches.\nis_young(x) ::: x is young.\nis_manager(x) ::: x is a manager.\nPremises:\n\u2200x (is_student(x) \u2192 is_human(x)) ::: All students are humans.\n\u2200x (studies(x) \u2192 is_student(x)) ::: If someone studies, then they are a student.\n\u2200x ((studies(x) \u2227 \u00acteaches(x)) \u2228 (\u00acstudies(x) \u2227 teaches(x))) ::: A person either studies or teaches.\n\u2200x (is_young(x) \u2192 \u00acteaches(x)) ::: No young person teaches.\n\u00acteaches(\"jerry\") \u2227 \u00acis_manager(\"jerry\") ::: Jerry neither teaches nor is a manager.\n(is_student(\"rose\") \u2228 is_young(\"rose\")) \u2227 (is_student(\"rose\") \u2228 \u00acis_young(\"rose\")) ::: Rose is young or a student.\nQuery:\nis_young(\"jerry\") ::: Jerry is young.",
            "problem": " All students are humans.  If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJerry is young."
        },
        {
            "example": 146,
            "response": [
                " -is_young(\"jerry\")",
                [
                    "all x ((is_student(x)  ->  is_human(x)) )",
                    "all x ((studies(x)  ->  is_student(x)) )",
                    "all x (((studies(x)  &   -teaches(x))  |  ( -studies(x)  &  teaches(x))) )",
                    "all x ((is_young(x)  ->   -teaches(x)) )",
                    " -teaches(\"jerry\")  &   -is_manager(\"jerry\") ",
                    "(is_young(\"rose\")  |  is_student(\"rose\")) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\njerry ::: represents jerry\nrose ::: represents rose\nPredicates:\nis_student(x) ::: x is a student.\nis_human(x) ::: x is a human.\nstudies(x) ::: x studies.\nteaches(x) ::: x teaches.\nis_young(x) ::: x is young.\nis_manager(x) ::: x is a manager.\nPremises:\n\u2200x (is_student(x) \u2192 is_human(x)) ::: All students are humans.\n\u2200x (studies(x) \u2192 is_student(x)) ::: If someone studies, then they are a student.\n\u2200x ((studies(x) \u2227 \u00acteaches(x)) \u2228 (\u00acstudies(x) \u2227 teaches(x))) ::: A person either studies or teaches.\n\u2200x (is_young(x) \u2192 \u00acteaches(x)) ::: No young person teaches.\n\u00acteaches(\"jerry\") \u2227 \u00acis_manager(\"jerry\") ::: Jerry neither teaches nor is a manager.\n(is_young(\"rose\") \u2228 is_student(\"rose\")) ::: Rose is young or a student.\nQuery:\n\u00acis_young(\"jerry\") ::: Jerry is not young.",
            "problem": " All students are humans.  If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJerry is not young."
        },
        {
            "example": 147,
            "response": [
                "(is_human(\"rose\")  |  is_manager(\"rose\"))",
                [
                    "all x ((is_student(x)  ->  is_human(x)) )",
                    "all x ((studies(x)  ->  is_student(x)) )",
                    "all x (((studies(x)  &   -teaches(x))  |  ( -studies(x)  &  teaches(x))) )",
                    "all x ((is_young(x)  ->   -teaches(x)) )",
                    " -teaches(\"jerry\")  &   -is_manager(\"jerry\") ",
                    "(is_young(\"rose\")  |  is_student(\"rose\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\njerry ::: represents jerry\nrose ::: represents rose\nPredicates:\nis_student(x) ::: x is a student.\nis_human(x) ::: x is a human.\nstudies(x) ::: x studies.\nteaches(x) ::: x teaches.\nis_young(x) ::: x is young.\nis_manager(x) ::: x is a manager.\nPremises:\n\u2200x (is_student(x) \u2192 is_human(x)) ::: All students are humans.\n\u2200x (studies(x) \u2192 is_student(x)) ::: If someone studies, then they are a student.\n\u2200x ((studies(x) \u2227 \u00acteaches(x)) \u2228 (\u00acstudies(x) \u2227 teaches(x))) ::: A person either studies or teaches.\n\u2200x (is_young(x) \u2192 \u00acteaches(x)) ::: No young person teaches.\n\u00acteaches(\"jerry\") \u2227 \u00acis_manager(\"jerry\") ::: Jerry neither teaches nor is a manager.\n(is_young(\"rose\") \u2228 is_student(\"rose\")) ::: Rose is young or a student.\nQuery:\n(is_human(\"rose\") \u2228 is_manager(\"rose\")) ::: Rose is a human or a manager.",
            "problem": " All students are humans.  If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRose is a human or a manager."
        },
        {
            "example": 148,
            "response": [
                "(is_human(\"rose\")  |  is_manager(\"jerry\"))",
                [
                    "all x ((is_student(x)  ->  is_human(x)) )",
                    "all x ((studies(x)  ->  is_student(x)) )",
                    "all x (((studies(x)  &   -teaches(x))  |  ( -studies(x)  &  teaches(x))) )",
                    "all x ((is_young(x)  ->   -teaches(x)) )",
                    " -teaches(\"jerry\")  &   -is_manager(\"jerry\") ",
                    "(is_young(\"rose\")  |  is_student(\"rose\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\njerry ::: represents jerry\nrose ::: represents rose\nPredicates:\nis_student(x) ::: x is a student.\nis_human(x) ::: x is a human.\nstudies(x) ::: x studies.\nteaches(x) ::: x teaches.\nis_young(x) ::: x is young.\nis_manager(x) ::: x is a manager.\nPremises:\n\u2200x (is_student(x) \u2192 is_human(x)) ::: All students are humans.\n\u2200x (studies(x) \u2192 is_student(x)) ::: If someone studies, then they are a student.\n\u2200x ((studies(x) \u2227 \u00acteaches(x)) \u2228 (\u00acstudies(x) \u2227 teaches(x))) ::: A person either studies or teaches.\n\u2200x (is_young(x) \u2192 \u00acteaches(x)) ::: No young person teaches.\n\u00acteaches(\"jerry\") \u2227 \u00acis_manager(\"jerry\") ::: Jerry neither teaches nor is a manager.\n(is_young(\"rose\") \u2228 is_student(\"rose\")) ::: Rose is young or a student.\nQuery:\n(is_human(\"rose\") \u2228 is_manager(\"jerry\")) ::: Rose is a human or Jerry is a manager.",
            "problem": " All students are humans.  If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRose is a human or Jerry is a manager."
        },
        {
            "example": 149,
            "response": [
                " -(is_student(\"rose\")  &  is_human(\"jerry\"))",
                [
                    "all x ((is_student(x)  ->  is_human(x)) )",
                    "all x ((studies(x)  ->  is_student(x)) )",
                    "all x (((studies(x)  &   -teaches(x))  |  ( -studies(x)  &  teaches(x))) )",
                    "all x ((is_young(x)  ->   -teaches(x)) )",
                    " -teaches(\"jerry\")  &   -is_manager(\"jerry\") ",
                    "(is_student(\"rose\")  |  is_young(\"rose\"))  &  (is_student(\"rose\")  |   -is_young(\"rose\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\njerry ::: represents jerry\nrose ::: represents rose\nPredicates:\nis_student(x) ::: x is a student.\nis_human(x) ::: x is a human.\nstudies(x) ::: x studies.\nteaches(x) ::: x teaches.\nis_young(x) ::: x is young.\nis_manager(x) ::: x is a manager.\nPremises:\n\u2200x (is_student(x) \u2192 is_human(x)) ::: All students are humans.\n\u2200x (studies(x) \u2192 is_student(x)) ::: If someone studies, then they are a student.\n\u2200x ((studies(x) \u2227 \u00acteaches(x)) \u2228 (\u00acstudies(x) \u2227 teaches(x))) ::: A person either studies or teaches.\n\u2200x (is_young(x) \u2192 \u00acteaches(x)) ::: No young person teaches.\n\u00acteaches(\"jerry\") \u2227 \u00acis_manager(\"jerry\") ::: Jerry neither teaches nor is a manager.\n(is_student(\"rose\") \u2228 is_young(\"rose\")) \u2227 (is_student(\"rose\") \u2228 \u00acis_young(\"rose\")) ::: Rose is young or a student.\nQuery:\n\u00ac(is_student(\"rose\") \u2227 is_human(\"jerry\")) ::: It is not true that Rose is a student and Jerry is a human.",
            "problem": " All students are humans.  If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIt is not true that Rose is a student and Jerry is a human."
        },
        {
            "example": 150,
            "response": [
                "is_in_language(\"neapolitan_chronicles\", \"english\")",
                [
                    "is_publishing_house(\"new_vessel_press\")  &  specializes_in(\"new_vessel_press\", \"translating_foreign_literature_into_english\") ",
                    "all x ((published_by(x, \"new_vessel_press\")  ->  is_in_language(x, \"english\")) )",
                    "is_book(\"neapolitan_chronicles\")  &  published_by(\"neapolitan_chronicles\", \"new_vessel_press\") ",
                    "translated_from(\"neapolitan_chronicles\", \"italian\") ",
                    "is_book(\"palace_of_flies\")  &  published_by(\"palace_of_flies\", \"new_vessel_press\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nnew_vessel_press ::: represents the New Vessel Press\nneapolitan_chronicles ::: represents the Neapolitan Chronicles\npalace_of_flies ::: represents the Palace of Flies\nitalian ::: represents the Italian language\nenglish ::: represents the English language\nPredicates:\nis_publishing_house(x) ::: x is a publishing house.\nspecializes_in(x, y) ::: x specializes in y.\nis_book(x) ::: x is a book.\npublished_by(x, y) ::: x is published by y.\nis_in_language(x, y) ::: x is in y language.\ntranslated_from(x, y) ::: x is translated from y.\nPremises:\nis_publishing_house(\"new_vessel_press\") \u2227 specializes_in(\"new_vessel_press\", \"translating_foreign_literature_into_english\") ::: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\n\u2200x (published_by(x, \"new_vessel_press\") \u2192 is_in_language(x, \"english\")) ::: All of New Vessel Press's published books are in English.\nis_book(\"neapolitan_chronicles\") \u2227 published_by(\"neapolitan_chronicles\", \"new_vessel_press\") ::: Neapolitan Chronicles is a book published by New Vessel Press.\ntranslated_from(\"neapolitan_chronicles\", \"italian\") ::: Neapolitan Chronicles was translated from Italian.\nis_book(\"palace_of_flies\") \u2227 published_by(\"palace_of_flies\", \"new_vessel_press\") ::: Palace of Flies is a book published by New Vessel Press.\nQuery:\nis_in_language(\"neapolitan_chronicles\", \"english\") ::: Neapolitan Chronicles is an English book.",
            "problem": " New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nNeapolitan Chronicles is an English book."
        },
        {
            "example": 151,
            "response": [
                "published_by(\"harry_potter\", \"new_vessel_press\")",
                [
                    "is_publishing_house(\"new_vessel_press\")  &  specializes_in_translating(\"new_vessel_press\") ",
                    "published_books_in_english(\"new_vessel_press\") ",
                    "is_book(\"neapolitan_chronicles\")  &  published_by(\"neapolitan_chronicles\", \"new_vessel_press\") ",
                    "translated_from_italian(\"neapolitan_chronicles\") ",
                    "is_book(\"palace_of_flies\")  &  published_by(\"palace_of_flies\", \"new_vessel_press\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nnew_vessel_press ::: represents New Vessel Press\nneapolitan_chronicles ::: represents the book Neapolitan Chronicles\npalace_of_flies ::: represents the book Palace of Flies\nharry_potter ::: represents the book Harry Potter\nPredicates:\nis_publishing_house(x) ::: x is a publishing house.\nspecializes_in_translating(x) ::: x specializes in translating foreign literature into English.\npublished_books_in_english(x) ::: All of x's published books are in English.\nis_book(x) ::: x is a book.\npublished_by(x, y) ::: x is published by y.\ntranslated_from_italian(x) ::: x was translated from Italian.\nPremises:\nis_publishing_house(\"new_vessel_press\") \u2227 specializes_in_translating(\"new_vessel_press\") ::: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\npublished_books_in_english(\"new_vessel_press\") ::: All of New Vessel Press's published books are in English.\nis_book(\"neapolitan_chronicles\") \u2227 published_by(\"neapolitan_chronicles\", \"new_vessel_press\") ::: Neapolitan Chronicles is a book published by New Vessel Press.\ntranslated_from_italian(\"neapolitan_chronicles\") ::: Neapolitan Chronicles was translated from Italian.\nis_book(\"palace_of_flies\") \u2227 published_by(\"palace_of_flies\", \"new_vessel_press\") ::: Palace of Flies is a book published by New Vessel Press.\nQuery:\npublished_by(\"harry_potter\", \"new_vessel_press\") ::: Harry Potter was published by New Vessel Press.",
            "problem": " New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nHarry Potter was published by New Vessel Press."
        },
        {
            "example": 152,
            "response": [
                "translated_from(\"palace_of_flies\", \"italian\")",
                [
                    "is_publishing_house(\"new_vessel_press\")  &  specializes_in_translating(\"new_vessel_press\", \"foreign_literature_into_english\") ",
                    "all x ((published_by(x, \"new_vessel_press\")  ->  is_in_language(x, \"english\")) )",
                    "is_book(\"neapolitan_chronicles\")  &  published_by(\"neapolitan_chronicles\", \"new_vessel_press\")  &  translated_from(\"neapolitan_chronicles\", \"italian\") ",
                    "is_book(\"palace_of_flies\")  &  published_by(\"palace_of_flies\", \"new_vessel_press\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nnew_vessel_press ::: represents the publishing house New Vessel Press\nneapolitan_chronicles ::: represents the book Neapolitan Chronicles\npalace_of_flies ::: represents the book Palace of Flies\nitalian ::: represents the Italian language\nenglish ::: represents the English language\nPredicates:\nis_publishing_house(x) ::: x is a publishing house.\nspecializes_in_translating(x, y) ::: x specializes in translating y.\nis_book(x) ::: x is a book.\npublished_by(x, y) ::: x is published by y.\nis_in_language(x, y) ::: x is in language y.\ntranslated_from(x, y) ::: x is translated from y.\nPremises:\nis_publishing_house(\"new_vessel_press\") \u2227 specializes_in_translating(\"new_vessel_press\", \"foreign_literature_into_english\") ::: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\n\u2200x (published_by(x, \"new_vessel_press\") \u2192 is_in_language(x, \"english\")) ::: All of New Vessel Press's published books are in English.\nis_book(\"neapolitan_chronicles\") \u2227 published_by(\"neapolitan_chronicles\", \"new_vessel_press\") \u2227 translated_from(\"neapolitan_chronicles\", \"italian\") ::: Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian.\nis_book(\"palace_of_flies\") \u2227 published_by(\"palace_of_flies\", \"new_vessel_press\") ::: Palace of Flies is a book published by New Vessel Press.\nQuery:\ntranslated_from(\"palace_of_flies\", \"italian\") ::: Palace of Flies was translated from Italian.",
            "problem": " New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPalace of Flies was translated from Italian."
        },
        {
            "example": 153,
            "response": [
                "visit_office_supply_store(\"remy\")",
                [
                    "all x ((own_large_desktop_monitor(x)  ->  work_regularly_at_home(x)) )",
                    "all x ((have_impressive_home_office(x)  ->  own_large_desktop_monitor(x)) )",
                    "all x ((work_regularly_at_home(x)  ->  spend_free_time_tiding(x)) )",
                    "all x ((work_regularly_at_home(x)  ->  visit_office_supply_store(x)) )",
                    "all x ((spend_free_time_tiding(x)  ->   -go_to_bed_late(x)  &   -wake_up_after_noon(x)) )",
                    "((go_to_bed_late(\"remy\")  &  wake_up_after_noon(\"remy\")  &  spend_free_time_tiding(\"remy\"))  |  ( -go_to_bed_late(\"remy\")  &   -wake_up_after_noon(\"remy\")  &   -spend_free_time_tiding(\"remy\"))) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nremy ::: represents remy\nPredicates:\nown_large_desktop_monitor(x) ::: x owns a large desktop monitor at their home.\nwork_regularly_at_home(x) ::: x works regularly and often at home.\nhave_impressive_home_office(x) ::: x has a fully stocked and impressive home office.\nspend_free_time_tiding(x) ::: x spends their free time tidying and organizing the spaces in their homes.\nvisit_office_supply_store(x) ::: x visits the office supply store regularly.\ngo_to_bed_late(x) ::: x goes to bed late.\nwake_up_after_noon(x) ::: x wakes up every day after noon.\nPremises:\n\u2200x (own_large_desktop_monitor(x) \u2192 work_regularly_at_home(x)) ::: If people own a large desktop monitor at their home, then they work regularly and often at home.\n\u2200x (have_impressive_home_office(x) \u2192 own_large_desktop_monitor(x)) ::: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\n\u2200x (work_regularly_at_home(x) \u2192 spend_free_time_tiding(x)) ::: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\n\u2200x (work_regularly_at_home(x) \u2192 visit_office_supply_store(x)) ::: All people who work regularly and often at home visit the office supply store regularly.\n\u2200x (spend_free_time_tiding(x) \u2192 \u00acgo_to_bed_late(x) \u2227 \u00acwake_up_after_noon(x)) ::: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\n((go_to_bed_late(\"remy\") \u2227 wake_up_after_noon(\"remy\") \u2227 spend_free_time_tiding(\"remy\")) \u2228 (\u00acgo_to_bed_late(\"remy\") \u2227 \u00acwake_up_after_noon(\"remy\") \u2227 \u00acspend_free_time_tiding(\"remy\"))) ::: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nQuery:\nvisit_office_supply_store(\"remy\") ::: Remy visits the office supply store regularly.",
            "problem": " If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.  Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRemy visits the office supply store regularly."
        },
        {
            "example": 154,
            "response": [
                "have_impressive_home_office(\"remy\")  &  visit_office_supply_store(\"remy\")",
                [
                    "all x ((own_large_desktop_monitor(x)  ->  work_regularly_at_home(x)) )",
                    "all x ((have_impressive_home_office(x)  ->  own_large_desktop_monitor(x)) )",
                    "all x ((work_regularly_at_home(x)  ->  spend_free_time_tiding(x)) )",
                    "all x ((work_regularly_at_home(x)  ->  visit_office_supply_store(x)) )",
                    "all x ((spend_free_time_tiding(x)  ->   -go_to_bed_late(x)  &   -wake_up_after_noon(x)) )",
                    "((go_to_bed_late(\"remy\")  &  wake_up_after_noon(\"remy\")  &  spend_free_time_tiding(\"remy\"))  |  ( -go_to_bed_late(\"remy\")  &   -wake_up_after_noon(\"remy\")  &   -spend_free_time_tiding(\"remy\"))) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nremy ::: represents remy\nPredicates:\nown_large_desktop_monitor(x) ::: x owns a large desktop monitor at their home.\nwork_regularly_at_home(x) ::: x works regularly and often at home.\nhave_impressive_home_office(x) ::: x has a fully stocked and impressive home office.\nspend_free_time_tiding(x) ::: x spends their free time tidying and organizing the spaces in their homes.\nvisit_office_supply_store(x) ::: x visits the office supply store regularly.\ngo_to_bed_late(x) ::: x goes to bed late.\nwake_up_after_noon(x) ::: x wakes up every day after noon.\nPremises:\n\u2200x (own_large_desktop_monitor(x) \u2192 work_regularly_at_home(x)) ::: If people own a large desktop monitor at their home, then they work regularly and often at home.\n\u2200x (have_impressive_home_office(x) \u2192 own_large_desktop_monitor(x)) ::: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\n\u2200x (work_regularly_at_home(x) \u2192 spend_free_time_tiding(x)) ::: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\n\u2200x (work_regularly_at_home(x) \u2192 visit_office_supply_store(x)) ::: All people who work regularly and often at home visit the office supply store regularly.\n\u2200x (spend_free_time_tiding(x) \u2192 \u00acgo_to_bed_late(x) \u2227 \u00acwake_up_after_noon(x)) ::: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\n((go_to_bed_late(\"remy\") \u2227 wake_up_after_noon(\"remy\") \u2227 spend_free_time_tiding(\"remy\")) \u2228 (\u00acgo_to_bed_late(\"remy\") \u2227 \u00acwake_up_after_noon(\"remy\") \u2227 \u00acspend_free_time_tiding(\"remy\"))) ::: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nQuery:\nhave_impressive_home_office(\"remy\") \u2227 visit_office_supply_store(\"remy\") ::: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.",
            "problem": " If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.  Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRemy has a fully stocked and impressive home office and also visits the office supply store regularly."
        },
        {
            "example": 155,
            "response": [
                "((go_to_bed_late(\"remy\")  |  visit_office_supply_store(\"remy\"))  ->  ( -spend_free_time_tiding(\"remy\")  &   -have_impressive_home_office(\"remy\")))",
                [
                    "all x ((own_large_desktop_monitor(x)  ->  work_regularly_at_home(x)) )",
                    "all x ((have_impressive_home_office(x)  ->  own_large_desktop_monitor(x)) )",
                    "all x ((work_regularly_at_home(x)  ->  spend_free_time_tiding(x)) )",
                    "all x ((work_regularly_at_home(x)  ->  visit_office_supply_store(x)) )",
                    "all x ((spend_free_time_tiding(x)  ->   -go_to_bed_late(x)  &   -wake_up_after_noon(x)) )",
                    "((go_to_bed_late(\"remy\")  &  wake_up_after_noon(\"remy\")  &  spend_free_time_tiding(\"remy\"))  |  ( -go_to_bed_late(\"remy\")  &   -wake_up_after_noon(\"remy\")  &   -spend_free_time_tiding(\"remy\"))) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nremy ::: represents remy\nPredicates:\nown_large_desktop_monitor(x) ::: x owns a large desktop monitor at their home.\nwork_regularly_at_home(x) ::: x works regularly and often at home.\nhave_impressive_home_office(x) ::: x has a fully stocked and impressive home office.\nspend_free_time_tiding(x) ::: x spends their free time tidying and organizing the spaces in their home.\nvisit_office_supply_store(x) ::: x visits the office supply store regularly.\ngo_to_bed_late(x) ::: x goes to bed late.\nwake_up_after_noon(x) ::: x wakes up every day after noon.\nPremises:\n\u2200x (own_large_desktop_monitor(x) \u2192 work_regularly_at_home(x)) ::: If people own a large desktop monitor at their home, then they work regularly and often at home.\n\u2200x (have_impressive_home_office(x) \u2192 own_large_desktop_monitor(x)) ::: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\n\u2200x (work_regularly_at_home(x) \u2192 spend_free_time_tiding(x)) ::: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\n\u2200x (work_regularly_at_home(x) \u2192 visit_office_supply_store(x)) ::: All people who work regularly and often at home visit the office supply store regularly.\n\u2200x (spend_free_time_tiding(x) \u2192 \u00acgo_to_bed_late(x) \u2227 \u00acwake_up_after_noon(x)) ::: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\n((go_to_bed_late(\"remy\") \u2227 wake_up_after_noon(\"remy\") \u2227 spend_free_time_tiding(\"remy\")) \u2228 (\u00acgo_to_bed_late(\"remy\") \u2227 \u00acwake_up_after_noon(\"remy\") \u2227 \u00acspend_free_time_tiding(\"remy\"))) ::: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nQuery:\n((go_to_bed_late(\"remy\") \u2228 visit_office_supply_store(\"remy\")) \u2192 (\u00acspend_free_time_tiding(\"remy\") \u2227 \u00achave_impressive_home_office(\"remy\"))) ::: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
            "problem": " If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.  Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office."
        },
        {
            "example": 156,
            "response": [
                "exists x ((is_greek(x)  &  is_mortal(x)))",
                [
                    "all x ((is_human(x)  ->  is_mortal(x)) )",
                    "all x ((is_greek(x)  ->  is_human(x)) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\ngreek ::: represents a Greek person\nhuman ::: represents a human person\nPredicates:\nis_human(x) ::: x is a human.\nis_mortal(x) ::: x is mortal.\nis_greek(x) ::: x is a Greek.\nPremises:\n\u2200x (is_human(x) \u2192 is_mortal(x)) ::: All humans are mortal.\n\u2200x (is_greek(x) \u2192 is_human(x)) ::: All Greeks are humans.\nQuery:\n\u2203x (is_greek(x) \u2227 is_mortal(x)) ::: Some Greeks are mortal.",
            "problem": " All humans are mortal. All Greeks are humans.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSome Greeks are mortal."
        },
        {
            "example": 157,
            "response": [
                "have_part_time_job(\"james\", \"university\")",
                [
                    "all x ((work_in(x, \"library\")  ->   -from_department(x, \"computer_science_department\")) )",
                    "all x ((have_part_time_job(x, \"university\")  ->  work_in(x, \"library\")) )",
                    "all x ((take_course(x, \"database_course\")  ->  from_department(x, \"computer_science_department\")) )",
                    "all x ((instructed_by(x, \"david\")  ->  take_course(x, \"database_course\")) )",
                    "all x ((work_in(x, \"lab\")  ->  instructed_by(x, \"david\")) )",
                    "work_in(\"james\", \"lab\") ",
                    " -have_part_time_job(\"jack\", \"university\")  &   -work_in(\"jack\", \"lab\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\njames ::: represents james\njack ::: represents jack\ndavid ::: represents david\ncomputer_science_department ::: represents the computer science department\nuniversity ::: represents the university\nlibrary ::: represents the library\nlab ::: represents the lab\ndatabase_course ::: represents the database course\nPredicates:\nwork_in(x, y) ::: x works in y.\nfrom_department(x, y) ::: x is from y department.\nhave_part_time_job(x, y) ::: x has a part-time job offered by y.\ntake_course(x, y) ::: x takes y course.\ninstructed_by(x, y) ::: x is instructed by y.\nPremises:\n\u2200x (work_in(x, \"library\") \u2192 \u00acfrom_department(x, \"computer_science_department\")) ::: No students who work in the library are from the computer science department.\n\u2200x (have_part_time_job(x, \"university\") \u2192 work_in(x, \"library\")) ::: All students who have part-time jobs offered by the university are students who work in the library.\n\u2200x (take_course(x, \"database_course\") \u2192 from_department(x, \"computer_science_department\")) ::: All students who take the database course are from the computer science department.\n\u2200x (instructed_by(x, \"david\") \u2192 take_course(x, \"database_course\")) ::: All students instructed by professor David are taking the database course.\n\u2200x (work_in(x, \"lab\") \u2192 instructed_by(x, \"david\")) ::: All students working in the lab are instructed by professor David.\nwork_in(\"james\", \"lab\") ::: James is a student working in the lab.\n\u00achave_part_time_job(\"jack\", \"university\") \u2227 \u00acwork_in(\"jack\", \"lab\") ::: Jack neither has a part-time job offered by the university nor works in the lab.\nQuery:\nhave_part_time_job(\"james\", \"university\") ::: James has a part-time job offered by the university.",
            "problem": " No students who work in the library are from the computer science department.  All students who have part-time jobs offered by the university are students who work in the library.  All students who take the database course are from the computer science department.  All students instructed by professor David are taking the database course.  All students working in the lab are instructed by professor David.  James is a student working in the lab.  Jack neither has a part-time job offered by the university nor works in the lab. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJames has a part-time job offered by the university."
        },
        {
            "example": 158,
            "response": [
                " -have_part_time_job(\"james\", \"university\")",
                [
                    "all x ((work_in(x, \"library\")  ->   -from(x, \"computer_science_department\")) )",
                    "all x ((have_part_time_job(x, \"university\")  ->  work_in(x, \"library\")) )",
                    "all x ((take(x, \"database_course\")  ->  from(x, \"computer_science_department\")) )",
                    "all x ((instructed_by(x, \"david\")  ->  take(x, \"database_course\")) )",
                    "all x ((work_in(x, \"lab\")  ->  instructed_by(x, \"david\")) )",
                    "work_in(\"james\", \"lab\") ",
                    " -have_part_time_job(\"jack\", \"university\")  &   -work_in(\"jack\", \"lab\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\njames ::: represents james\njack ::: represents jack\ndavid ::: represents professor david\nlibrary ::: represents the library\ncomputer_science_department ::: represents the computer science department\nuniversity ::: represents the university\ndatabase_course ::: represents the database course\nlab ::: represents the lab\nPredicates:\nwork_in(x, y) ::: x works in y.\nfrom(x, y) ::: x is from y.\nhave_part_time_job(x, y) ::: x has a part-time job offered by y.\ntake(x, y) ::: x takes y.\ninstructed_by(x, y) ::: x is instructed by y.\nPremises:\n\u2200x (work_in(x, \"library\") \u2192 \u00acfrom(x, \"computer_science_department\")) ::: No students who work in the library are from the computer science department.\n\u2200x (have_part_time_job(x, \"university\") \u2192 work_in(x, \"library\")) ::: All students who have part-time jobs offered by the university are students who work in the library.\n\u2200x (take(x, \"database_course\") \u2192 from(x, \"computer_science_department\")) ::: All students who take the database course are from the computer science department.\n\u2200x (instructed_by(x, \"david\") \u2192 take(x, \"database_course\")) ::: All students instructed by professor David are taking the database course.\n\u2200x (work_in(x, \"lab\") \u2192 instructed_by(x, \"david\")) ::: All students working in the lab are instructed by professor David.\nwork_in(\"james\", \"lab\") ::: James is a student working in the lab.\n\u00achave_part_time_job(\"jack\", \"university\") \u2227 \u00acwork_in(\"jack\", \"lab\") ::: Jack neither has a part-time job offered by the university nor works in the lab.\nQuery:\n\u00achave_part_time_job(\"james\", \"university\") ::: James does not have a part-time job offered by the university.",
            "problem": " No students who work in the library are from the computer science department.  All students who have part-time jobs offered by the university are students who work in the library.  All students who take the database course are from the computer science department.  All students instructed by professor David are taking the database course.  All students working in the lab are instructed by professor David.  James is a student working in the lab.  Jack neither has a part-time job offered by the university nor works in the lab. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJames does not have a part-time job offered by the university."
        },
        {
            "example": 159,
            "response": [
                "take_course(\"james\", \"database_course\")  |  have_part_time_job(\"james\", \"university\")",
                [
                    "all x ((work_in(x, \"library\")  ->   -from_department(x, \"computer_science_department\")) )",
                    "all x ((have_part_time_job(x, \"university\")  ->  work_in(x, \"library\")) )",
                    "all x ((take_course(x, \"database_course\")  ->  from_department(x, \"computer_science_department\")) )",
                    "all x ((instructed_by(x, \"david\")  ->  take_course(x, \"database_course\")) )",
                    "all x ((work_in(x, \"lab\")  ->  instructed_by(x, \"david\")) )",
                    "work_in(\"james\", \"lab\") ",
                    " -have_part_time_job(\"jack\", \"university\")  &   -work_in(\"jack\", \"lab\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\njames ::: represents james\njack ::: represents jack\ndavid ::: represents professor david\nlibrary ::: represents the library\ncomputer_science_department ::: represents the computer science department\nuniversity ::: represents the university\ndatabase_course ::: represents the database course\nlab ::: represents the lab\nPredicates:\nwork_in(x, y) ::: x works in y.\nfrom_department(x, y) ::: x is from y department.\nhave_part_time_job(x, y) ::: x has a part-time job offered by y.\ntake_course(x, y) ::: x takes y course.\ninstructed_by(x, y) ::: x is instructed by y.\nPremises:\n\u2200x (work_in(x, \"library\") \u2192 \u00acfrom_department(x, \"computer_science_department\")) ::: No students who work in the library are from the computer science department.\n\u2200x (have_part_time_job(x, \"university\") \u2192 work_in(x, \"library\")) ::: All students who have part-time jobs offered by the university are students who work in the library.\n\u2200x (take_course(x, \"database_course\") \u2192 from_department(x, \"computer_science_department\")) ::: All students who take the database course are from the computer science department.\n\u2200x (instructed_by(x, \"david\") \u2192 take_course(x, \"database_course\")) ::: All students instructed by professor David are taking the database course.\n\u2200x (work_in(x, \"lab\") \u2192 instructed_by(x, \"david\")) ::: All students working in the lab are instructed by professor David.\nwork_in(\"james\", \"lab\") ::: James is a student working in the lab.\n\u00achave_part_time_job(\"jack\", \"university\") \u2227 \u00acwork_in(\"jack\", \"lab\") ::: Jack neither has a part-time job offered by the university nor works in the lab.\nQuery:\ntake_course(\"james\", \"database_course\") \u2228 have_part_time_job(\"james\", \"university\") ::: James either takes the database course or has a part-time job offered by the university.",
            "problem": " No students who work in the library are from the computer science department.  All students who have part-time jobs offered by the university are students who work in the library.  All students who take the database course are from the computer science department.  All students instructed by professor David are taking the database course.  All students working in the lab are instructed by professor David.  James is a student working in the lab.  Jack neither has a part-time job offered by the university nor works in the lab. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJames either takes the database course or has a part-time job offered by the university."
        },
        {
            "example": 160,
            "response": [
                "take_database_course(\"jack\")",
                [
                    "all x ((work_in_library(x)  ->   -from_cs_department(x)) )",
                    "all x ((have_part_time_job(x)  ->  work_in_library(x)) )",
                    "all x ((take_database_course(x)  ->  from_cs_department(x)) )",
                    "all x ((instructed_by_david(x)  ->  take_database_course(x)) )",
                    "all x ((work_in_lab(x)  ->  instructed_by_david(x)) )",
                    "work_in_lab(\"james\") ",
                    " -have_part_time_job(\"jack\")  &   -work_in_lab(\"jack\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\njames ::: represents james\njack ::: represents jack\ndavid ::: represents david\nPredicates:\nwork_in_library(x) ::: x works in the library.\nfrom_cs_department(x) ::: x is from the computer science department.\nhave_part_time_job(x) ::: x has a part-time job offered by the university.\ntake_database_course(x) ::: x takes the database course.\ninstructed_by_david(x) ::: x is instructed by professor David.\nwork_in_lab(x) ::: x works in the lab.\nPremises:\n\u2200x (work_in_library(x) \u2192 \u00acfrom_cs_department(x)) ::: No students who work in the library are from the computer science department.\n\u2200x (have_part_time_job(x) \u2192 work_in_library(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n\u2200x (take_database_course(x) \u2192 from_cs_department(x)) ::: All students who take the database course are from the computer science department.\n\u2200x (instructed_by_david(x) \u2192 take_database_course(x)) ::: All students instructed by professor David are taking the database course.\n\u2200x (work_in_lab(x) \u2192 instructed_by_david(x)) ::: All students working in the lab are instructed by professor David.\nwork_in_lab(\"james\") ::: James is a student working in the lab.\n\u00achave_part_time_job(\"jack\") \u2227 \u00acwork_in_lab(\"jack\") ::: Jack neither has a part-time job offered by the university nor works in the lab.\nQuery:\ntake_database_course(\"jack\") ::: Jack takes the database course.",
            "problem": " No students who work in the library are from the computer science department.  All students who have part-time jobs offered by the university are students who work in the library.  All students who take the database course are from the computer science department.  All students instructed by professor David are taking the database course.  All students working in the lab are instructed by professor David.  James is a student working in the lab.  Jack neither has a part-time job offered by the university nor works in the lab. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJack takes the database course."
        },
        {
            "example": 161,
            "response": [
                "(likes_music(\"george\")  &  has_access_to_program(\"george\"))  ->  will_compose(\"george\")",
                [
                    "likes_music(\"george\")  ->  wants_to_compose(\"george\") ",
                    "has_access_to_program(\"george\")  ->  can_compose(\"george\") ",
                    "(can_compose(\"george\")  &  wants_to_compose(\"george\"))  ->  will_compose(\"george\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\ngeorge ::: represents George\nPredicates:\nlikes_music(x) ::: x likes music.\nwants_to_compose(x) ::: x wants to compose.\nhas_access_to_program(x) ::: x has access to a program.\ncan_compose(x) ::: x can compose.\nwill_compose(x) ::: x will compose.\nPremises:\nlikes_music(\"george\") \u2192 wants_to_compose(\"george\") ::: If George likes music, he wants to compose.\nhas_access_to_program(\"george\") \u2192 can_compose(\"george\") ::: If George has access to a program, he can compose.\n(can_compose(\"george\") \u2227 wants_to_compose(\"george\")) \u2192 will_compose(\"george\") ::: If George can compose and wants to compose, he will compose.\nQuery:\n(likes_music(\"george\") \u2227 has_access_to_program(\"george\")) \u2192 will_compose(\"george\") ::: If George likes music and has access to a program, he will compose.",
            "problem": " If George likes music, he wants to compose. If George has access to a program, he can compose. If George can compose and wants to compose, he will compose.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf George likes music and has access to a program, he will compose."
        },
        {
            "example": 162,
            "response": [
                " -will_compose(\"george\")  ->   -can_compose(\"george\")",
                [
                    "likes_music(\"george\")  ->  wants_to_compose(\"george\") ",
                    "has_access_to_program(\"george\")  ->  can_compose(\"george\") ",
                    "(can_compose(\"george\")  &  wants_to_compose(\"george\"))  ->  will_compose(\"george\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\ngeorge ::: represents George\nPredicates:\nlikes_music(x) ::: x likes music.\nwants_to_compose(x) ::: x wants to compose.\nhas_access_to_program(x) ::: x has access to a program.\ncan_compose(x) ::: x can compose.\nwill_compose(x) ::: x will compose.\nPremises:\nlikes_music(\"george\") \u2192 wants_to_compose(\"george\") ::: If George likes music, he wants to compose.\nhas_access_to_program(\"george\") \u2192 can_compose(\"george\") ::: If George has access to a program, he can compose.\n(can_compose(\"george\") \u2227 wants_to_compose(\"george\")) \u2192 will_compose(\"george\") ::: If George can compose and wants to compose, he will compose.\nQuery:\n\u00acwill_compose(\"george\") \u2192 \u00accan_compose(\"george\") ::: If George will not compose, George can not compose.",
            "problem": " If George likes music, he wants to compose. If George has access to a program, he can compose. If George can compose and wants to compose, he will compose.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf George will not compose, George can not compose."
        },
        {
            "example": 163,
            "response": [
                "all x ((is_bird(x)  ->  lands(x)))",
                [
                    "all x ((is_hawk(x)  ->   -lands(x)) )",
                    "exists x ((is_bird(x)  &  is_hawk(x)) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\nhawk ::: represents a hawk\nPredicates:\nis_bird(x) ::: x is a bird.\nis_hawk(x) ::: x is a hawk.\nlands(x) ::: x lands.\nPremises:\n\u2200x (is_hawk(x) \u2192 \u00aclands(x)) ::: A hawk never lands.\n\u2203x (is_bird(x) \u2227 is_hawk(x)) ::: Some birds are hawks.\nQuery:\n\u2200x (is_bird(x) \u2192 lands(x)) ::: All birds land.",
            "problem": " A hawk never lands.  Some birds are hawks.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nAll birds land"
        },
        {
            "example": 164,
            "response": [
                "is_on(\"breaking_bad\", \"monday_8_pm\")",
                [
                    "exists x ((given_out_on(\"roses\", \"monday_8_pm\")  &  is_on(x, \"tv\")) )",
                    "all x ((given_out_on(\"roses\", x)  ->  is_on(x, \"the_bachelor\")) )",
                    "all x ((is_on(x, \"the_bachelor\")  ->  portrays(x, \"real_people\")) )",
                    "all x ((portrays(x, \"real_people\")  ->  is_reality_tv_show(x)) )",
                    " -is_reality_tv_show(\"breaking_bad\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nmonday_8_pm ::: represents Monday at 8 pm\nroses ::: represents roses\ntv ::: represents TV\nthe_bachelor ::: represents the Bachelor\nreal_people ::: represents real people\nreality_tv_shows ::: represents reality TV shows\nbreaking_bad ::: represents Breaking Bad\nPredicates:\ngiven_out_on(x, y) ::: x is given out on y.\nis_on(x, y) ::: x is on y.\nportrays(x, y) ::: x portrays y.\nis_reality_tv_show(x) ::: x is a reality TV show.\nPremises:\n\u2203x (given_out_on(\"roses\", \"monday_8_pm\") \u2227 is_on(x, \"tv\")) ::: On some Mondays at 8 pm, roses are given out on TV.\n\u2200x (given_out_on(\"roses\", x) \u2192 is_on(x, \"the_bachelor\")) ::: Every rose given out on TV is on the Bachelor.\n\u2200x (is_on(x, \"the_bachelor\") \u2192 portrays(x, \"real_people\")) ::: Everything on the Bachelor portrays the lives of real people.\n\u2200x (portrays(x, \"real_people\") \u2192 is_reality_tv_show(x)) ::: All shows portraying the lives of real people are reality TV shows.\n\u00acis_reality_tv_show(\"breaking_bad\") ::: Breaking Bad is not a reality TV show.\nQuery:\nis_on(\"breaking_bad\", \"monday_8_pm\") ::: Breaking Bad is on Monday at 8 pm.",
            "problem": " On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBreaking Bad is on Monday at 8 pm."
        },
        {
            "example": 165,
            "response": [
                "is_on(\"breaking_bad\", \"tv\")  &  given_out_on(\"roses\", \"monday_8_pm\")",
                [
                    "exists x ((given_out_on(\"roses\", \"monday_8_pm\")  &  is_on(x, \"tv\")) )",
                    "all x ((given_out_on(x, \"tv\")  ->  is_on(x, \"the_bachelor\")) )",
                    "all x ((is_on(x, \"the_bachelor\")  ->  portrays(x)) )",
                    "all x ((portrays(x)  ->  is_reality_tv_show(x)) )",
                    " -is_reality_tv_show(\"breaking_bad\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nmonday_8_pm ::: represents Monday at 8 pm\ntv ::: represents TV\nthe_bachelor ::: represents the Bachelor\nreality_tv_show ::: represents reality TV shows\nbreaking_bad ::: represents Breaking Bad\nroses ::: represents roses\nPredicates:\ngiven_out_on(x, y) ::: x is given out on y.\nis_on(x, y) ::: x is on y.\nportrays(x) ::: x portrays the lives of real people.\nis_reality_tv_show(x) ::: x is a reality TV show.\nPremises:\n\u2203x (given_out_on(\"roses\", \"monday_8_pm\") \u2227 is_on(x, \"tv\")) ::: On some Mondays at 8 pm, roses are given out on TV.\n\u2200x (given_out_on(x, \"tv\") \u2192 is_on(x, \"the_bachelor\")) ::: Every rose given out on TV is on the Bachelor.\n\u2200x (is_on(x, \"the_bachelor\") \u2192 portrays(x)) ::: Everything on the Bachelor portrays the lives of real people.\n\u2200x (portrays(x) \u2192 is_reality_tv_show(x)) ::: All shows portraying the lives of real people are reality TV shows.\n\u00acis_reality_tv_show(\"breaking_bad\") ::: Breaking Bad is not a reality TV show.\nQuery:\nis_on(\"breaking_bad\", \"tv\") \u2227 given_out_on(\"roses\", \"monday_8_pm\") ::: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
            "problem": " On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm."
        },
        {
            "example": 166,
            "response": [
                "all x ((given_out_on(\"roses\", \"breaking_bad\")  ->  is_on(x, \"monday_8_pm\")))",
                [
                    "exists x ((given_out_on(\"roses\", \"monday_8_pm\")  &  is_on(x, \"tv\")) )",
                    "all x ((given_out_on(\"roses\", x)  ->  is_on(x, \"the_bachelor\")) )",
                    "all x ((is_on(x, \"the_bachelor\")  ->  portrays(x, \"real_people\")) )",
                    "all x ((portrays(x, \"real_people\")  ->  is_reality_tv_show(x)) )",
                    " -is_reality_tv_show(\"breaking_bad\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nmonday_8_pm ::: represents Monday at 8 pm\ntv ::: represents TV\nthe_bachelor ::: represents the Bachelor\nreality_tv_show ::: represents reality TV shows\nbreaking_bad ::: represents Breaking Bad\nPredicates:\ngiven_out_on(x, y) ::: x is given out on y.\nis_on(x, y) ::: x is on y.\nportrays(x, y) ::: x portrays y.\nis_reality_tv_show(x) ::: x is a reality TV show.\nPremises:\n\u2203x (given_out_on(\"roses\", \"monday_8_pm\") \u2227 is_on(x, \"tv\")) ::: On some Mondays at 8 pm, roses are given out on TV.\n\u2200x (given_out_on(\"roses\", x) \u2192 is_on(x, \"the_bachelor\")) ::: Every rose given out on TV is on the Bachelor.\n\u2200x (is_on(x, \"the_bachelor\") \u2192 portrays(x, \"real_people\")) ::: Everything on the Bachelor portrays the lives of real people.\n\u2200x (portrays(x, \"real_people\") \u2192 is_reality_tv_show(x)) ::: All shows portraying the lives of real people are reality TV shows.\n\u00acis_reality_tv_show(\"breaking_bad\") ::: Breaking Bad is not a reality TV show.\nQuery:\n\u2200x (given_out_on(\"roses\", \"breaking_bad\") \u2192 is_on(x, \"monday_8_pm\")) ::: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
            "problem": " On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm."
        },
        {
            "example": 167,
            "response": [
                "\"heinrich_schmidt\" = \"nazi_german\"  |  \"heinrich_schmidt\" = \"russian\"",
                [
                    "is_politician(\"heinrich_schmidt\")  &  \"heinrich_schmidt\" = \"nazi_german\" ",
                    "is_member(\"heinrich_schmidt\", \"prussian_state_parliament\")  &  is_member(\"heinrich_schmidt\", \"nazi_reichstag\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nheinrich_schmidt ::: represents heinrich schmidt\nnazi_german ::: represents nazi german\nprussian_state_parliament ::: represents the prussian state parliament\nnazi_reichstag ::: represents the nazi reichstag\nPredicates:\nis_politician(x) ::: x is a politician.\nis_member(x, y) ::: x is a member of y.\nPremises:\nis_politician(\"heinrich_schmidt\") \u2227 \"heinrich_schmidt\" = \"nazi_german\" ::: Heinrich Scmidt was a Nazi German politician.\nis_member(\"heinrich_schmidt\", \"prussian_state_parliament\") \u2227 is_member(\"heinrich_schmidt\", \"nazi_reichstag\") ::: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nQuery:\n\"heinrich_schmidt\" = \"nazi_german\" \u2228 \"heinrich_schmidt\" = \"russian\" ::: Heinrich Schmidt was either German or Russian.",
            "problem": " Heinrich Scmidt was a Nazi German politician.  Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nHeinrich Schmidt was either German or Russian."
        },
        {
            "example": 168,
            "response": [
                "exists x ((is_politician(x)  &  is_member(x, \"nazi_german\")  &  is_member(x, \"prussian_state_parliament\")  &  is_member(x, \"nazi_reichstag\")))",
                [
                    "is_politician(\"heinrich_scmidt\")  &  is_member(\"heinrich_scmidt\", \"nazi_german\") ",
                    "is_member(\"heinrich_scmidt\", \"prussian_state_parliament\")  &  is_member(\"heinrich_scmidt\", \"nazi_reichstag\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nheinrich_scmidt ::: represents heinrich scmidt\nnazi_german ::: represents nazi german\nprussian_state_parliament ::: represents the prussian state parliament\nnazi_reichstag ::: represents the nazi reichstag\nPredicates:\nis_politician(x) ::: x is a politician.\nis_member(x, y) ::: x is a member of y.\nPremises:\nis_politician(\"heinrich_scmidt\") \u2227 is_member(\"heinrich_scmidt\", \"nazi_german\") ::: Heinrich Scmidt was a Nazi German politician.\nis_member(\"heinrich_scmidt\", \"prussian_state_parliament\") \u2227 is_member(\"heinrich_scmidt\", \"nazi_reichstag\") ::: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nQuery:\n\u2203x (is_politician(x) \u2227 is_member(x, \"nazi_german\") \u2227 is_member(x, \"prussian_state_parliament\") \u2227 is_member(x, \"nazi_reichstag\")) ::: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
            "problem": " Heinrich Scmidt was a Nazi German politician.  Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag."
        },
        {
            "example": 169,
            "response": [
                "- all x ((is_politician(x)  ->   -is_member(x, \"nazi_reichstag\")))",
                [
                    "is_politician(\"heinrich_scmidt\")  &  is_member(\"heinrich_scmidt\", \"nazi_german\") ",
                    "is_member(\"heinrich_scmidt\", \"prussian_state_parliament\")  &  is_member(\"heinrich_scmidt\", \"nazi_reichstag\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nheinrich_scmidt ::: represents heinrich scmidt\nnazi_german ::: represents nazi german\nprussian_state_parliament ::: represents the prussian state parliament\nnazi_reichstag ::: represents the nazi reichstag\nPredicates:\nis_politician(x) ::: x is a politician.\nis_member(x, y) ::: x is a member of y.\nPremises:\nis_politician(\"heinrich_scmidt\") \u2227 is_member(\"heinrich_scmidt\", \"nazi_german\") ::: Heinrich Scmidt was a Nazi German politician.\nis_member(\"heinrich_scmidt\", \"prussian_state_parliament\") \u2227 is_member(\"heinrich_scmidt\", \"nazi_reichstag\") ::: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nQuery:\n\u00ac\u2200x (is_politician(x) \u2192 \u00acis_member(x, \"nazi_reichstag\")) ::: No politicans are part of the Nazi Reichstag.",
            "problem": " Heinrich Scmidt was a Nazi German politician.  Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nNo politicans are part of the Nazi Reichstag."
        },
        {
            "example": 170,
            "response": [
                "is_severe_cancer(\"colorectal_cancer\")",
                [
                    "all x ((is_deadly_disease(x)  ->  has_low_survival_rate(x)) )",
                    "all x ((is_severe_cancer(x)  ->  is_deadly_disease(x)) )",
                    "is_severe_cancer(\"bile_duct_cancer\") ",
                    "all x ((is_cholangiocarcinoma(x)  ->  is_bile_duct_cancer(x)) )",
                    "all x ((has_mild_flu(x)  ->   -has_low_survival_rate(x)) )",
                    "(is_bile_duct_cancer(\"colorectal_cancer\")  &  has_low_survival_rate(\"colorectal_cancer\"))  ->   -is_bile_duct_cancer(\"colorectal_cancer\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\ndeadly_disease ::: represents a deadly disease\nsevere_cancer ::: represents a severe cancer\nbile_duct_cancer ::: represents bile duct cancer\ncholangiocarcinoma ::: represents cholangiocarcinoma\nmild_flu ::: represents mild flu\nlow_survival_rate ::: represents low survival rate\ncolorectal_cancer ::: represents colorectal cancer\nPredicates:\nis_deadly_disease(x) ::: x is a deadly disease.\nhas_low_survival_rate(x) ::: x has a low survival rate.\nis_severe_cancer(x) ::: x is a severe cancer.\nis_bile_duct_cancer(x) ::: x is a bile duct cancer.\nis_cholangiocarcinoma(x) ::: x is a cholangiocarcinoma.\nhas_mild_flu(x) ::: x has a mild flu.\nis_colorectal_cancer(x) ::: x is a colorectal cancer.\nPremises:\n\u2200x (is_deadly_disease(x) \u2192 has_low_survival_rate(x)) ::: If something is a deadly disease, then its survival rate is low.\n\u2200x (is_severe_cancer(x) \u2192 is_deadly_disease(x)) ::: All severe cancers are deadly diseases.\nis_severe_cancer(\"bile_duct_cancer\") ::: Bile duct cancer is a severe cancer.\n\u2200x (is_cholangiocarcinoma(x) \u2192 is_bile_duct_cancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.\n\u2200x (has_mild_flu(x) \u2192 \u00achas_low_survival_rate(x)) ::: No one with mild flu has a low survival rate.\n(is_bile_duct_cancer(\"colorectal_cancer\") \u2227 has_low_survival_rate(\"colorectal_cancer\")) \u2192 \u00acis_bile_duct_cancer(\"colorectal_cancer\") ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nQuery:\nis_severe_cancer(\"colorectal_cancer\") ::: Colorectal cancer is a severe cancer.",
            "problem": " If something is a deadly disease, then its survival rate is low.  All severe cancers are deadly diseases. Bile duct cancer is a severe cancer.  All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nColorectal cancer is a severe cancer"
        },
        {
            "example": 171,
            "response": [
                "((is_bile_duct_cancer(\"colorectal_cancer\")  |  is_cholangiocarcinoma(\"colorectal_cancer\"))  ->  (is_bile_duct_cancer(\"colorectal_cancer\")  &  is_mild_flu(\"colorectal_cancer\")))",
                [
                    "all x ((is_deadly_disease(x)  ->  has_low_survival_rate(x)) )",
                    "all x ((is_severe_cancer(x)  ->  is_deadly_disease(x)) )",
                    "is_severe_cancer(\"bile_duct_cancer\") ",
                    "all x ((is_cholangiocarcinoma(x)  ->  is_bile_duct_cancer(x)) )",
                    "all x ((is_mild_flu(x)  ->   -has_low_survival_rate(x)) )",
                    "(is_bile_duct_cancer(\"colorectal_cancer\")  &  has_low_survival_rate(\"colorectal_cancer\"))  ->   -is_bile_duct_cancer(\"colorectal_cancer\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\ndeadly_disease ::: represents a deadly disease\nsevere_cancer ::: represents a severe cancer\nbile_duct_cancer ::: represents bile duct cancer\ncholangiocarcinoma ::: represents cholangiocarcinoma\nmild_flu ::: represents mild flu\ncolorectal_cancer ::: represents colorectal cancer\nlow_survival_rate ::: represents low survival rate\nPredicates:\nis_deadly_disease(x) ::: x is a deadly disease.\nis_severe_cancer(x) ::: x is a severe cancer.\nis_bile_duct_cancer(x) ::: x is a bile duct cancer.\nis_cholangiocarcinoma(x) ::: x is a cholangiocarcinoma.\nhas_low_survival_rate(x) ::: x has a low survival rate.\nis_mild_flu(x) ::: x is a mild flu.\nPremises:\n\u2200x (is_deadly_disease(x) \u2192 has_low_survival_rate(x)) ::: If something is a deadly disease, then its survival rate is low.\n\u2200x (is_severe_cancer(x) \u2192 is_deadly_disease(x)) ::: All severe cancers are deadly diseases.\nis_severe_cancer(\"bile_duct_cancer\") ::: Bile duct cancer is a severe cancer.\n\u2200x (is_cholangiocarcinoma(x) \u2192 is_bile_duct_cancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.\n\u2200x (is_mild_flu(x) \u2192 \u00achas_low_survival_rate(x)) ::: No one with mild flu has a low survival rate.\n(is_bile_duct_cancer(\"colorectal_cancer\") \u2227 has_low_survival_rate(\"colorectal_cancer\")) \u2192 \u00acis_bile_duct_cancer(\"colorectal_cancer\") ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nQuery:\n((is_bile_duct_cancer(\"colorectal_cancer\") \u2228 is_cholangiocarcinoma(\"colorectal_cancer\")) \u2192 (is_bile_duct_cancer(\"colorectal_cancer\") \u2227 is_mild_flu(\"colorectal_cancer\"))) ::: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
            "problem": " If something is a deadly disease, then its survival rate is low.  All severe cancers are deadly diseases. Bile duct cancer is a severe cancer.  All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu."
        },
        {
            "example": 172,
            "response": [
                "( -is_mild_flu(\"colorectal_cancer\")  &  is_cholangiocarcinoma(\"colorectal_cancer\"))  ->  (is_bile_duct_cancer(\"colorectal_cancer\")  |  is_cholangiocarcinoma(\"colorectal_cancer\"))",
                [
                    "all x ((is_deadly_disease(x)  ->  has_low_survival_rate(x)) )",
                    "all x ((is_severe_cancer(x)  ->  is_deadly_disease(x)) )",
                    "is_severe_cancer(\"bile_duct_cancer\") ",
                    "all x ((is_cholangiocarcinoma(x)  ->  is_bile_duct_cancer(x)) )",
                    "all x ((is_mild_flu(x)  ->   -has_low_survival_rate(x)) )",
                    "(is_bile_duct_cancer(\"colorectal_cancer\")  &  has_low_survival_rate(\"colorectal_cancer\"))  ->   -is_bile_duct_cancer(\"colorectal_cancer\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\ndeadly_disease ::: represents a deadly disease\nsevere_cancer ::: represents a severe cancer\nbile_duct_cancer ::: represents a bile duct cancer\ncholangiocarcinoma ::: represents a cholangiocarcinoma\nmild_flu ::: represents a mild flu\nlow_survival_rate ::: represents a low survival rate\ncolorectal_cancer ::: represents a colorectal cancer\nPredicates:\nis_deadly_disease(x) ::: x is a deadly disease.\nis_severe_cancer(x) ::: x is a severe cancer.\nis_bile_duct_cancer(x) ::: x is a bile duct cancer.\nis_cholangiocarcinoma(x) ::: x is a cholangiocarcinoma.\nhas_low_survival_rate(x) ::: x has a low survival rate.\nis_mild_flu(x) ::: x is a mild flu.\nPremises:\n\u2200x (is_deadly_disease(x) \u2192 has_low_survival_rate(x)) ::: If something is a deadly disease, then its survival rate is low.\n\u2200x (is_severe_cancer(x) \u2192 is_deadly_disease(x)) ::: All severe cancers are deadly diseases.\nis_severe_cancer(\"bile_duct_cancer\") ::: Bile duct cancer is a severe cancer.\n\u2200x (is_cholangiocarcinoma(x) \u2192 is_bile_duct_cancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.\n\u2200x (is_mild_flu(x) \u2192 \u00achas_low_survival_rate(x)) ::: No one with mild flu has a low survival rate.\n(is_bile_duct_cancer(\"colorectal_cancer\") \u2227 has_low_survival_rate(\"colorectal_cancer\")) \u2192 \u00acis_bile_duct_cancer(\"colorectal_cancer\") ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nQuery:\n(\u00acis_mild_flu(\"colorectal_cancer\") \u2227 is_cholangiocarcinoma(\"colorectal_cancer\")) \u2192 (is_bile_duct_cancer(\"colorectal_cancer\") \u2228 is_cholangiocarcinoma(\"colorectal_cancer\")) ::: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
            "problem": " If something is a deadly disease, then its survival rate is low.  All severe cancers are deadly diseases. Bile duct cancer is a severe cancer.  All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma."
        },
        {
            "example": 173,
            "response": [
                "eat_salads_regularly(\"taylor\")",
                [
                    "all x ((eat_salads_regularly(x)  ->  is_health_conscious(x)) )",
                    "all x ((grew_up_in_health_conscious_home(x)  ->  eat_salads_regularly(x)) )",
                    "all x ((fulfill_nutritional_daily_intakes(x)  ->  grew_up_in_health_conscious_home(x)) )",
                    "all x ((have_good_relationship_with_parents(x)  ->  fulfill_nutritional_daily_intakes(x)) )",
                    "all x ((have_good_relationship_with_parents(x)  ->   -eat_salads_regularly(x)) )",
                    "all x ((visit_gym_once_a_day(x)  ->  fulfill_nutritional_daily_intakes(x)) )",
                    "((grew_up_in_health_conscious_home(\"taylor\")  &  have_good_relationship_with_parents(\"taylor\"))  |  ( -grew_up_in_health_conscious_home(\"taylor\")  &   -have_good_relationship_with_parents(\"taylor\"))) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\ntaylor ::: represents taylor\nPredicates:\neat_salads_regularly(x) ::: x eats salads regularly.\nis_health_conscious(x) ::: x is very conscious about their health and eating habits.\ngrew_up_in_health_conscious_home(x) ::: x grew up in a health-conscious childhood home.\nfulfill_nutritional_daily_intakes(x) ::: x fulfills their nutritional daily intakes.\nhave_good_relationship_with_parents(x) ::: x has a good relationship with their parents.\nvisit_gym_once_a_day(x) ::: x visits the gym at least once a day.\nPremises:\n\u2200x (eat_salads_regularly(x) \u2192 is_health_conscious(x)) ::: All people who eat salads regularly are very conscious about their health and eating habits.\n\u2200x (grew_up_in_health_conscious_home(x) \u2192 eat_salads_regularly(x)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.\n\u2200x (fulfill_nutritional_daily_intakes(x) \u2192 grew_up_in_health_conscious_home(x)) ::: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\n\u2200x (have_good_relationship_with_parents(x) \u2192 fulfill_nutritional_daily_intakes(x)) ::: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\n\u2200x (have_good_relationship_with_parents(x) \u2192 \u00aceat_salads_regularly(x)) ::: If people have good relationships with their parents, then they do not eat salads regularly.\n\u2200x (visit_gym_once_a_day(x) \u2192 fulfill_nutritional_daily_intakes(x)) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n((grew_up_in_health_conscious_home(\"taylor\") \u2227 have_good_relationship_with_parents(\"taylor\")) \u2228 (\u00acgrew_up_in_health_conscious_home(\"taylor\") \u2227 \u00achave_good_relationship_with_parents(\"taylor\"))) ::: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\nQuery:\neat_salads_regularly(\"taylor\") ::: Taylor eats salads regularly.",
            "problem": " All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTaylor eats salads regularly."
        },
        {
            "example": 174,
            "response": [
                "visit_gym_once_a_day(\"taylor\")",
                [
                    "all x ((eat_salads_regularly(x)  ->  conscious_about_health_and_eating_habits(x)) )",
                    "all x ((grew_up_in_health_conscious_home(x)  ->  eat_salads_regularly(x)) )",
                    "all x ((fulfill_nutritional_daily_intakes(x)  ->  grew_up_in_health_conscious_home(x)) )",
                    "all x ((have_good_relationship_with_parents(x)  ->  fulfill_nutritional_daily_intakes(x)) )",
                    "all x ((have_good_relationship_with_parents(x)  ->   -eat_salads_regularly(x)) )",
                    "all x ((visit_gym_once_a_day(x)  ->  fulfill_nutritional_daily_intakes(x)) )",
                    "((grew_up_in_health_conscious_home(\"taylor\")  &  have_good_relationship_with_parents(\"taylor\"))  |  ( -grew_up_in_health_conscious_home(\"taylor\")  &   -have_good_relationship_with_parents(\"taylor\"))) "
                ]
            ],
            "label": "False",
            "text": "Constants:\ntaylor ::: represents taylor\nPredicates:\neat_salads_regularly(x) ::: x eats salads regularly.\nconscious_about_health_and_eating_habits(x) ::: x is very conscious about their health and eating habits.\ngrew_up_in_health_conscious_home(x) ::: x grew up in a health-conscious childhood home.\nfulfill_nutritional_daily_intakes(x) ::: x fulfills their nutritional daily intakes.\nhave_good_relationship_with_parents(x) ::: x has a good relationship with their parents.\nvisit_gym_once_a_day(x) ::: x visits the gym at least once a day.\nPremises:\n\u2200x (eat_salads_regularly(x) \u2192 conscious_about_health_and_eating_habits(x)) ::: All people who eat salads regularly are very conscious about their health and eating habits.\n\u2200x (grew_up_in_health_conscious_home(x) \u2192 eat_salads_regularly(x)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.\n\u2200x (fulfill_nutritional_daily_intakes(x) \u2192 grew_up_in_health_conscious_home(x)) ::: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\n\u2200x (have_good_relationship_with_parents(x) \u2192 fulfill_nutritional_daily_intakes(x)) ::: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\n\u2200x (have_good_relationship_with_parents(x) \u2192 \u00aceat_salads_regularly(x)) ::: If people have good relationships with their parents, then they do not eat salads regularly.\n\u2200x (visit_gym_once_a_day(x) \u2192 fulfill_nutritional_daily_intakes(x)) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n((grew_up_in_health_conscious_home(\"taylor\") \u2227 have_good_relationship_with_parents(\"taylor\")) \u2228 (\u00acgrew_up_in_health_conscious_home(\"taylor\") \u2227 \u00achave_good_relationship_with_parents(\"taylor\"))) ::: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\nQuery:\nvisit_gym_once_a_day(\"taylor\") ::: Taylor visits the gym at least once a day.",
            "problem": " All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTaylor visits the gym at least once a day."
        },
        {
            "example": 175,
            "response": [
                " -grew_up_in_health_conscious_home(\"taylor\")  &   -visit_gym_daily(\"taylor\")",
                [
                    "all x ((eat_salads_regularly(x)  ->  conscious_about_health(x)) )",
                    "all x ((grew_up_in_health_conscious_home(x)  ->  eat_salads_regularly(x)) )",
                    "all x ((fulfill_nutritional_daily_intakes(x)  ->  grew_up_in_health_conscious_home(x)) )",
                    "all x ((good_relationship_with_parents(x)  ->  fulfill_nutritional_daily_intakes(x)) )",
                    "all x ((good_relationship_with_parents(x)  ->   -eat_salads_regularly(x)) )",
                    "all x ((visit_gym_daily(x)  ->  fulfill_nutritional_daily_intakes(x)) )",
                    "((grew_up_in_health_conscious_home(\"taylor\")  &  good_relationship_with_parents(\"taylor\"))  |  ( -grew_up_in_health_conscious_home(\"taylor\")  &   -good_relationship_with_parents(\"taylor\"))) "
                ]
            ],
            "label": "True",
            "text": "Constants:\ntaylor ::: represents taylor\nPredicates:\neat_salads_regularly(x) ::: x eats salads regularly.\nconscious_about_health(x) ::: x is very conscious about their health and eating habits.\ngrew_up_in_health_conscious_home(x) ::: x grew up in health-conscious childhood homes.\nfulfill_nutritional_daily_intakes(x) ::: x fulfills their nutritional daily intakes.\ngood_relationship_with_parents(x) ::: x has good relationships with their parents.\nvisit_gym_daily(x) ::: x visits the gym at least once a day.\nPremises:\n\u2200x (eat_salads_regularly(x) \u2192 conscious_about_health(x)) ::: All people who eat salads regularly are very conscious about their health and eating habits.\n\u2200x (grew_up_in_health_conscious_home(x) \u2192 eat_salads_regularly(x)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.\n\u2200x (fulfill_nutritional_daily_intakes(x) \u2192 grew_up_in_health_conscious_home(x)) ::: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\n\u2200x (good_relationship_with_parents(x) \u2192 fulfill_nutritional_daily_intakes(x)) ::: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\n\u2200x (good_relationship_with_parents(x) \u2192 \u00aceat_salads_regularly(x)) ::: If people have good relationships with their parents, then they do not eat salads regularly.\n\u2200x (visit_gym_daily(x) \u2192 fulfill_nutritional_daily_intakes(x)) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n((grew_up_in_health_conscious_home(\"taylor\") \u2227 good_relationship_with_parents(\"taylor\")) \u2228 (\u00acgrew_up_in_health_conscious_home(\"taylor\") \u2227 \u00acgood_relationship_with_parents(\"taylor\"))) ::: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\nQuery:\n\u00acgrew_up_in_health_conscious_home(\"taylor\") \u2227 \u00acvisit_gym_daily(\"taylor\") ::: Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
            "problem": " All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTaylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day."
        },
        {
            "example": 176,
            "response": [
                "is_sporting_event(\"world_championships\")",
                [
                    "is_sporting_event(\"olympic_games\") ",
                    "was_in(\"olympic_games\", \"tokyo\") ",
                    "won_most_medals(\"united_states\", \"tokyo\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nolympic_games ::: represents the Olympic games\ntokyo ::: represents Tokyo\nunited_states ::: represents the United States\nworld_championships ::: represents the world championships\nPredicates:\nis_sporting_event(x) ::: x is a sporting event.\nwas_in(x, y) ::: x was in y.\nwon_most_medals(x, y) ::: x won the most medals in y.\nPremises:\nis_sporting_event(\"olympic_games\") ::: The Olympic games is a sporting event.\nwas_in(\"olympic_games\", \"tokyo\") ::: The last Olympic games was in Tokyo.\nwon_most_medals(\"united_states\", \"tokyo\") ::: The United States won the most medals in Tokyo.\nQuery:\nis_sporting_event(\"world_championships\") ::: The world championships is a sporting event.",
            "problem": " [BG] The Olympic games is a sporting event.  The last Olympic games was in Tokyo. The United States won the most medals in Tokyo. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThe world championships is a sporting event."
        },
        {
            "example": 177,
            "response": [
                " -was_in(\"olympic_games\", \"tokyo\")",
                [
                    "is_sporting_event(\"olympic_games\") ",
                    "was_in(\"olympic_games\", \"tokyo\") ",
                    "won_most_medals(\"united_states\", \"tokyo\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nolympic_games ::: represents the Olympic games\ntokyo ::: represents Tokyo\nunited_states ::: represents the United States\nPredicates:\nis_sporting_event(x) ::: x is a sporting event.\nwas_in(x, y) ::: x was in y.\nwon_most_medals(x, y) ::: x won the most medals in y.\nPremises:\nis_sporting_event(\"olympic_games\") ::: The Olympic games is a sporting event.\nwas_in(\"olympic_games\", \"tokyo\") ::: The last Olympic games was in Tokyo.\nwon_most_medals(\"united_states\", \"tokyo\") ::: The United States won the most medals in Tokyo.\nQuery:\n\u00acwas_in(\"olympic_games\", \"tokyo\") ::: The last Olympic games were not in Tokyo.",
            "problem": " [BG] The Olympic games is a sporting event.  The last Olympic games was in Tokyo. The United States won the most medals in Tokyo. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThe last Olympic games were not in Tokyo."
        },
        {
            "example": 178,
            "response": [
                "won_most_medals(\"united_states\", \"olympic_games\")",
                [
                    "is_sporting_event(\"olympic_games\") ",
                    "was_in(\"olympic_games\", \"tokyo\") ",
                    "won_most_medals(\"united_states\", \"tokyo\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nolympic_games ::: represents the Olympic games\ntokyo ::: represents Tokyo\nunited_states ::: represents the United States\nPredicates:\nis_sporting_event(x) ::: x is a sporting event.\nwas_in(x, y) ::: x was in y.\nwon_most_medals(x, y) ::: x won the most medals in y.\nPremises:\nis_sporting_event(\"olympic_games\") ::: The Olympic games is a sporting event.\nwas_in(\"olympic_games\", \"tokyo\") ::: The last Olympic games was in Tokyo.\nwon_most_medals(\"united_states\", \"tokyo\") ::: The United States won the most medals in Tokyo.\nQuery:\nwon_most_medals(\"united_states\", \"olympic_games\") ::: The United States won the most medals in the last Olympic games.",
            "problem": " [BG] The Olympic games is a sporting event.  The last Olympic games was in Tokyo. The United States won the most medals in Tokyo. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThe United States won the most medals in the last Olympic games."
        },
        {
            "example": 179,
            "response": [
                "exists x ((is_human(x)  &  is_horse(x)))",
                [
                    "all x ((is_horse(x)  ->  has_hooves(x)) )",
                    "all x ((is_human(x)  ->   -has_hooves(x)) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\nhorse ::: represents a horse\nhuman ::: represents a human\nPredicates:\nhas_hooves(x) ::: x has hooves.\nis_horse(x) ::: x is a horse.\nis_human(x) ::: x is a human.\nPremises:\n\u2200x (is_horse(x) \u2192 has_hooves(x)) ::: All horses have hooves.\n\u2200x (is_human(x) \u2192 \u00achas_hooves(x)) ::: No humans have hooves.\nQuery:\n\u2203x (is_human(x) \u2227 is_horse(x)) ::: Some humans are horses.",
            "problem": " All horses have hooves. No humans have hooves.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSome humans are horses."
        },
        {
            "example": 180,
            "response": [
                "flies_from(\"susan\", \"lga_airport\")",
                [
                    "flies_to(\"susan\", \"lga_airport\") ",
                    " all x  all y  all z ((flies_to(x, y)  &  flies_from(x, z))  ->   -is_same(y, z)) ",
                    "flies_from(\"john\", \"lga_airport\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nsusan ::: represents susan\nlga_airport ::: represents LGA airport\njohn ::: represents john\nPredicates:\nflies_to(x, y) ::: x flies to y.\nflies_from(x, y) ::: x flies from y.\nis_same(x, y) ::: x is the same as y.\nPremises:\nflies_to(\"susan\", \"lga_airport\") ::: Susan flies to LGA airport.\n\u2200x \u2200y \u2200z ((flies_to(x, y) \u2227 flies_from(x, z)) \u2192 \u00acis_same(y, z)) ::: The departure and arrival can not be the same airport.\nflies_from(\"john\", \"lga_airport\") ::: John flies from LGA airport.\nQuery:\nflies_from(\"susan\", \"lga_airport\") ::: Susan flies from LGA airport.",
            "problem": " Susan flies to LGA airport. The departure and arrival can not be the same airport. John flies from LGA airport.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSusan flies from LGA airport."
        },
        {
            "example": 181,
            "response": [
                "flies_to(\"john\", \"lga_airport\")",
                [
                    "flies_to(\"susan\", \"lga_airport\") ",
                    " all x  all y  all z ((flies_to(x, y)  &  flies_from(x, z))  ->   -is_same(y, z)) ",
                    "flies_from(\"john\", \"lga_airport\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nsusan ::: represents Susan\njohn ::: represents John\nlga_airport ::: represents LGA airport\nPredicates:\nflies_to(x, y) ::: x flies to y.\nflies_from(x, y) ::: x flies from y.\nis_same(x, y) ::: x is the same as y.\nPremises:\nflies_to(\"susan\", \"lga_airport\") ::: Susan flies to LGA airport.\n\u2200x \u2200y \u2200z ((flies_to(x, y) \u2227 flies_from(x, z)) \u2192 \u00acis_same(y, z)) ::: The departure and arrival can not be the same airport.\nflies_from(\"john\", \"lga_airport\") ::: John flies from LGA airport.\nQuery:\nflies_to(\"john\", \"lga_airport\") ::: John flies to LGA airport.",
            "problem": " Susan flies to LGA airport. The departure and arrival can not be the same airport. John flies from LGA airport.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJohn flies to LGA airport."
        },
        {
            "example": 182,
            "response": [
                "is_grumpy(\"tom\")",
                [
                    "all x ((is_nice_to_animals(x)  ->   -is_mean_to_animals(x)) )",
                    "exists x ((is_grumpy(x)  &  is_mean_to_animals(x)) )",
                    "all x ((is_animal_lover(x)  ->  is_nice_to_animals(x)) )",
                    "all x ((owns_pet(x)  ->  is_animal_lover(x)) )",
                    "is_pet_owner(\"tom\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\ntom ::: represents tom\nPredicates:\nis_nice_to_animals(x) ::: x is nice to animals.\nis_mean_to_animals(x) ::: x is mean to animals.\nis_grumpy(x) ::: x is a grumpy person.\nis_animal_lover(x) ::: x is an animal lover.\nowns_pet(x) ::: x owns a pet.\nis_pet_owner(x) ::: x is a pet owner.\nPremises:\n\u2200x (is_nice_to_animals(x) \u2192 \u00acis_mean_to_animals(x)) ::: No one nice to animals is mean to animals.\n\u2203x (is_grumpy(x) \u2227 is_mean_to_animals(x)) ::: Some grumpy people are mean to animals.\n\u2200x (is_animal_lover(x) \u2192 is_nice_to_animals(x)) ::: All animal lovers are nice to animals.\n\u2200x (owns_pet(x) \u2192 is_animal_lover(x)) ::: If someone owns a pet, then they love animals.\nis_pet_owner(\"tom\") ::: Tom is a pet owner.\nQuery:\nis_grumpy(\"tom\") ::: Tom is a grumpy person.",
            "problem": " No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTom is a grumpy person."
        },
        {
            "example": 183,
            "response": [
                " -(is_grumpy(\"tom\")  &  is_mean_to_animals(\"tom\"))",
                [
                    "all x ((is_nice_to_animals(x)  ->   -is_mean_to_animals(x)) )",
                    "exists x ((is_grumpy(x)  &  is_mean_to_animals(x)) )",
                    "all x ((is_animal_lover(x)  ->  is_nice_to_animals(x)) )",
                    "all x ((owns_pet(x)  ->  is_animal_lover(x)) )",
                    "is_pet_owner(\"tom\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\ntom ::: represents tom\nPredicates:\nis_nice_to_animals(x) ::: x is nice to animals.\nis_mean_to_animals(x) ::: x is mean to animals.\nis_grumpy(x) ::: x is a grumpy person.\nis_animal_lover(x) ::: x is an animal lover.\nowns_pet(x) ::: x owns a pet.\nis_pet_owner(x) ::: x is a pet owner.\nPremises:\n\u2200x (is_nice_to_animals(x) \u2192 \u00acis_mean_to_animals(x)) ::: No one nice to animals is mean to animals.\n\u2203x (is_grumpy(x) \u2227 is_mean_to_animals(x)) ::: Some grumpy people are mean to animals.\n\u2200x (is_animal_lover(x) \u2192 is_nice_to_animals(x)) ::: All animal lovers are nice to animals.\n\u2200x (owns_pet(x) \u2192 is_animal_lover(x)) ::: If someone owns a pet, then they love animals.\nis_pet_owner(\"tom\") ::: Tom is a pet owner.\nQuery:\n\u00ac(is_grumpy(\"tom\") \u2227 is_mean_to_animals(\"tom\")) ::: Tom is not a grumpy person and mean to animals.",
            "problem": " No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTom is not a grumpy person and mean to animals."
        },
        {
            "example": 184,
            "response": [
                " -(is_grumpy(\"tom\")  &  is_mean_to_animals(\"tom\"))  ->  (( -is_grumpy(\"tom\")  &   -is_animal_lover(\"tom\"))  |  (is_grumpy(\"tom\")  &  is_animal_lover(\"tom\")))",
                [
                    "all x ((is_nice_to_animals(x)  ->   -is_mean_to_animals(x)) )",
                    "exists x ((is_grumpy(x)  &  is_mean_to_animals(x)) )",
                    "all x ((is_animal_lover(x)  ->  is_nice_to_animals(x)) )",
                    "all x ((owns_pet(x)  ->  is_animal_lover(x)) )",
                    "owns_pet(\"tom\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\ntom ::: represents tom\nPredicates:\nis_nice_to_animals(x) ::: x is nice to animals.\nis_mean_to_animals(x) ::: x is mean to animals.\nis_grumpy(x) ::: x is a grumpy person.\nis_animal_lover(x) ::: x is an animal lover.\nowns_pet(x) ::: x owns a pet.\nPremises:\n\u2200x (is_nice_to_animals(x) \u2192 \u00acis_mean_to_animals(x)) ::: No one nice to animals is mean to animals.\n\u2203x (is_grumpy(x) \u2227 is_mean_to_animals(x)) ::: Some grumpy people are mean to animals.\n\u2200x (is_animal_lover(x) \u2192 is_nice_to_animals(x)) ::: All animal lovers are nice to animals.\n\u2200x (owns_pet(x) \u2192 is_animal_lover(x)) ::: If someone owns a pet, then they love animals.\nowns_pet(\"tom\") ::: Tom is a pet owner.\nQuery:\n\u00ac(is_grumpy(\"tom\") \u2227 is_mean_to_animals(\"tom\")) \u2192 ((\u00acis_grumpy(\"tom\") \u2227 \u00acis_animal_lover(\"tom\")) \u2228 (is_grumpy(\"tom\") \u2227 is_animal_lover(\"tom\"))) ::: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.",
            "problem": " No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover."
        },
        {
            "example": 185,
            "response": [
                "is_novel_writer(\"dani_shapiro\")",
                [
                    " -is_novel(\"family_secrets\") ",
                    "all x ((is_born_in(x, \"american_city\")  ->  is_american(x)) )",
                    " all x  all y ((is_book(x)  &  is_novel(x)  &  is_written_by(x, y))  ->  is_novel_writer(y)) ",
                    "is_american(\"dani_shapiro\")  &  is_writer(\"dani_shapiro\") ",
                    "is_written_by(\"family_history\", \"dani_shapiro\") ",
                    "is_book(\"family_history\")  &  is_novel(\"family_history\")  &  publishes(\"family_history\", \"year_2003\") ",
                    "created(\"dani_shapiro\", \"family_secrets\") ",
                    "is_born_in(\"boston\", \"american_city\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\ndani_shapiro ::: represents dani shapiro\nfamily_history ::: represents the book family history\nfamily_secrets ::: represents the podcast family secrets\namerican_city ::: represents an American city\nboston ::: represents Boston\nyear_2003 ::: represents the year 2003\nPredicates:\nis_podcast(x) ::: x is a podcast.\nis_novel(x) ::: x is a novel.\nis_born_in(x, y) ::: x is born in y.\nis_american(x) ::: x is American.\nis_book(x) ::: x is a book.\nis_written_by(x, y) ::: x is written by y.\nis_novel_writer(x) ::: x is a novel writer.\nis_writer(x) ::: x is a writer.\ncreated(x, y) ::: x created y.\nPremises:\n\u00acis_novel(\"family_secrets\") ::: A podcast is not a novel.\n\u2200x (is_born_in(x, \"american_city\") \u2192 is_american(x)) ::: If a person is born in American City, the person is American.\n\u2200x \u2200y ((is_book(x) \u2227 is_novel(x) \u2227 is_written_by(x, y)) \u2192 is_novel_writer(y)) ::: If a book is novel and it is written by a person, then the person is a novel writer.\nis_american(\"dani_shapiro\") \u2227 is_writer(\"dani_shapiro\") ::: Dani Shapiro is an American writer.\nis_written_by(\"family_history\", \"dani_shapiro\") ::: Family History is written by Dani Shapiro.\nis_book(\"family_history\") \u2227 is_novel(\"family_history\") \u2227 publishes(\"family_history\", \"year_2003\") ::: Family History is a novel written in 2003.\ncreated(\"dani_shapiro\", \"family_secrets\") ::: Dani Shapiro created a podcast called Family Secrets.\nis_born_in(\"boston\", \"american_city\") ::: Boston is an American city.\nQuery:\nis_novel_writer(\"dani_shapiro\") ::: Dani Shapiro is a novel writer.",
            "problem": " A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDani Shapiro is a novel writer."
        },
        {
            "example": 186,
            "response": [
                "is_novel(\"family_secrets\")",
                [
                    " -is_novel(\"family_secrets\") ",
                    "all x ((is_born_in(x, \"american_city\")  ->  is_american(x)) )",
                    " all x  all y ((is_book(x)  &  is_novel(x)  &  is_written_by(x, y))  ->  is_novel_writer(y)) ",
                    "is_american(\"dani_shapiro\")  &  is_writer(\"dani_shapiro\") ",
                    "is_written_by(\"family_history\", \"dani_shapiro\") ",
                    "is_book(\"family_history\")  &  is_novel(\"family_history\")  &  is_written_by(\"family_history\", \"dani_shapiro\")  &  publishes(\"family_history\", \"year_2003\") ",
                    "created(\"dani_shapiro\", \"family_secrets\") ",
                    "is_born_in(\"boston\", \"american_city\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\ndani_shapiro ::: represents Dani Shapiro\nfamily_history ::: represents the book Family History\nfamily_secrets ::: represents the podcast Family Secrets\namerican_city ::: represents an American city\nboston ::: represents Boston\nyear_2003 ::: represents the year 2003\nPredicates:\nis_podcast(x) ::: x is a podcast.\nis_novel(x) ::: x is a novel.\nis_born_in(x, y) ::: x is born in y.\nis_american(x) ::: x is American.\nis_book(x) ::: x is a book.\nis_written_by(x, y) ::: x is written by y.\nis_novel_writer(x) ::: x is a novel writer.\nis_writer(x) ::: x is a writer.\ncreated(x, y) ::: x created y.\nPremises:\n\u00acis_novel(\"family_secrets\") ::: A podcast is not a novel.\n\u2200x (is_born_in(x, \"american_city\") \u2192 is_american(x)) ::: If a person is born in American City, the person is American.\n\u2200x \u2200y ((is_book(x) \u2227 is_novel(x) \u2227 is_written_by(x, y)) \u2192 is_novel_writer(y)) ::: If a book is novel and it is written by a person, then the person is a novel writer.\nis_american(\"dani_shapiro\") \u2227 is_writer(\"dani_shapiro\") ::: Dani Shapiro is an American writer.\nis_written_by(\"family_history\", \"dani_shapiro\") ::: Family History is written by Dani Shapiro.\nis_book(\"family_history\") \u2227 is_novel(\"family_history\") \u2227 is_written_by(\"family_history\", \"dani_shapiro\") \u2227 publishes(\"family_history\", \"year_2003\") ::: Family History is a novel written in 2003.\ncreated(\"dani_shapiro\", \"family_secrets\") ::: Dani Shapiro created a podcast called Family Secrets.\nis_born_in(\"boston\", \"american_city\") ::: Boston is an American city.\nQuery:\nis_novel(\"family_secrets\") ::: Family Secrets is a novel.",
            "problem": " A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nFamily Secrets is a novel."
        },
        {
            "example": 187,
            "response": [
                "is_born_in(\"dani_shapiro\", \"boston\")",
                [
                    " -is_novel(\"family_secrets\") ",
                    "all x ((is_born_in(x, \"american_city\")  ->  is_american(x)) )",
                    " all x  all y ((is_book(x)  &  is_novel(x)  &  is_written_by(x, y))  ->  is_novel_writer(y)) ",
                    "is_american(\"dani_shapiro\")  &  is_writer(\"dani_shapiro\") ",
                    "is_book(\"family_history\")  &  is_written_by(\"family_history\", \"dani_shapiro\") ",
                    "is_book(\"family_history\")  &  is_novel(\"family_history\")  &  publishes(\"family_history\", \"year_2003\") ",
                    "created(\"dani_shapiro\", \"family_secrets\") ",
                    "is_born_in(\"boston\", \"american_city\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\ndani_shapiro ::: represents Dani Shapiro\nfamily_history ::: represents the book Family History\nfamily_secrets ::: represents the podcast Family Secrets\namerican_city ::: represents an American city\nboston ::: represents the city Boston\nyear_2003 ::: represents the year 2003\nPredicates:\nis_podcast(x) ::: x is a podcast.\nis_novel(x) ::: x is a novel.\nis_born_in(x, y) ::: x is born in y.\nis_american(x) ::: x is American.\nis_book(x) ::: x is a book.\nis_written_by(x, y) ::: x is written by y.\nis_novel_writer(x) ::: x is a novel writer.\nis_writer(x) ::: x is a writer.\ncreated(x, y) ::: x created y.\nPremises:\n\u00acis_novel(\"family_secrets\") ::: A podcast is not a novel.\n\u2200x (is_born_in(x, \"american_city\") \u2192 is_american(x)) ::: If a person is born in American City, the person is American.\n\u2200x \u2200y ((is_book(x) \u2227 is_novel(x) \u2227 is_written_by(x, y)) \u2192 is_novel_writer(y)) ::: If a book is novel and it is written by a person, then the person is a novel writer.\nis_american(\"dani_shapiro\") \u2227 is_writer(\"dani_shapiro\") ::: Dani Shapiro is an American writer.\nis_book(\"family_history\") \u2227 is_written_by(\"family_history\", \"dani_shapiro\") ::: Family History is written by Dani Shapiro.\nis_book(\"family_history\") \u2227 is_novel(\"family_history\") \u2227 publishes(\"family_history\", \"year_2003\") ::: Family History is a novel written in 2003.\ncreated(\"dani_shapiro\", \"family_secrets\") ::: Dani Shapiro created a podcast called Family Secrets.\nis_born_in(\"boston\", \"american_city\") ::: Boston is an American city.\nQuery:\nis_born_in(\"dani_shapiro\", \"boston\") ::: Dani Shapiro was born in Boston.",
            "problem": " A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDani Shapiro was born in Boston."
        },
        {
            "example": 188,
            "response": [
                "is_american(\"yuri\")",
                [
                    "exists x ((is_basketball_player(x)  &   -is_american(x)) )",
                    " all x (is_basketball_player(x)  ->  is_tall(x)) ",
                    " all x (is_tall(x)  ->  wear_large_shoes(x)) ",
                    "all x ((wear_large_shoes(x)  ->  wear_large_clothes(x)) )",
                    " -wear_large_clothes(\"yuri\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nyuri ::: represents yuri\nPredicates:\nis_basketball_player(x) ::: x is a basketball player.\nis_american(x) ::: x is an American.\nis_tall(x) ::: x is tall.\nwear_large_shoes(x) ::: x wears large shoes.\nwear_large_clothes(x) ::: x wears large-sized clothes.\nPremises:\n\u2203x (is_basketball_player(x) \u2227 \u00acis_american(x)) ::: Some basketball players are not American.\n\u2200x (is_basketball_player(x) \u2192 is_tall(x)) ::: All basketball players are tall.\n\u2200x (is_tall(x) \u2192 wear_large_shoes(x)) ::: If someone is tall, they wear large shoes.\n\u2200x (wear_large_shoes(x) \u2192 wear_large_clothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n\u00acwear_large_clothes(\"yuri\") ::: Yuri does not wear large-size clothes.\nQuery:\nis_american(\"yuri\") ::: Yuri is an American.",
            "problem": " Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nYuri is an American."
        },
        {
            "example": 189,
            "response": [
                " -is_american(\"yuri\")  &  is_basketball_player(\"yuri\")",
                [
                    "exists x ((is_basketball_player(x)  &   -is_american(x)) )",
                    " all x (is_basketball_player(x)  ->  is_tall(x)) ",
                    " all x (is_tall(x)  ->  wear_large_shoes(x)) ",
                    "all x ((wear_large_shoes(x)  ->  wear_large_clothes(x)) )",
                    " -wear_large_clothes(\"yuri\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nyuri ::: represents yuri\nPredicates:\nis_basketball_player(x) ::: x is a basketball player.\nis_american(x) ::: x is an American.\nis_tall(x) ::: x is tall.\nwear_large_shoes(x) ::: x wears large shoes.\nwear_large_clothes(x) ::: x wears large-sized clothes.\nPremises:\n\u2203x (is_basketball_player(x) \u2227 \u00acis_american(x)) ::: Some basketball players are not American.\n\u2200x (is_basketball_player(x) \u2192 is_tall(x)) ::: All basketball players are tall.\n\u2200x (is_tall(x) \u2192 wear_large_shoes(x)) ::: If someone is tall, they wear large shoes.\n\u2200x (wear_large_shoes(x) \u2192 wear_large_clothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n\u00acwear_large_clothes(\"yuri\") ::: Yuri does not wear large-size clothes.\nQuery:\n\u00acis_american(\"yuri\") \u2227 is_basketball_player(\"yuri\") ::: Yuri is not an American basketball player.",
            "problem": " Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nYuri is not an American basketball player."
        },
        {
            "example": 190,
            "response": [
                "is_american(\"yuri\")  &  is_basketball_player(\"yuri\")",
                [
                    "exists x ((is_basketball_player(x)  &   -is_american(x)) )",
                    " all x (is_basketball_player(x)  ->  is_tall(x)) ",
                    " all x (is_tall(x)  ->  wear_large_shoes(x)) ",
                    "all x ((wear_large_shoes(x)  ->  wear_large_clothes(x)) )",
                    " -wear_large_clothes(\"yuri\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nyuri ::: represents Yuri\nPredicates:\nis_basketball_player(x) ::: x is a basketball player.\nis_american(x) ::: x is an American.\nis_tall(x) ::: x is tall.\nwear_large_shoes(x) ::: x wears large shoes.\nwear_large_clothes(x) ::: x wears large-sized clothes.\nPremises:\n\u2203x (is_basketball_player(x) \u2227 \u00acis_american(x)) ::: Some basketball players are not American.\n\u2200x (is_basketball_player(x) \u2192 is_tall(x)) ::: All basketball players are tall.\n\u2200x (is_tall(x) \u2192 wear_large_shoes(x)) ::: If someone is tall, they wear large shoes.\n\u2200x (wear_large_shoes(x) \u2192 wear_large_clothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n\u00acwear_large_clothes(\"yuri\") ::: Yuri does not wear large-size clothes.\nQuery:\nis_american(\"yuri\") \u2227 is_basketball_player(\"yuri\") ::: Yuri is an American basketball player.",
            "problem": " Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nYuri is an American basketball player."
        },
        {
            "example": 191,
            "response": [
                " -wear_large_shoes(\"yuri\")  ->  (is_basketball_player(\"yuri\")  &  is_american(\"yuri\"))",
                [
                    "exists x ((is_basketball_player(x)  &   -is_american(x)) )",
                    " all x (is_basketball_player(x)  ->  is_tall(x)) ",
                    " all x (is_tall(x)  ->  wear_large_shoes(x)) ",
                    "all x ((wear_large_shoes(x)  ->  wear_large_clothes(x)) )",
                    " -wear_large_clothes(\"yuri\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nyuri ::: represents yuri\nPredicates:\nis_basketball_player(x) ::: x is a basketball player.\nis_american(x) ::: x is an American.\nis_tall(x) ::: x is tall.\nwear_large_shoes(x) ::: x wears large shoes.\nwear_large_clothes(x) ::: x wears large-sized clothes.\nPremises:\n\u2203x (is_basketball_player(x) \u2227 \u00acis_american(x)) ::: Some basketball players are not American.\n\u2200x (is_basketball_player(x) \u2192 is_tall(x)) ::: All basketball players are tall.\n\u2200x (is_tall(x) \u2192 wear_large_shoes(x)) ::: If someone is tall, they wear large shoes.\n\u2200x (wear_large_shoes(x) \u2192 wear_large_clothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n\u00acwear_large_clothes(\"yuri\") ::: Yuri does not wear large-size clothes.\nQuery:\n\u00acwear_large_shoes(\"yuri\") \u2192 (is_basketball_player(\"yuri\") \u2227 is_american(\"yuri\")) ::: If Yuri does not wear large shoes, then Yuri is an American basketball player.",
            "problem": " Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Yuri does not wear large shoes, then Yuri is an American basketball player."
        },
        {
            "example": 192,
            "response": [
                " -is_american(\"yuri\")  ->  is_basketball_player(\"yuri\")",
                [
                    "exists x ((is_basketball_player(x)  &   -is_american(x)) )",
                    " all x (is_basketball_player(x)  ->  is_tall(x)) ",
                    " all x (is_tall(x)  ->  wear_large_shoes(x)) ",
                    "all x ((wear_large_shoes(x)  ->  wear_large_clothes(x)) )",
                    " -wear_large_clothes(\"yuri\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nyuri ::: represents yuri\nPredicates:\nis_basketball_player(x) ::: x is a basketball player.\nis_american(x) ::: x is an American.\nis_tall(x) ::: x is tall.\nwear_large_shoes(x) ::: x wears large shoes.\nwear_large_clothes(x) ::: x wears large-sized clothes.\nPremises:\n\u2203x (is_basketball_player(x) \u2227 \u00acis_american(x)) ::: Some basketball players are not American.\n\u2200x (is_basketball_player(x) \u2192 is_tall(x)) ::: All basketball players are tall.\n\u2200x (is_tall(x) \u2192 wear_large_shoes(x)) ::: If someone is tall, they wear large shoes.\n\u2200x (wear_large_shoes(x) \u2192 wear_large_clothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n\u00acwear_large_clothes(\"yuri\") ::: Yuri does not wear large-size clothes.\nQuery:\n\u00acis_american(\"yuri\") \u2192 is_basketball_player(\"yuri\") ::: If Yuri is not an American basketball player, then Yuri is a basketball player.",
            "problem": " Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Yuri is not an American basketball player, then Yuri is a basketball player."
        },
        {
            "example": 193,
            "response": [
                "all x ((is_sad(x)))",
                [
                    "all x (((is_happy(x)  &   -is_sad(x))  |  ( -is_happy(x)  &  is_sad(x))) )",
                    "exists x ((is_happy(x)) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\nhappy_event ::: represents a happy event\nPredicates:\nis_happy(x) ::: x is a happy event.\nis_sad(x) ::: x is a sad event.\nPremises:\n\u2200x ((is_happy(x) \u2227 \u00acis_sad(x)) \u2228 (\u00acis_happy(x) \u2227 is_sad(x))) ::: Events are either happy or sad.\n\u2203x (is_happy(x)) ::: At least one event is happy.\nQuery:\n\u2200x (is_sad(x)) ::: All events are sad.",
            "problem": " Events are either happy or sad. At least one event is happy. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nAll events are sad."
        },
        {
            "example": 194,
            "response": [
                " -is_winner(\"steinhauer\", \"du_maurier_classic_1992\")",
                [
                    "is_winner(\"steinhauer\", \"du_maurier_classic_1992\") ",
                    "participated_in(\"steinhauer\", \"du_maurier_classic_1992\") ",
                    "exists x ((is_on_leaderboard(x, \"du_maurier_classic_1992\")  &  is_from(x, \"belgium\")) )",
                    "is_from(\"descampe\", \"belgium\")  &  is_on_leaderboard(\"descampe\", \"du_maurier_classic_1992\") ",
                    "all x ((is_on_leaderboard(x, \"du_maurier_classic_1992\")  ->  participated_in(x, \"du_maurier_classic_1992\")) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\nsteinhauer ::: represents steinhauer\ndu_maurier_classic_1992 ::: represents the 1992 du Maurier Classic\nbelgium ::: represents belgium\ndescampe ::: represents descampe\nPredicates:\nis_winner(x, y) ::: x is the winner of y.\nparticipated_in(x, y) ::: x participated in y.\nis_from(x, y) ::: x is from y.\nis_on_leaderboard(x, y) ::: x is on the leaderboard of y.\nPremises:\nis_winner(\"steinhauer\", \"du_maurier_classic_1992\") ::: The winner of the 1992 du Maurier Classic was Steinhauer.\nparticipated_in(\"steinhauer\", \"du_maurier_classic_1992\") ::: Steinhauer participated in the 1992 du Maurier Classic.\n\u2203x (is_on_leaderboard(x, \"du_maurier_classic_1992\") \u2227 is_from(x, \"belgium\")) ::: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nis_from(\"descampe\", \"belgium\") \u2227 is_on_leaderboard(\"descampe\", \"du_maurier_classic_1992\") ::: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\n\u2200x (is_on_leaderboard(x, \"du_maurier_classic_1992\") \u2192 participated_in(x, \"du_maurier_classic_1992\")) ::: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nQuery:\n\u00acis_winner(\"steinhauer\", \"du_maurier_classic_1992\") ::: Steinhauer was not the winner of the 1992 du Maurier Classic.",
            "problem": " The winner of the 1992 du Maurier Classic was Steinhauer. Steinhauer participated in the 1992 du Maurier Classic. There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium. Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic. All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSteinhauer was not the winner of the 1992 du Maurier Classic."
        },
        {
            "example": 195,
            "response": [
                "is_in_six_way_tie(\"descampe\")",
                [
                    "is_winner(\"steinhauer\", \"du_maurier_classic_1992\") ",
                    "participated_in(\"steinhauer\", \"du_maurier_classic_1992\") ",
                    "exists x ((is_in_six_way_tie(x)  &  is_from(x, \"belgium\")) )",
                    "is_from(\"descampe\", \"belgium\")  &  is_on_leaderboard(\"descampe\", \"du_maurier_classic_1992\") ",
                    "all x ((is_on_leaderboard(x, \"du_maurier_classic_1992\")  ->  participated_in(x, \"du_maurier_classic_1992\")) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nsteinhauer ::: represents Steinhauer\ndu_maurier_classic_1992 ::: represents the 1992 du Maurier Classic\nbelgium ::: represents Belgium\ndescampe ::: represents Descampe\nPredicates:\nis_winner(x, y) ::: x is the winner of y.\nparticipated_in(x, y) ::: x participated in y.\nis_from(x, y) ::: x is from y.\nis_on_leaderboard(x, y) ::: x is on the leaderboard of y.\nis_in_six_way_tie(x) ::: x is in the six-way tie.\nPremises:\nis_winner(\"steinhauer\", \"du_maurier_classic_1992\") ::: The winner of the 1992 du Maurier Classic was Steinhauer.\nparticipated_in(\"steinhauer\", \"du_maurier_classic_1992\") ::: Steinhauer participated in the 1992 du Maurier Classic.\n\u2203x (is_in_six_way_tie(x) \u2227 is_from(x, \"belgium\")) ::: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nis_from(\"descampe\", \"belgium\") \u2227 is_on_leaderboard(\"descampe\", \"du_maurier_classic_1992\") ::: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\n\u2200x (is_on_leaderboard(x, \"du_maurier_classic_1992\") \u2192 participated_in(x, \"du_maurier_classic_1992\")) ::: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nQuery:\nis_in_six_way_tie(\"descampe\") ::: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
            "problem": " The winner of the 1992 du Maurier Classic was Steinhauer. Steinhauer participated in the 1992 du Maurier Classic. There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium. Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic. All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic."
        },
        {
            "example": 196,
            "response": [
                "is_terricolous(\"kiki\")",
                [
                    "all x ((barks(x)  ->   -likes(\"jane\", x)) )",
                    "all x ((is_dog(x)  ->  (is_animal(x)  &  barks(x))) )",
                    "all x ((jumps(x)  ->  likes(\"jane\", x)) )",
                    "all x ((has_legs(x)  ->  jumps(x)) )",
                    "all x ((is_terricolous(x)  ->  has_legs(x)) )",
                    "(( -jumps(\"kiki\")  &   -has_legs(\"kiki\"))  ->  (is_terricolous(\"kiki\")  |  has_legs(\"kiki\"))) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\njane ::: represents jane\nkiki ::: represents kiki\nPredicates:\nbarks(x) ::: x barks.\nlikes(x, y) ::: x likes y.\nis_dog(x) ::: x is a dog.\nis_animal(x) ::: x is an animal.\njumps(x) ::: x jumps.\nhas_legs(x) ::: x has legs.\nis_terricolous(x) ::: x is terricolous.\nPremises:\n\u2200x (barks(x) \u2192 \u00aclikes(\"jane\", x)) ::: If an animal barks, then Jane does not like it.\n\u2200x (is_dog(x) \u2192 (is_animal(x) \u2227 barks(x))) ::: All dogs are animals that bark.\n\u2200x (jumps(x) \u2192 likes(\"jane\", x)) ::: If an animal jumps, then Jane likes it.\n\u2200x (has_legs(x) \u2192 jumps(x)) ::: If an animal has legs, then it jumps.\n\u2200x (is_terricolous(x) \u2192 has_legs(x)) ::: If an animal is terricolous, then it has legs.\n((\u00acjumps(\"kiki\") \u2227 \u00achas_legs(\"kiki\")) \u2192 (is_terricolous(\"kiki\") \u2228 has_legs(\"kiki\"))) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nQuery:\nis_terricolous(\"kiki\") ::: KiKi is terricolous.",
            "problem": " If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs.  If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nKiKi is terricolous."
        },
        {
            "example": 197,
            "response": [
                "barks(\"kiki\")  &  is_dog(\"kiki\")",
                [
                    "all x ((barks(x)  ->   -likes(\"jane\", x)) )",
                    "all x ((is_dog(x)  ->  barks(x)) )",
                    "all x ((jumps(x)  ->  likes(\"jane\", x)) )",
                    "all x ((has_legs(x)  ->  jumps(x)) )",
                    "all x ((is_terricolous(x)  ->  has_legs(x)) )",
                    "(( -jumps(\"kiki\")  &   -has_legs(\"kiki\"))  ->  (is_terricolous(\"kiki\")  |  has_legs(\"kiki\"))) "
                ]
            ],
            "label": "False",
            "text": "Constants:\njane ::: represents Jane\nkiki ::: represents KiKi\nPredicates:\nbarks(x) ::: x barks.\nlikes(x, y) ::: x likes y.\nis_dog(x) ::: x is a dog.\njumps(x) ::: x jumps.\nhas_legs(x) ::: x has legs.\nis_terricolous(x) ::: x is terricolous.\nPremises:\n\u2200x (barks(x) \u2192 \u00aclikes(\"jane\", x)) ::: If an animal barks, then Jane does not like it.\n\u2200x (is_dog(x) \u2192 barks(x)) ::: All dogs are animals that bark.\n\u2200x (jumps(x) \u2192 likes(\"jane\", x)) ::: If an animal jumps, then Jane likes it.\n\u2200x (has_legs(x) \u2192 jumps(x)) ::: If an animal has legs, then it jumps.\n\u2200x (is_terricolous(x) \u2192 has_legs(x)) ::: If an animal is terricolous, then it has legs.\n((\u00acjumps(\"kiki\") \u2227 \u00achas_legs(\"kiki\")) \u2192 (is_terricolous(\"kiki\") \u2228 has_legs(\"kiki\"))) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nQuery:\nbarks(\"kiki\") \u2227 is_dog(\"kiki\") ::: KiKi barks and is a dog.",
            "problem": " If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs.  If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nKiKi barks and is a dog."
        },
        {
            "example": 198,
            "response": [
                " -barks(\"kiki\")  &   -is_dog(\"kiki\")",
                [
                    "all x ((barks(x)  ->   -likes(\"jane\", x)) )",
                    "all x ((is_dog(x)  ->  barks(x)) )",
                    "all x ((jumps(x)  ->  likes(\"jane\", x)) )",
                    "all x ((has_legs(x)  ->  jumps(x)) )",
                    "all x ((is_terricolous(x)  ->  has_legs(x)) )",
                    "(( -jumps(\"kiki\")  &   -has_legs(\"kiki\"))  ->  (is_terricolous(\"kiki\")  |  has_legs(\"kiki\"))) "
                ]
            ],
            "label": "True",
            "text": "Constants:\njane ::: represents Jane\nkiki ::: represents KiKi\nPredicates:\nbarks(x) ::: x barks.\nlikes(x, y) ::: x likes y.\nis_dog(x) ::: x is a dog.\njumps(x) ::: x jumps.\nhas_legs(x) ::: x has legs.\nis_terricolous(x) ::: x is terricolous.\nPremises:\n\u2200x (barks(x) \u2192 \u00aclikes(\"jane\", x)) ::: If an animal barks, then Jane does not like it.\n\u2200x (is_dog(x) \u2192 barks(x)) ::: All dogs are animals that bark.\n\u2200x (jumps(x) \u2192 likes(\"jane\", x)) ::: If an animal jumps, then Jane likes it.\n\u2200x (has_legs(x) \u2192 jumps(x)) ::: If an animal has legs, then it jumps.\n\u2200x (is_terricolous(x) \u2192 has_legs(x)) ::: If an animal is terricolous, then it has legs.\n((\u00acjumps(\"kiki\") \u2227 \u00achas_legs(\"kiki\")) \u2192 (is_terricolous(\"kiki\") \u2228 has_legs(\"kiki\"))) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nQuery:\n\u00acbarks(\"kiki\") \u2227 \u00acis_dog(\"kiki\") ::: KiKi neither barks nor is a dog.",
            "problem": " If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs.  If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nKiKi neither barks nor is a dog."
        },
        {
            "example": 199,
            "response": [
                "- exists x ((plays_for(x, \"nautico\")  &  is_brazilian(x)))",
                [
                    "is_born_in(\"ailton_silva\", \"year_1995\")  &  is_known_as(\"ailton_silva\", \"ailton\") ",
                    "is_football_player(\"ailton\")  &  is_loaned_out_to(\"ailton\", \"braga\") ",
                    "is_brazilian(\"ailton_silva\")  &  is_football_player(\"ailton_silva\")  &  plays_for(\"ailton_silva\", \"nautico\") ",
                    "is_football_club(\"nautico\")  &  is_football_club(\"braga\") ",
                    "is_football_club(\"fluminense\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nailton_silva ::: represents ailton silva\nailton ::: represents ailton\nyear_1995 ::: represents the year 1995\nbraga ::: represents braga\nnautico ::: represents nautico\nfluminense ::: represents fluminense\nPredicates:\nis_born_in(x, y) ::: x is born in y.\nis_known_as(x, y) ::: x is known as y.\nis_football_player(x) ::: x is a football player.\nis_loaned_out_to(x, y) ::: x is loaned out to y.\nis_brazilian(x) ::: x is a brazilian.\nplays_for(x, y) ::: x plays for y.\nis_football_club(x) ::: x is a football club.\nPremises:\nis_born_in(\"ailton_silva\", \"year_1995\") \u2227 is_known_as(\"ailton_silva\", \"ailton\") ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nis_football_player(\"ailton\") \u2227 is_loaned_out_to(\"ailton\", \"braga\") ::: Ailton is a football player who was loaned out to Braga.\nis_brazilian(\"ailton_silva\") \u2227 is_football_player(\"ailton_silva\") \u2227 plays_for(\"ailton_silva\", \"nautico\") ::: Ailton Silva is a Brazillian footballer who plays for Nautico.\nis_football_club(\"nautico\") \u2227 is_football_club(\"braga\") ::: Nautico is a football club along with Braga.\nis_football_club(\"fluminense\") ::: Fluminense is a football club.\nQuery:\n\u00ac\u2203x (plays_for(x, \"nautico\") \u2227 is_brazilian(x)) ::: No one playing for Nautico is Brazilian.",
            "problem": " Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nNo one playing for Nautico is Brazilian."
        },
        {
            "example": 200,
            "response": [
                " -plays_for(\"ailton_silva\", \"nautico\")  &   -plays_for(\"ailton_silva\", \"braga\")  &   -plays_for(\"ailton_silva\", \"fluminense\")",
                [
                    "is_born_in(\"ailton_silva\", \"year_1995\")  &  is_known_as(\"ailton_silva\", \"ailton\") ",
                    "is_football_player(\"ailton\")  &  is_loaned_out_to(\"ailton\", \"braga\") ",
                    "is_brazilian(\"ailton_silva\")  &  is_football_player(\"ailton_silva\")  &  plays_for(\"ailton_silva\", \"nautico\") ",
                    "is_football_club(\"nautico\")  &  is_football_club(\"braga\") ",
                    "is_football_club(\"fluminense\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nailton_silva ::: represents ailton silva\nailton ::: represents ailton\nbraga ::: represents braga\nnautico ::: represents nautico\nfluminense ::: represents fluminense\nyear_1995 ::: represents the year 1995\nPredicates:\nis_born_in(x, y) ::: x is born in y.\nis_known_as(x, y) ::: x is known as y.\nis_football_player(x) ::: x is a football player.\nis_loaned_out_to(x, y) ::: x is loaned out to y.\nis_brazilian(x) ::: x is a brazilian.\nplays_for(x, y) ::: x plays for y.\nis_football_club(x) ::: x is a football club.\nPremises:\nis_born_in(\"ailton_silva\", \"year_1995\") \u2227 is_known_as(\"ailton_silva\", \"ailton\") ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nis_football_player(\"ailton\") \u2227 is_loaned_out_to(\"ailton\", \"braga\") ::: Ailton is a football player who was loaned out to Braga.\nis_brazilian(\"ailton_silva\") \u2227 is_football_player(\"ailton_silva\") \u2227 plays_for(\"ailton_silva\", \"nautico\") ::: Ailton Silva is a Brazillian footballer who plays for Nautico.\nis_football_club(\"nautico\") \u2227 is_football_club(\"braga\") ::: Nautico is a football club along with Braga.\nis_football_club(\"fluminense\") ::: Fluminense is a football club.\nQuery:\n\u00acplays_for(\"ailton_silva\", \"nautico\") \u2227 \u00acplays_for(\"ailton_silva\", \"braga\") \u2227 \u00acplays_for(\"ailton_silva\", \"fluminense\") ::: Ailton Silva foes not play for a football club.",
            "problem": " Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nAilton Silva foes not play for a football club."
        },
        {
            "example": 201,
            "response": [
                " -loaned_out_to(\"ailton\", x)  &  is_football_club(x)",
                [
                    "\"ailton_silva\" = \"ailton\" ",
                    "is_football_player(\"ailton\")  &  loaned_out_to(\"ailton\", \"braga\") ",
                    "is_brazilian(\"ailton_silva\")  &  is_football_player(\"ailton_silva\")  &  plays_for(\"ailton_silva\", \"nautico\") ",
                    "is_football_club(\"nautico\")  &  is_football_club(\"braga\") ",
                    "is_football_club(\"fluminense\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nailton_silva ::: represents ailton silva\nailton ::: represents ailton\nbraga ::: represents braga\nnautico ::: represents nautico\nfluminense ::: represents fluminense\nPredicates:\nis_known_as(x, y) ::: x is known as y.\nis_football_player(x) ::: x is a football player.\nloaned_out_to(x, y) ::: x was loaned out to y.\nis_brazilian(x) ::: x is a brazilian.\nplays_for(x, y) ::: x plays for y.\nis_football_club(x) ::: x is a football club.\nPremises:\n\"ailton_silva\" = \"ailton\" ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nis_football_player(\"ailton\") \u2227 loaned_out_to(\"ailton\", \"braga\") ::: Ailton is a football player who was loaned out to Braga.\nis_brazilian(\"ailton_silva\") \u2227 is_football_player(\"ailton_silva\") \u2227 plays_for(\"ailton_silva\", \"nautico\") ::: Ailton Silva is a Brazillian footballer who plays for Nautico.\nis_football_club(\"nautico\") \u2227 is_football_club(\"braga\") ::: Nautico is a football club along with Braga.\nis_football_club(\"fluminense\") ::: Fluminense is a football club.\nQuery:\n\u00acloaned_out_to(\"ailton\", x) \u2227 is_football_club(x) ::: Ailton was not loaned out to a football club.",
            "problem": " Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nAilton was not loaned out to a football club."
        },
        {
            "example": 202,
            "response": [
                "plays_for(\"ailton_silva\", \"fluminense\")",
                [
                    "\"ailton_silva\" = \"ailton\"  &  \"ailton_silva\" = \"year_1995\" ",
                    "is_football_player(\"ailton\")  &  loaned_out_to(\"ailton\", \"braga\") ",
                    "is_brazilian(\"ailton_silva\")  &  is_football_player(\"ailton_silva\")  &  plays_for(\"ailton_silva\", \"nautico\") ",
                    "is_football_club(\"nautico\")  &  is_football_club(\"braga\") ",
                    "is_football_club(\"fluminense\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nailton_silva ::: represents ailton silva\nailton ::: represents ailton\nbraga ::: represents braga\nnautico ::: represents nautico\nfluminense ::: represents fluminense\nyear_1995 ::: represents the year 1995\nPredicates:\nis_known_as(x, y) ::: x is known as y.\nis_football_player(x) ::: x is a football player.\nloaned_out_to(x, y) ::: x was loaned out to y.\nis_brazilian(x) ::: x is a brazilian.\nplays_for(x, y) ::: x plays for y.\nis_football_club(x) ::: x is a football club.\nPremises:\n\"ailton_silva\" = \"ailton\" \u2227 \"ailton_silva\" = \"year_1995\" ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nis_football_player(\"ailton\") \u2227 loaned_out_to(\"ailton\", \"braga\") ::: Ailton is a football player who was loaned out to Braga.\nis_brazilian(\"ailton_silva\") \u2227 is_football_player(\"ailton_silva\") \u2227 plays_for(\"ailton_silva\", \"nautico\") ::: Ailton Silva is a Brazillian footballer who plays for Nautico.\nis_football_club(\"nautico\") \u2227 is_football_club(\"braga\") ::: Nautico is a football club along with Braga.\nis_football_club(\"fluminense\") ::: Fluminense is a football club.\nQuery:\nplays_for(\"ailton_silva\", \"fluminense\") ::: Ailton Silva played for Fluminense.",
            "problem": " Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nAilton Silva played for Fluminense."
        },
        {
            "example": 203,
            "response": [
                "exists x ((loaned_out_to(\"ailton_silva\", x)  &  is_football_club(x)))",
                [
                    "\"ailton_silva\" = \"ailton\" ",
                    "is_football_player(\"ailton\")  &  loaned_out_to(\"ailton\", \"braga\") ",
                    "is_brazilian(\"ailton_silva\")  &  is_football_player(\"ailton_silva\")  &  plays_for(\"ailton_silva\", \"nautico\") ",
                    "is_football_club(\"nautico\")  &  is_football_club(\"braga\") ",
                    "is_football_club(\"fluminense\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nailton_silva ::: represents ailton silva\nailton ::: represents ailton\nbraga ::: represents braga\nnautico ::: represents nautico\nfluminense ::: represents fluminense\nPredicates:\nis_known_as(x, y) ::: x is known as y.\nis_football_player(x) ::: x is a football player.\nloaned_out_to(x, y) ::: x was loaned out to y.\nis_brazilian(x) ::: x is a brazilian.\nplays_for(x, y) ::: x plays for y.\nis_football_club(x) ::: x is a football club.\nPremises:\n\"ailton_silva\" = \"ailton\" ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nis_football_player(\"ailton\") \u2227 loaned_out_to(\"ailton\", \"braga\") ::: Ailton is a football player who was loaned out to Braga.\nis_brazilian(\"ailton_silva\") \u2227 is_football_player(\"ailton_silva\") \u2227 plays_for(\"ailton_silva\", \"nautico\") ::: Ailton Silva is a Brazillian footballer who plays for Nautico.\nis_football_club(\"nautico\") \u2227 is_football_club(\"braga\") ::: Nautico is a football club along with Braga.\nis_football_club(\"fluminense\") ::: Fluminense is a football club.\nQuery:\n\u2203x (loaned_out_to(\"ailton_silva\", x) \u2227 is_football_club(x)) ::: Ailton Silva was loaned out to a football club.",
            "problem": " Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nAilton Silva was loaned out to a football club."
        }
    ]
}