{
    "model": "gpt-3.5-turbo",
    "timestamp": "2024-02-20|21:45:17",
    "responses": [
        {
            "example": 0,
            "response": [
                "perform_often(\"bonnie\")",
                [
                    "all x ((perform_often(x)  ->  (attend(x)  &  engaged(x))) )",
                    "((perform_often(x)  |  inactive(x))  &  ( -perform_often(x)  |   -inactive(x))) ",
                    "chaperone(x)  ->   -is_student(x) ",
                    "all x ((inactive(x)  ->  chaperone(x)) )",
                    "all x ((further_academic_careers(x)  ->  is_student(x)) )",
                    "(attend(\"bonnie\")  &  engaged(\"bonnie\")  &  is_student(\"bonnie\"))  |  ( -attend(\"bonnie\")  &   -engaged(\"bonnie\")  &   -is_student(\"bonnie\")) "
                ]
            ],
            "label": "Uncertain",
            "text": "###\nConstants:\nbonnie ::: represents bonnie\nPredicates:\nperform_often(x) ::: x performs in school talent shows often.\nattend(x) ::: x attends school events.\nengaged(x) ::: x is very engaged with school events.\ninactive(x) ::: x is inactive and disinterested member of their community.\nchaperone(x) ::: x chaperones high school dances.\nis_student(x) ::: x is a student who attends the school.\nfurther_academic_careers(x) ::: x wishes to further their academic careers and educational opportunities.\nPremises:\n\u2200x (perform_often(x) \u2192 (attend(x) \u2227 engaged(x))) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.\n((perform_often(x) \u2228 inactive(x)) \u2227 (\u00acperform_often(x) \u2228 \u00acinactive(x))) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.\nchaperone(x) \u2192 \u00acis_student(x) ::: If people chaperone high school dances, then they are not students who attend the school.\n\u2200x (inactive(x) \u2192 chaperone(x)) ::: All people who are inactive and disinterested members of their community chaperone high school dances.\n\u2200x (further_academic_careers(x) \u2192 is_student(x)) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n(attend(\"bonnie\") \u2227 engaged(\"bonnie\") \u2227 is_student(\"bonnie\")) \u2228 (\u00acattend(\"bonnie\") \u2227 \u00acengaged(\"bonnie\") \u2227 \u00acis_student(\"bonnie\")) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nQuery:\nperform_often(\"bonnie\") ::: Bonnie performs in school talent shows often.\n---",
            "problem": " If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBonnie performs in school talent shows often."
        },
        {
            "example": 1,
            "response": [
                "((further_academic_career(\"bonnie\")  |  chaperone_high_school_dances(\"bonnie\"))  |  ( -further_academic_career(\"bonnie\")  &   -chaperone_high_school_dances(\"bonnie\")))  ->  ((is_student(\"bonnie\")  |  inactive_and_disinterested(\"bonnie\"))  |  ( -is_student(\"bonnie\")  &   -inactive_and_disinterested(\"bonnie\")))",
                [
                    "all x ((perform_in_school_talent_shows_often(x)  ->  (attend(x)  &  engaged_with_school_events(x))) )",
                    "((perform_in_school_talent_shows_often(x)  &   -(attend(x)  &  engaged_with_school_events(x)))  |  (inactive_and_disinterested(x)  &   -chaperone_high_school_dances(x))) ",
                    "(chaperone_high_school_dances(x)  ->   -is_student(x)) ",
                    "all x (((inactive_and_disinterested(x)  ->  chaperone_high_school_dances(x))) )",
                    "all x (((further_academic_career(x)  ->  is_student(x))) )",
                    "((attend(\"bonnie\")  &  engaged_with_school_events(\"bonnie\")  &  is_student(\"bonnie\"))  |  ( -attend(\"bonnie\")  &   -engaged_with_school_events(\"bonnie\")  &   -is_student(\"bonnie\"))) "
                ]
            ],
            "label": "True",
            "text": "###\nConstants:\nbonnie ::: represents bonnie\nPredicates:\nperform_in_school_talent_shows_often(x) ::: x performs in school talent shows often.\nattend(x) ::: x attends school events.\nengaged_with_school_events(x) ::: x is very engaged with school events.\ninactive_and_disinterested(x) ::: x is inactive and disinterested.\nchaperone_high_school_dances(x) ::: x chaperones high school dances.\nis_student(x) ::: x is a student who attends the school.\nfurther_academic_career(x) ::: x wishes to further their academic career and educational opportunities.\nPremises:\n\u2200x (perform_in_school_talent_shows_often(x) \u2192 (attend(x) \u2227 engaged_with_school_events(x))) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.\n((perform_in_school_talent_shows_often(x) \u2227 \u00ac(attend(x) \u2227 engaged_with_school_events(x))) \u2228 (inactive_and_disinterested(x) \u2227 \u00acchaperone_high_school_dances(x))) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.\n(chaperone_high_school_dances(x) \u2192 \u00acis_student(x)) ::: If people chaperone high school dances, then they are not students who attend the school.\n\u2200x ((inactive_and_disinterested(x) \u2192 chaperone_high_school_dances(x))) ::: All people who are inactive and disinterested members of their community chaperone high school dances.\n\u2200x ((further_academic_career(x) \u2192 is_student(x))) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n((attend(\"bonnie\") \u2227 engaged_with_school_events(\"bonnie\") \u2227 is_student(\"bonnie\")) \u2228 (\u00acattend(\"bonnie\") \u2227 \u00acengaged_with_school_events(\"bonnie\") \u2227 \u00acis_student(\"bonnie\"))) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nQuery:\n((further_academic_career(\"bonnie\") \u2228 chaperone_high_school_dances(\"bonnie\")) \u2228 (\u00acfurther_academic_career(\"bonnie\") \u2227 \u00acchaperone_high_school_dances(\"bonnie\"))) \u2192 ((is_student(\"bonnie\") \u2228 inactive_and_disinterested(\"bonnie\")) \u2228 (\u00acis_student(\"bonnie\") \u2227 \u00acinactive_and_disinterested(\"bonnie\"))) ::: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
            "problem": " If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community."
        },
        {
            "example": 2,
            "response": [
                "((chaperone_high_school_dances(\"bonnie\")  |  ( -chaperone_high_school_dances(\"bonnie\")  &  perform_in_school_talent_shows_often(\"bonnie\")))  ->  (further_academic_career(\"bonnie\")  &  is_student(\"bonnie\")  &  inactive_member(\"bonnie\")  &  disinterested_member(\"bonnie\")))",
                [
                    "all x ((perform_in_school_talent_shows_often(x)  ->  (attend_school_events(x)  &  engage_with_school_events(x))) )",
                    "((perform_in_school_talent_shows_often(x)  &   -chaperone_high_school_dances(x))  |  (inactive_member(x)  &  disinterested_member(x))) ",
                    "(chaperone_high_school_dances(x)  ->   -is_student(x)) ",
                    "all x (((inactive_member(x)  &  disinterested_member(x))  ->  chaperone_high_school_dances(x)) )",
                    "all x (((further_academic_career(x)  ->  is_student(x))) )",
                    "((attend_school_events(\"bonnie\")  &  engage_with_school_events(\"bonnie\")  &  is_student(\"bonnie\"))  |  ( -attend_school_events(\"bonnie\")  &   -engage_with_school_events(\"bonnie\")  &   -is_student(\"bonnie\"))) "
                ]
            ],
            "label": "False",
            "text": "###\nConstants:\nbonnie ::: represents bonnie\nPredicates:\nperform_in_school_talent_shows_often(x) ::: x performs in school talent shows often.\nattend_school_events(x) ::: x attends school events.\nengage_with_school_events(x) ::: x is very engaged with school events.\ninactive_member(x) ::: x is an inactive member of the community.\ndisinterested_member(x) ::: x is a disinterested member of the community.\nchaperone_high_school_dances(x) ::: x chaperones high school dances.\nis_student(x) ::: x is a student who attends the school.\nfurther_academic_career(x) ::: x wishes to further their academic career and educational opportunities.\nPremises:\n\u2200x (perform_in_school_talent_shows_often(x) \u2192 (attend_school_events(x) \u2227 engage_with_school_events(x))) ::: If people perform in school talent shows often, then they attend and are very engaged with school events.\n((perform_in_school_talent_shows_often(x) \u2227 \u00acchaperone_high_school_dances(x)) \u2228 (inactive_member(x) \u2227 disinterested_member(x))) ::: People either perform in school talent shows often or are inactive and disinterested members of their community.\n(chaperone_high_school_dances(x) \u2192 \u00acis_student(x)) ::: If people chaperone high school dances, then they are not students who attend the school.\n\u2200x ((inactive_member(x) \u2227 disinterested_member(x)) \u2192 chaperone_high_school_dances(x)) ::: All people who are inactive and disinterested members of their community chaperone high school dances.\n\u2200x ((further_academic_career(x) \u2192 is_student(x))) ::: All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.\n((attend_school_events(\"bonnie\") \u2227 engage_with_school_events(\"bonnie\") \u2227 is_student(\"bonnie\")) \u2228 (\u00acattend_school_events(\"bonnie\") \u2227 \u00acengage_with_school_events(\"bonnie\") \u2227 \u00acis_student(\"bonnie\"))) ::: Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school.\nQuery:\n((chaperone_high_school_dances(\"bonnie\") \u2228 (\u00acchaperone_high_school_dances(\"bonnie\") \u2227 perform_in_school_talent_shows_often(\"bonnie\"))) \u2192 (further_academic_career(\"bonnie\") \u2227 is_student(\"bonnie\") \u2227 inactive_member(\"bonnie\") \u2227 disinterested_member(\"bonnie\"))) ::: If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
            "problem": " If people perform in school talent shows often, then they attend and are very engaged with school events. People either perform in school talent shows often or are inactive and disinterested members of their community. If people chaperone high school dances, then they are not students who attend the school. All people who are inactive and disinterested members of their community chaperone high school dances. All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school. Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community."
        },
        {
            "example": 3,
            "response": [
                "has_lunch_in_company(\"james\")",
                [
                    "all x ((schedule_meeting(x)  &  has_lunch_in_company(x)  ->  appear_in_company(x)) )",
                    "all x ((has_lunch_in_company(x)  ->  schedule_meeting(x)) )",
                    "all x (((has_lunch_in_company(x)  |  has_lunch_at_home(x))  &   -(has_lunch_in_company(x)  &  has_lunch_at_home(x))) )",
                    "all x ((has_lunch_at_home(x)  ->  work_remotely(x)) )",
                    "all x ((is_in_other_countries(x)  ->  work_remotely(x)) )",
                    "all x ((is_manager(x)  ->   -work_remotely(x)) )",
                    "((is_manager(\"james\")  &  appear_in_company(\"james\"))  |  ( -is_manager(\"james\")  &   -appear_in_company(\"james\"))) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\njames ::: represents james\nPredicates:\nschedule_meeting(x) ::: x schedules a meeting.\nappear_in_company(x) ::: x appears in the company.\nhas_lunch_in_company(x) ::: x has lunch in the company.\nhas_lunch_at_home(x) ::: x has lunch at home.\nwork_remotely(x) ::: x works remotely from home.\nis_manager(x) ::: x is a manager.\nis_in_other_countries(x) ::: x is in other countries.\nPremises:\n\u2200x (schedule_meeting(x) \u2227 has_lunch_in_company(x) \u2192 appear_in_company(x)) ::: All employees who schedule a meeting with their customers will appear in the company today.\n\u2200x (has_lunch_in_company(x) \u2192 schedule_meeting(x)) ::: Everyone who has lunch in the company schedules meetings with their customers.\n\u2200x ((has_lunch_in_company(x) \u2228 has_lunch_at_home(x)) \u2227 \u00ac(has_lunch_in_company(x) \u2227 has_lunch_at_home(x))) ::: Employees will either have lunch in the company or have lunch at home.\n\u2200x (has_lunch_at_home(x) \u2192 work_remotely(x)) ::: If an employee has lunch at home, then he/she is working remotely from home.\n\u2200x (is_in_other_countries(x) \u2192 work_remotely(x)) ::: All employees who are in other countries work remotely from home.\n\u2200x (is_manager(x) \u2192 \u00acwork_remotely(x)) ::: No managers work remotely from home.\n((is_manager(\"james\") \u2227 appear_in_company(\"james\")) \u2228 (\u00acis_manager(\"james\") \u2227 \u00acappear_in_company(\"james\"))) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nQuery:\nhas_lunch_in_company(\"james\") ::: James has lunch in the company.",
            "problem": " All employees who schedule a meeting with their customers will appear in the company today.  Everyone who has lunch in the company schedules meetings with their customers.  Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home.  No managers work remotely from home.  James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJames has lunch in the company."
        },
        {
            "example": 4,
            "response": [
                " -has_lunch_in_company(\"james\")",
                [
                    "all x ((schedule_meeting(x, \"customers\")  ->  appear_in_company(x)) )",
                    "all x ((has_lunch_in_company(x)  ->  schedule_meeting(x, \"customers\")) )",
                    "((has_lunch_in_company(x)  &   -has_lunch_at_home(x))  |  ( -has_lunch_in_company(x)  &  has_lunch_at_home(x))) ",
                    "all x ((has_lunch_at_home(x)  ->  work_remotely(x)) )",
                    "all x ((is_in_country(x)  ->  work_remotely(x)) )",
                    "all x ((is_manager(x)  ->   -work_remotely(x)) )",
                    "((is_manager(\"james\")  &  appear_in_company(\"james\"))  |  ( -is_manager(\"james\")  &   -appear_in_company(\"james\"))) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\njames ::: represents james\nPredicates:\nschedule_meeting(x, y) ::: x schedules a meeting with y.\nappear_in_company(x) ::: x appears in the company.\nhas_lunch_in_company(x) ::: x has lunch in the company.\nhas_lunch_at_home(x) ::: x has lunch at home.\nwork_remotely(x) ::: x works remotely from home.\nis_in_country(x) ::: x is in another country.\nis_manager(x) ::: x is a manager.\nPremises:\n\u2200x (schedule_meeting(x, \"customers\") \u2192 appear_in_company(x)) ::: All employees who schedule a meeting with their customers will appear in the company today.\n\u2200x (has_lunch_in_company(x) \u2192 schedule_meeting(x, \"customers\")) ::: Everyone who has lunch in the company schedules meetings with their customers.\n((has_lunch_in_company(x) \u2227 \u00achas_lunch_at_home(x)) \u2228 (\u00achas_lunch_in_company(x) \u2227 has_lunch_at_home(x))) ::: Employees will either have lunch in the company or have lunch at home.\n\u2200x (has_lunch_at_home(x) \u2192 work_remotely(x)) ::: If an employee has lunch at home, then he/she is working remotely from home.\n\u2200x (is_in_country(x) \u2192 work_remotely(x)) ::: All employees who are in other countries work remotely from home.\n\u2200x (is_manager(x) \u2192 \u00acwork_remotely(x)) ::: No managers work remotely from home.\n((is_manager(\"james\") \u2227 appear_in_company(\"james\")) \u2228 (\u00acis_manager(\"james\") \u2227 \u00acappear_in_company(\"james\"))) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nQuery:\n\u00achas_lunch_in_company(\"james\") ::: James does not have lunch in the company.",
            "problem": " All employees who schedule a meeting with their customers will appear in the company today.  Everyone who has lunch in the company schedules meetings with their customers.  Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home.  No managers work remotely from home.  James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJames does not have lunch in the company."
        },
        {
            "example": 5,
            "response": [
                "(is_manager(\"james\")  |  in_other_countries(\"james\"))  ->  ((has_lunch_at_home(\"james\")  &  work_remotely(\"james\"))  |  ( -has_lunch_at_home(\"james\")  &   -work_remotely(\"james\")))",
                [
                    "all x ((schedule_meeting(x)  ->  appear_in_company(x)) )",
                    "all x ((has_lunch_in_company(x)  ->  schedule_meeting(x)) )",
                    "((has_lunch_in_company(x)  &   -has_lunch_at_home(x))  |  ( -has_lunch_in_company(x)  &  has_lunch_at_home(x))) ",
                    "all x ((has_lunch_at_home(x)  ->  work_remotely(x)) )",
                    "all x ((in_other_countries(x)  ->  work_remotely(x)) )",
                    "all x ((is_manager(x)  ->   -work_remotely(x)) )",
                    "((is_manager(\"james\")  &  appear_in_company(\"james\"))  |  ( -is_manager(\"james\")  &   -appear_in_company(\"james\"))) "
                ]
            ],
            "label": "True",
            "text": "Constants:\njames ::: represents james\nPredicates:\nschedule_meeting(x) ::: x schedules a meeting with their customers.\nappear_in_company(x) ::: x appears in the company today.\nhas_lunch_in_company(x) ::: x has lunch in the company.\nhas_lunch_at_home(x) ::: x has lunch at home.\nwork_remotely(x) ::: x works remotely from home.\nis_manager(x) ::: x is a manager.\nin_other_countries(x) ::: x is in other countries.\nPremises:\n\u2200x (schedule_meeting(x) \u2192 appear_in_company(x)) ::: All employees who schedule a meeting with their customers will appear in the company today.\n\u2200x (has_lunch_in_company(x) \u2192 schedule_meeting(x)) ::: Everyone who has lunch in the company schedules meetings with their customers.\n((has_lunch_in_company(x) \u2227 \u00achas_lunch_at_home(x)) \u2228 (\u00achas_lunch_in_company(x) \u2227 has_lunch_at_home(x))) ::: Employees will either have lunch in the company or have lunch at home.\n\u2200x (has_lunch_at_home(x) \u2192 work_remotely(x)) ::: If an employee has lunch at home, then he/she is working remotely from home.\n\u2200x (in_other_countries(x) \u2192 work_remotely(x)) ::: All employees who are in other countries work remotely from home.\n\u2200x (is_manager(x) \u2192 \u00acwork_remotely(x)) ::: No managers work remotely from home.\n((is_manager(\"james\") \u2227 appear_in_company(\"james\")) \u2228 (\u00acis_manager(\"james\") \u2227 \u00acappear_in_company(\"james\"))) ::: James is either a manager and appears in the company today or neither a manager nor appears in the company today.\nQuery:\n(is_manager(\"james\") \u2228 in_other_countries(\"james\")) \u2192 ((has_lunch_at_home(\"james\") \u2227 work_remotely(\"james\")) \u2228 (\u00achas_lunch_at_home(\"james\") \u2227 \u00acwork_remotely(\"james\"))) ::: If James is either a manager or in other countries, then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.",
            "problem": " All employees who schedule a meeting with their customers will appear in the company today.  Everyone who has lunch in the company schedules meetings with their customers.  Employees will either have lunch in the company or have lunch at home. If an employee has lunch at home, then he/she is working remotely from home. All employees who are in other countries work remotely from home.  No managers work remotely from home.  James is either a manager and appears in the company today or neither a manager nor appears in the company today.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home."
        },
        {
            "example": 6,
            "response": [
                "exists x (is_animal(x))",
                [
                    "is_infectious_disease(\"monkeypox\")  &  is_caused_by(\"monkeypox\", \"monkeypox_virus\") ",
                    "can_occur_in(\"monkeypox_virus\", \"humans\")  &  can_occur_in(\"monkeypox_virus\", \"certain_animals\") ",
                    "is_mammal(\"humans\") ",
                    "is_animal(\"mammals\") ",
                    "is_symptom_of(\"fever\", \"monkeypox\")  &  is_symptom_of(\"headache\", \"monkeypox\")  &  is_symptom_of(\"muscle_pains\", \"monkeypox\")  &  is_symptom_of(\"feeling_tired\", \"monkeypox\") ",
                    "feel(\"people\", \"tired\")  &  get(\"people\", \"glu\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nmonkeypox ::: represents monkeypox\nmonkeypox_virus ::: represents monkeypox virus\nhumans ::: represents humans\nmammals ::: represents mammals\nsymptoms ::: represents symptoms\nfever ::: represents fever\nheadache ::: represents headache\nmuscle_pains ::: represents muscle pains\nfeeling_tired ::: represents feeling tired\nglu ::: represents glu\nPredicates:\nis_infectious_disease(x) ::: x is an infectious disease.\nis_caused_by(x, y) ::: x is caused by y.\ncan_occur_in(x, y) ::: x can occur in y.\nis_mammal(x) ::: x is a mammal.\nis_symptom_of(x, y) ::: x is a symptom of y.\nfeel(x, y) ::: x feels y.\nPremises:\nis_infectious_disease(\"monkeypox\") \u2227 is_caused_by(\"monkeypox\", \"monkeypox_virus\") ::: Monkeypox is an infectious disease caused by the monkeypox virus.\ncan_occur_in(\"monkeypox_virus\", \"humans\") \u2227 can_occur_in(\"monkeypox_virus\", \"certain_animals\") ::: Monkeypox virus can occur in certain animals, including humans.\nis_mammal(\"humans\") ::: Humans are mammals.\nis_animal(\"mammals\") ::: Mammals are animals.\nis_symptom_of(\"fever\", \"monkeypox\") \u2227 is_symptom_of(\"headache\", \"monkeypox\") \u2227 is_symptom_of(\"muscle_pains\", \"monkeypox\") \u2227 is_symptom_of(\"feeling_tired\", \"monkeypox\") ::: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nfeel(\"people\", \"tired\") \u2227 get(\"people\", \"glu\") ::: People feel tired when they get a glu.\nQuery:\n\u2203x is_animal(x) ::: There is an animal.",
            "problem": " Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThere is an animal."
        },
        {
            "example": 7,
            "response": [
                " -get(\"people\", \"flu\")",
                [
                    "is_infectious_disease(\"monkeypox\")  &  is_caused_by(\"monkeypox\", \"monkeypox_virus\") ",
                    "can_occur_in(\"monkeypox_virus\", \"humans\") ",
                    "is_mammal(\"humans\")  &  is_mammal(\"mammals\") ",
                    "is_symptom_of(\"fever\", \"monkeypox\")  &  is_symptom_of(\"headache\", \"monkeypox\")  &  is_symptom_of(\"muscle_pains\", \"monkeypox\")  &  is_symptom_of(\"feeling_tired\", \"monkeypox\") ",
                    "get(\"people\", \"flu\")  ->   -get(\"people\", \"flu\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nmonkeypox ::: represents monkeypox\nmonkeypox_virus ::: represents monkeypox virus\nhumans ::: represents humans\nmammals ::: represents mammals\nflu ::: represents flu\nPredicates:\nis_infectious_disease(x) ::: x is an infectious disease.\nis_caused_by(x, y) ::: x is caused by y.\ncan_occur_in(x, y) ::: x can occur in y.\nis_mammal(x) ::: x is a mammal.\nis_symptom_of(x, y) ::: x is a symptom of y.\nget(x, y) ::: x gets y.\nPremises:\nis_infectious_disease(\"monkeypox\") \u2227 is_caused_by(\"monkeypox\", \"monkeypox_virus\") ::: Monkeypox is an infectious disease caused by the monkeypox virus.\ncan_occur_in(\"monkeypox_virus\", \"humans\") ::: Monkeypox virus can occur in certain animals, including humans.\nis_mammal(\"humans\") \u2227 is_mammal(\"mammals\") ::: Humans are mammals. Mammals are animals.\nis_symptom_of(\"fever\", \"monkeypox\") \u2227 is_symptom_of(\"headache\", \"monkeypox\") \u2227 is_symptom_of(\"muscle_pains\", \"monkeypox\") \u2227 is_symptom_of(\"feeling_tired\", \"monkeypox\") ::: Symptoms of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nget(\"people\", \"flu\") \u2192 \u00acget(\"people\", \"flu\") ::: People feel tired when they get a flu.\nQuery:\n\u00acget(\"people\", \"flu\") ::: No one gets flu.",
            "problem": " Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nNo one gets flu."
        },
        {
            "example": 8,
            "response": [
                "is_symptom_of(\"coughing\", \"monkeypox\")",
                [
                    "is_infectious_disease(\"monkeypox\")  &  is_caused_by(\"monkeypox\", \"monkeypox_virus\") ",
                    "can_occur_in(\"monkeypox_virus\", \"humans\")  &  can_occur_in(\"monkeypox_virus\", \"mammals\") ",
                    "is_mammal(\"humans\")  &  is_animal(\"mammals\") ",
                    "is_symptom_of(\"fever\", \"monkeypox\")  &  is_symptom_of(\"headache\", \"monkeypox\")  &  is_symptom_of(\"muscle_pains\", \"monkeypox\")  &  is_symptom_of(\"feeling_tired\", \"monkeypox\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nmonkeypox ::: represents monkeypox\nmonkeypox_virus ::: represents the monkeypox virus\nhumans ::: represents humans\nmammals ::: represents mammals\nfever ::: represents fever\nheadache ::: represents headache\nmuscle_pains ::: represents muscle pains\nfeeling_tired ::: represents feeling tired\nglu ::: represents glu\nPredicates:\nis_infectious_disease(x) ::: x is an infectious disease.\nis_caused_by(x, y) ::: x is caused by y.\ncan_occur_in(x, y) ::: y can occur in x.\nis_symptom_of(x, y) ::: x is a symptom of y.\nPremises:\nis_infectious_disease(\"monkeypox\") \u2227 is_caused_by(\"monkeypox\", \"monkeypox_virus\") ::: Monkeypox is an infectious disease caused by the monkeypox virus.\ncan_occur_in(\"monkeypox_virus\", \"humans\") \u2227 can_occur_in(\"monkeypox_virus\", \"mammals\") ::: Monkeypox virus can occur in certain animals, including humans.\nis_mammal(\"humans\") \u2227 is_animal(\"mammals\") ::: Humans are mammals. Mammals are animals.\nis_symptom_of(\"fever\", \"monkeypox\") \u2227 is_symptom_of(\"headache\", \"monkeypox\") \u2227 is_symptom_of(\"muscle_pains\", \"monkeypox\") \u2227 is_symptom_of(\"feeling_tired\", \"monkeypox\") ::: Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.\nQuery:\nis_symptom_of(\"coughing\", \"monkeypox\") ::: Symptons of Monkeypox include coughing.",
            "problem": " Monkeypox is an infectious disease caused by the monkeypox virus. Monkeypox virus can occur in certain animals, including humans. Humans are mammals. Mammals are animals. Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on. People feel tired when they get a glu.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSymptons of Monkeypox include coughing."
        },
        {
            "example": 9,
            "response": [
                "is_ocellated_wild_turkey(\"tom\")",
                [
                    "all x ((is_eastern_wild_turkey(x)  |  is_osceola_wild_turkey(x)  |  is_gould_wild_turkey(x)  |  is_merriam_wild_turkey(x)  |  is_rio_grande_wild_turkey(x)  |  is_ocellated_wild_turkey(x)) )",
                    " -is_eastern_wild_turkey(\"tom\")  &   -is_osceola_wild_turkey(\"tom\")  &   -is_gould_wild_turkey(\"tom\")  &   -is_merriam_wild_turkey(\"tom\")  &   -is_rio_grande_wild_turkey(\"tom\")  &  is_wild_turkey(\"tom\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\ntom ::: represents tom\nPredicates:\nis_eastern_wild_turkey(x) ::: x is an Eastern wild turkey.\nis_osceola_wild_turkey(x) ::: x is an Osceola wild turkey.\nis_gould_wild_turkey(x) ::: x is a Gould's wild turkey.\nis_merriam_wild_turkey(x) ::: x is a Merriam's wild turkey.\nis_rio_grande_wild_turkey(x) ::: x is a Rio Grande wild turkey.\nis_ocellated_wild_turkey(x) ::: x is an Ocellated wild turkey.\nis_wild_turkey(x) ::: x is a wild turkey.\nPremises:\n\u2200x (is_eastern_wild_turkey(x) \u2228 is_osceola_wild_turkey(x) \u2228 is_gould_wild_turkey(x) \u2228 is_merriam_wild_turkey(x) \u2228 is_rio_grande_wild_turkey(x) \u2228 is_ocellated_wild_turkey(x)) ::: There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\n\u00acis_eastern_wild_turkey(\"tom\") \u2227 \u00acis_osceola_wild_turkey(\"tom\") \u2227 \u00acis_gould_wild_turkey(\"tom\") \u2227 \u00acis_merriam_wild_turkey(\"tom\") \u2227 \u00acis_rio_grande_wild_turkey(\"tom\") \u2227 is_wild_turkey(\"tom\") ::: Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.\nQuery:\nis_ocellated_wild_turkey(\"tom\") ::: Tom is an Ocellated wild turkey.",
            "problem": " There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTom is an Ocellated wild turkey."
        },
        {
            "example": 10,
            "response": [
                "is_eastern_wild_turkey(\"tom\")",
                [
                    " -is_eastern_wild_turkey(\"tom\")  &   -is_osceola_wild_turkey(\"tom\")  &   -is_goulds_wild_turkey(\"tom\")  &   -is_merriams_wild_turkey(\"tom\")  &   -is_rio_grande_wild_turkey(\"tom\")  &  is_wild_turkey(\"tom\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\ntom ::: represents tom\nPredicates:\nis_eastern_wild_turkey(x) ::: x is an Eastern wild turkey.\nis_osceola_wild_turkey(x) ::: x is an Osceola wild turkey.\nis_goulds_wild_turkey(x) ::: x is a Gould's wild turkey.\nis_merriams_wild_turkey(x) ::: x is a Merriam's wild turkey.\nis_rio_grande_wild_turkey(x) ::: x is a Rio Grande wild turkey.\nis_ocellated_wild_turkey(x) ::: x is an Ocellated wild turkey.\nis_wild_turkey(x) ::: x is a wild turkey.\nPremises:\n\u00acis_eastern_wild_turkey(\"tom\") \u2227 \u00acis_osceola_wild_turkey(\"tom\") \u2227 \u00acis_goulds_wild_turkey(\"tom\") \u2227 \u00acis_merriams_wild_turkey(\"tom\") \u2227 \u00acis_rio_grande_wild_turkey(\"tom\") \u2227 is_wild_turkey(\"tom\") ::: Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.\nQuery:\nis_eastern_wild_turkey(\"tom\") ::: Tom is an Eastern wild turkey.",
            "problem": " There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTom is an Eastern wild turkey."
        },
        {
            "example": 11,
            "response": [
                "is_wild_turkey(\"joey\")",
                [
                    "is_type_of(\"tom\", \"Eastern_wild_turkey\")  ->   -is_type_of(\"tom\", \"Osceola_wild_turkey\")  ->   -is_type_of(\"tom\", \"Gould's_wild_turkey\")  ->   -is_type_of(\"tom\", \"Merriam's_wild_turkey\")  ->   -is_type_of(\"tom\", \"Rio_Grande_wild_turkey\")  ->   -is_type_of(\"tom\", \"Ocellated_wild_turkey\")  ->  is_wild_turkey(\"tom\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\ntom ::: represents tom\njoey ::: represents joey\nPredicates:\nis_type_of(x, y) ::: x is a type of wild turkey y.\nis_wild_turkey(x) ::: x is a wild turkey.\nPremises:\nis_type_of(\"tom\", \"Eastern wild turkey\") \u2192 \u00acis_type_of(\"tom\", \"Osceola wild turkey\") \u2192 \u00acis_type_of(\"tom\", \"Gould's wild turkey\") \u2192 \u00acis_type_of(\"tom\", \"Merriam's wild turkey\") \u2192 \u00acis_type_of(\"tom\", \"Rio Grande wild turkey\") \u2192 \u00acis_type_of(\"tom\", \"Ocellated wild turkey\") \u2192 is_wild_turkey(\"tom\") ::: Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.\nQuery:\nis_wild_turkey(\"joey\") ::: Joey is a wild turkey.",
            "problem": " There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey. Tom is not an Eastern wild turkey. Tom is not an Osceola wild turkey. Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey. Tom is a wild turkey.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJoey is a wild turkey."
        },
        {
            "example": 12,
            "response": [
                "select_into_list(\"the_legend_of_zelda\", \"top_10_list\")",
                [
                    "create_game(\"japanese_game_company\", \"the_legend_of_zelda\") ",
                    "all x ((made_by(x, \"top_10_list\")  ->  made_by(x, \"japanese_game_company\")) )",
                    "all x ((sell_copies(x, \"more_than_one_million\")  ->  select_into_list(x, \"top_10_list\")) )",
                    "sell_copies(\"the_legend_of_zelda\", \"more_than_one_million\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nthe_legend_of_zelda ::: represents the Legend of Zelda\njapanese_game_company ::: represents a Japanese game company\ntop_10_list ::: represents the Top 10 list\nPredicates:\ncreate_game(x, y) ::: x creates the game y.\nmade_by(x, y) ::: x is made by y.\nsell_copies(x, y) ::: x sells y copies.\nselect_into_list(x, y) ::: x is selected into the list y.\nPremises:\ncreate_game(\"japanese_game_company\", \"the_legend_of_zelda\") ::: A Japanese game company created the game the Legend of Zelda.\n\u2200x (made_by(x, \"top_10_list\") \u2192 made_by(x, \"japanese_game_company\")) ::: All games in the Top 10 list are made by Japanese game companies.\n\u2200x (sell_copies(x, \"more_than_one_million\") \u2192 select_into_list(x, \"top_10_list\")) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nsell_copies(\"the_legend_of_zelda\", \"more_than_one_million\") ::: The Legend of Zelda sold more than one million copies.\nQuery:\nselect_into_list(\"the_legend_of_zelda\", \"top_10_list\") ::: The Legend of Zelda is in the Top 10 list.",
            "problem": " A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThe Legend of Zelda is in the Top 10 list."
        },
        {
            "example": 13,
            "response": [
                "made_by(\"fifa_22\", \"japanese_game_company\")",
                [
                    "created_by(\"the_legend_of_zelda\", \"japanese_game_company\") ",
                    "all x ((made_by(x, \"japanese_game_company\")  ->  selected_into(x, \"top_10_list\")) )",
                    "all x ((sells_more_than_one_million_copies(x)  ->  selected_into(x, \"top_10_list\")) )",
                    "sells_more_than_one_million_copies(\"the_legend_of_zelda\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nthe_legend_of_zelda ::: represents the Legend of Zelda\nfifa_22 ::: represents FIFA 22\njapanese_game_company ::: represents a Japanese game company\ntop_10_list ::: represents the Top 10 list\nPredicates:\ncreated_by(x, y) ::: x is created by y.\nmade_by(x, y) ::: x is made by y.\nsells_more_than_one_million_copies(x) ::: x sells more than one million copies.\nselected_into(x, y) ::: x is selected into y.\nPremises:\ncreated_by(\"the_legend_of_zelda\", \"japanese_game_company\") ::: A Japanese game company created the game the Legend of Zelda.\n\u2200x (made_by(x, \"japanese_game_company\") \u2192 selected_into(x, \"top_10_list\")) ::: All games in the Top 10 list are made by Japanese game companies.\n\u2200x (sells_more_than_one_million_copies(x) \u2192 selected_into(x, \"top_10_list\")) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nsells_more_than_one_million_copies(\"the_legend_of_zelda\") ::: The Legend of Zelda sold more than one million copies.\nQuery:\nmade_by(\"fifa_22\", \"japanese_game_company\") ::: FIFA 22 is made by a Japanese video game company.",
            "problem": " A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nFIFA 22 is made by a Japanese video game company."
        },
        {
            "example": 14,
            "response": [
                " -selected_into(\"the_legend_of_zelda\", \"top_10_list\")",
                [
                    "create_game(\"japanese_game_company\", \"the_legend_of_zelda\") ",
                    "all x ((made_by(x, \"top_10_list\")  ->  create_game(x, \"top_10_list\")) )",
                    "all x ((sell_more_than_one_million_copies(x)  ->  selected_into(x, \"top_10_list\")) )",
                    "sell_more_than_one_million_copies(\"the_legend_of_zelda\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nthe_legend_of_zelda ::: represents the Legend of Zelda\njapanese_game_company ::: represents a Japanese game company\ntop_10_list ::: represents the Top 10 list\nPredicates:\ncreate_game(x, y) ::: x creates the game y.\nmade_by(x, y) ::: y is made by x.\nsell_more_than_one_million_copies(x) ::: x sells more than one million copies.\nselected_into(x, y) ::: x is selected into the list y.\nPremises:\ncreate_game(\"japanese_game_company\", \"the_legend_of_zelda\") ::: A Japanese game company created the game the Legend of Zelda.\n\u2200x (made_by(x, \"top_10_list\") \u2192 create_game(x, \"top_10_list\")) ::: All games in the Top 10 list are made by Japanese game companies.\n\u2200x (sell_more_than_one_million_copies(x) \u2192 selected_into(x, \"top_10_list\")) ::: If a game sells more than one million copies, then it will be selected into the Top 10 list.\nsell_more_than_one_million_copies(\"the_legend_of_zelda\") ::: The Legend of Zelda sold more than one million copies.\nQuery:\n\u00acselected_into(\"the_legend_of_zelda\", \"top_10_list\") ::: The Legend of Zelda is not in the Top 10 list.",
            "problem": " A Japanese game company created the game the Legend of Zelda. All games in the Top 10 list are made by Japanese game companies. [BG] If a game sells more than one million copies, then it will be selected into the Top 10 list. The Legend of Zelda sold more than one million copies.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThe Legend of Zelda is not in the Top 10 list."
        },
        {
            "example": 15,
            "response": [
                "all x ((has_sides(x, 4)  ->  is_shape(x)))",
                [
                    "all x ((has_sides(x, 4)  ->  is_shape(x)) )"
                ]
            ],
            "label": "True",
            "text": "Constants:\nsquare ::: represents a square\nPredicates:\nhas_sides(x, y) ::: x has y sides.\nis_shape(x) ::: x is a shape.\nPremises:\n\u2200x (has_sides(x, 4) \u2192 is_shape(x)) ::: All four-sided things are shapes.\nQuery:\n\u2200x (has_sides(x, 4) \u2192 is_shape(x)) ::: All squares are shapes.",
            "problem": " All squares have four sides. All four-sided things are shapes. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nAll squares are shapes."
        },
        {
            "example": 16,
            "response": [
                "is_turtle(\"rock\")",
                [
                    "all x ((is_rabbit(x)  ->  is_cute(x)) )",
                    "exists x (is_turtle(x) )",
                    "all x (((is_animal(x)  ->  is_rabbit(x))  |  (is_animal(x)  ->  is_squirrel(x))) )",
                    "is_skittish(x)  ->   -is_still(x) ",
                    "all x ((is_squirrel(x)  ->  is_skittish(x)) )",
                    "is_still(\"rock\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nrock ::: represents rock\nPredicates:\nis_rabbit(x) ::: x is a rabbit.\nis_cute(x) ::: x is cute.\nexist(x) ::: x exists.\nis_turtle(x) ::: x is a turtle.\nis_animal(x) ::: x is an animal.\nis_squirrel(x) ::: x is a squirrel.\nis_skittish(x) ::: x is skittish.\nis_still(x) ::: x is still.\nPremises:\n\u2200x (is_rabbit(x) \u2192 is_cute(x)) ::: All rabbits are cute.\n\u2203x is_turtle(x) ::: Some turtles exist.\n\u2200x ((is_animal(x) \u2192 is_rabbit(x)) \u2228 (is_animal(x) \u2192 is_squirrel(x))) ::: An animal is either a rabbit or a squirrel.\nis_skittish(x) \u2192 \u00acis_still(x) ::: If something is skittish, then it is not still.\n\u2200x (is_squirrel(x) \u2192 is_skittish(x)) ::: All squirrels are skittish.\nis_still(\"rock\") ::: Rock is still.\nQuery:\nis_turtle(\"rock\") ::: Rock is a turtle.",
            "problem": " All rabbits are cute.  Some turtles exist.  An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRock is a turtle."
        },
        {
            "example": 17,
            "response": [
                " -is_turtle(\"rock\")",
                [
                    "all x ((is_rabbit(x)  ->  is_cute(x)) )",
                    "exists x (is_turtle(x) )",
                    "all x (((is_animal(x)  ->  is_rabbit(x))  |  (is_animal(x)  ->  is_squirrel(x))) )",
                    "is_skittish(x)  ->   -is_still(x) ",
                    "all x ((is_squirrel(x)  ->  is_skittish(x)) )",
                    "is_still(\"rock\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nrock ::: represents rock\nPredicates:\nis_rabbit(x) ::: x is a rabbit.\nis_cute(x) ::: x is cute.\nexist(x) ::: x exists.\nis_turtle(x) ::: x is a turtle.\nis_animal(x) ::: x is an animal.\nis_squirrel(x) ::: x is a squirrel.\nis_skittish(x) ::: x is skittish.\nis_still(x) ::: x is still.\nPremises:\n\u2200x (is_rabbit(x) \u2192 is_cute(x)) ::: All rabbits are cute.\n\u2203x is_turtle(x) ::: Some turtles exist.\n\u2200x ((is_animal(x) \u2192 is_rabbit(x)) \u2228 (is_animal(x) \u2192 is_squirrel(x))) ::: An animal is either a rabbit or a squirrel.\nis_skittish(x) \u2192 \u00acis_still(x) ::: If something is skittish, then it is not still.\n\u2200x (is_squirrel(x) \u2192 is_skittish(x)) ::: All squirrels are skittish.\nis_still(\"rock\") ::: Rock is still.\nQuery:\n\u00acis_turtle(\"rock\") ::: Rock is not a turtle.",
            "problem": " All rabbits are cute.  Some turtles exist.  An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRock is not a turtle."
        },
        {
            "example": 18,
            "response": [
                "exist(\"rock\")  |  is_cute(\"rock\")",
                [
                    "all x ((is_rabbit(x)  ->  is_cute(x)) )",
                    "exists x (exist(x) )",
                    "all x (((is_animal(x)  &   -is_rabbit(x))  |  (is_animal(x)  &   -is_squirrel(x))) )",
                    "all x ((is_skittish(x)  ->   -is_still(x)) )",
                    "all x ((is_squirrel(x)  ->  is_skittish(x)) )",
                    " -is_still(\"rock\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nrock ::: represents rock\nPredicates:\nis_rabbit(x) ::: x is a rabbit.\nis_cute(x) ::: x is cute.\nexist(x) ::: x exists.\nis_animal(x) ::: x is an animal.\nis_squirrel(x) ::: x is a squirrel.\nis_skittish(x) ::: x is skittish.\nis_still(x) ::: x is still.\nPremises:\n\u2200x (is_rabbit(x) \u2192 is_cute(x)) ::: All rabbits are cute.\n\u2203x exist(x) ::: Some turtles exist.\n\u2200x ((is_animal(x) \u2227 \u00acis_rabbit(x)) \u2228 (is_animal(x) \u2227 \u00acis_squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n\u2200x (is_skittish(x) \u2192 \u00acis_still(x)) ::: If something is skittish, then it is not still.\n\u2200x (is_squirrel(x) \u2192 is_skittish(x)) ::: All squirrels are skittish.\n\u00acis_still(\"rock\") ::: Rock is still.\nQuery:\nexist(\"rock\") \u2228 is_cute(\"rock\") ::: Rock is a turtle or cute.",
            "problem": " All rabbits are cute.  Some turtles exist.  An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRock is a turtle or cute."
        },
        {
            "example": 19,
            "response": [
                "(( -is_turtle(\"rock\")  |   -is_squirrel(\"rock\"))  ->  (is_cute(\"rock\")  |  is_skittish(\"rock\")))",
                [
                    "all x ((is_rabbit(x)  ->  is_cute(x)) )",
                    "exists x (is_turtle(x) )",
                    "all x (((is_animal(x)  &   -is_rabbit(x))  |  (is_animal(x)  &   -is_squirrel(x))) )",
                    "(is_skittish(x)  ->   -is_still(x)) ",
                    "all x ((is_squirrel(x)  ->  is_skittish(x)) )",
                    " -(is_turtle(\"rock\")  &  is_squirrel(\"rock\"))  ->  ((is_cute(\"rock\")  |  is_skittish(\"rock\"))) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nrock ::: represents rock\nPredicates:\nis_rabbit(x) ::: x is a rabbit.\nis_cute(x) ::: x is cute.\nexist(x) ::: x exists.\nis_turtle(x) ::: x is a turtle.\nis_animal(x) ::: x is an animal.\nis_squirrel(x) ::: x is a squirrel.\nis_skittish(x) ::: x is skittish.\nis_still(x) ::: x is still.\nPremises:\n\u2200x (is_rabbit(x) \u2192 is_cute(x)) ::: All rabbits are cute.\n\u2203x is_turtle(x) ::: Some turtles exist.\n\u2200x ((is_animal(x) \u2227 \u00acis_rabbit(x)) \u2228 (is_animal(x) \u2227 \u00acis_squirrel(x))) ::: An animal is either a rabbit or a squirrel.\n(is_skittish(x) \u2192 \u00acis_still(x)) ::: If something is skittish, then it is not still.\n\u2200x (is_squirrel(x) \u2192 is_skittish(x)) ::: All squirrels are skittish.\n\u00ac(is_turtle(\"rock\") \u2227 is_squirrel(\"rock\")) \u2192 ((is_cute(\"rock\") \u2228 is_skittish(\"rock\"))) ::: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.\nQuery:\n((\u00acis_turtle(\"rock\") \u2228 \u00acis_squirrel(\"rock\")) \u2192 (is_cute(\"rock\") \u2228 is_skittish(\"rock\"))) ::: If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.",
            "problem": " All rabbits are cute.  Some turtles exist.  An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Rock is not both a turtle and a squirrel, then Rock is either cute or skittish."
        },
        {
            "example": 20,
            "response": [
                "(is_cute(\"rock\")  &  is_still(\"rock\"))  ->  (is_turtle(\"rock\")  &  is_skittish(\"rock\"))",
                [
                    "all x ((is_rabbit(x)  ->  is_cute(x)) )",
                    "exists x (is_turtle(x) )",
                    "all x (((is_animal(x)  ->  is_rabbit(x))  |  (is_animal(x)  ->  is_squirrel(x))) )",
                    "is_skittish(x)  ->   -is_still(x) ",
                    "all x ((is_squirrel(x)  ->  is_skittish(x)) )",
                    "is_still(\"rock\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nrock ::: represents rock\nPredicates:\nis_rabbit(x) ::: x is a rabbit.\nis_cute(x) ::: x is cute.\nexist(x) ::: x exists.\nis_turtle(x) ::: x is a turtle.\nis_animal(x) ::: x is an animal.\nis_squirrel(x) ::: x is a squirrel.\nis_skittish(x) ::: x is skittish.\nis_still(x) ::: x is still.\nPremises:\n\u2200x (is_rabbit(x) \u2192 is_cute(x)) ::: All rabbits are cute.\n\u2203x is_turtle(x) ::: Some turtles exist.\n\u2200x ((is_animal(x) \u2192 is_rabbit(x)) \u2228 (is_animal(x) \u2192 is_squirrel(x))) ::: An animal is either a rabbit or a squirrel.\nis_skittish(x) \u2192 \u00acis_still(x) ::: If something is skittish, then it is not still.\n\u2200x (is_squirrel(x) \u2192 is_skittish(x)) ::: All squirrels are skittish.\nis_still(\"rock\") ::: Rock is still.\nQuery:\n(is_cute(\"rock\") \u2227 is_still(\"rock\")) \u2192 (is_turtle(\"rock\") \u2227 is_skittish(\"rock\")) ::: If Rock is cute and still, then Rock is a turtle and skittish.",
            "problem": " All rabbits are cute.  Some turtles exist.  An animal is either a rabbit or a squirrel. If something is skittish, then it is not still. All squirrels are skittish. Rock is still.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Rock is cute and still, then Rock is a turtle and skittish."
        },
        {
            "example": 21,
            "response": [
                "share(\"karen\", \"stranger_things\", \"lisa\")",
                [
                    "is_show(\"stranger_things\")  &  is_netflix_show(\"stranger_things\")  &  is_popular(\"stranger_things\") ",
                    "all x ((is_netflix_show(x)  &  is_popular(x)  ->  binge_watch(\"karen\", x)) )",
                    "all x ((binge_watch(\"karen\", x)  <->  download(\"karen\", x)) )",
                    " -download(\"karen\", \"black_mirror\")  &  is_netflix_show(\"black_mirror\") ",
                    "all x ((binge_watch(\"karen\", x)  ->  share(\"karen\", x, \"lisa\")) )"
                ]
            ],
            "label": "True",
            "text": "Constants:\nstranger_things ::: represents \"Stranger Things\"\nnetflix ::: represents Netflix\nkaren ::: represents Karen\nblack_mirror ::: represents \"Black Mirror\"\nlisa ::: represents Lisa\nPredicates:\nis_show(x) ::: x is a show.\nis_netflix_show(x) ::: x is a Netflix show.\nis_popular(x) ::: x is popular.\nbinge_watch(x, y) ::: x binge-watches y.\ndownload(x, y) ::: x downloads y.\nshare(x, y) ::: x shares y to z.\nPremises:\nis_show(\"stranger_things\") \u2227 is_netflix_show(\"stranger_things\") \u2227 is_popular(\"stranger_things\") ::: \"Stranger Things\" is a popular Netflix show.\n\u2200x (is_netflix_show(x) \u2227 is_popular(x) \u2192 binge_watch(\"karen\", x)) ::: If a Netflix show is popular, Karen will binge-watch it.\n\u2200x (binge_watch(\"karen\", x) \u2194 download(\"karen\", x)) ::: If and only if Karen binge-watches a Netflix show, she will download it.\n\u00acdownload(\"karen\", \"black_mirror\") \u2227 is_netflix_show(\"black_mirror\") ::: Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show.\n\u2200x (binge_watch(\"karen\", x) \u2192 share(\"karen\", x, \"lisa\")) ::: If Karen binge-watches a Netflix show, she will share it to Lisa.\nQuery:\nshare(\"karen\", \"stranger_things\", \"lisa\") ::: Karen will share \"Stranger Things\" to Lisa.",
            "problem": " \"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nKaren will share \"Stranger Things\" to Lisa."
        },
        {
            "example": 22,
            "response": [
                "is_popular(\"black_mirror\")",
                [
                    "is_show(\"stranger_things\")  &  is_show(\"black_mirror\")  &  is_netflix(\"stranger_things\")  &  is_netflix(\"black_mirror\") ",
                    "all x ((is_show(x)  &  is_popular(x)  ->  binge_watch(\"karen\", x)) )",
                    "all x ((binge_watch(\"karen\", x)  <->  download(\"karen\", x)) )",
                    " -download(\"karen\", \"black_mirror\") ",
                    "all x ((binge_watch(\"karen\", x)  ->  share(\"karen\", x, \"lisa\")) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\nstranger_things ::: represents \"Stranger Things\"\nnetflix ::: represents Netflix\nkaren ::: represents Karen\nblack_mirror ::: represents \"Black Mirror\"\nlisa ::: represents Lisa\nPredicates:\nis_show(x) ::: x is a show.\nis_popular(x) ::: x is popular.\nbinge_watch(x, y) ::: x binge-watches y.\ndownload(x, y) ::: x downloads y.\nshare(x, y, z) ::: x shares y to z.\nPremises:\nis_show(\"stranger_things\") \u2227 is_show(\"black_mirror\") \u2227 is_netflix(\"stranger_things\") \u2227 is_netflix(\"black_mirror\") ::: \"Stranger Things\" is a popular Netflix show. \"Black Mirror\" is a Netflix show.\n\u2200x (is_show(x) \u2227 is_popular(x) \u2192 binge_watch(\"karen\", x)) ::: If a Netflix show is popular, Karen will binge-watch it.\n\u2200x (binge_watch(\"karen\", x) \u2194 download(\"karen\", x)) ::: If and only if Karen binge-watches a Netflix show, she will download it.\n\u00acdownload(\"karen\", \"black_mirror\") ::: Karen does not download \"Black Mirror\".\n\u2200x (binge_watch(\"karen\", x) \u2192 share(\"karen\", x, \"lisa\")) ::: If Karen binge-watches a Netflix show, she will share it to Lisa.\nQuery:\nis_popular(\"black_mirror\") ::: \"Black Mirror\" is popular.",
            "problem": " \"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\n\"Black Mirror\" is popular."
        },
        {
            "example": 23,
            "response": [
                "share(\"karen\", \"black_mirror\", \"lisa\")",
                [
                    "is_show(\"stranger_things\")  &  is_popular(\"stranger_things\") ",
                    "all x ((is_show(x)  &  is_popular(x)  ->  binge_watch(\"karen\", x)) )",
                    "all x ((binge_watch(\"karen\", x)  <->  download(\"karen\", x)) )",
                    " -download(\"karen\", \"black_mirror\")  &  is_show(\"black_mirror\") ",
                    "all x ((binge_watch(\"karen\", x)  ->  share(\"karen\", x, \"lisa\")) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nstranger_things ::: represents \"Stranger Things\"\nnetflix ::: represents Netflix\nkaren ::: represents Karen\nblack_mirror ::: represents \"Black Mirror\"\nlisa ::: represents Lisa\nPredicates:\nis_show(x) ::: x is a show.\nis_popular(x) ::: x is popular.\nbinge_watch(x, y) ::: x binge-watches y.\ndownload(x, y) ::: x downloads y.\nshare(x, y, z) ::: x shares y to z.\nPremises:\nis_show(\"stranger_things\") \u2227 is_popular(\"stranger_things\") ::: \"Stranger Things\" is a popular Netflix show.\n\u2200x (is_show(x) \u2227 is_popular(x) \u2192 binge_watch(\"karen\", x)) ::: If a Netflix show is popular, Karen will binge-watch it.\n\u2200x (binge_watch(\"karen\", x) \u2194 download(\"karen\", x)) ::: If and only if Karen binge-watches a Netflix show, she will download it.\n\u00acdownload(\"karen\", \"black_mirror\") \u2227 is_show(\"black_mirror\") ::: Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show.\n\u2200x (binge_watch(\"karen\", x) \u2192 share(\"karen\", x, \"lisa\")) ::: If Karen binge-watches a Netflix show, she will share it to Lisa.\nQuery:\nshare(\"karen\", \"black_mirror\", \"lisa\") ::: Karen will share \"Black Mirror\" to Lisa.",
            "problem": " \"Stranger Things\" is a popular Netflix show. If a Netflix show is popular, Karen will binge-watch it. If and only if Karen binge-watches a Netflix show, she will download it. Karen does not download \"Black Mirror\". \"Black Mirror\" is a Netflix show. If Karen binge-watches a Netflix show, she will share it to Lisa.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nKaren will share \"Black Mirror\" to Lisa."
        },
        {
            "example": 24,
            "response": [
                "hosted(\"beijing\", \"2008_summer_olympics\")  &  hosted(\"beijing\", \"winter_olympics\")",
                [
                    "is_capital_of(\"beijing\", \"peoples_republic_of_china\") ",
                    "is_populous(\"beijing\") ",
                    "is_located_in(\"beijing\", \"northern_china\") ",
                    "hosted(\"beijing\", \"2008_summer_olympics\")  &  hosted(\"beijing\", \"2008_summer_paralympics\") ",
                    "hosted(\"beijing\", \"summer_olympics\")  &  hosted(\"beijing\", \"winter_olympics\")  &  hosted(\"beijing\", \"summer_paralympics\")  &  hosted(\"beijing\", \"winter_paralympics\") ",
                    "rank_among(\"beijing's_91_universities\", \"best_in_the_asia_pacific\")  &  rank_among(\"beijing's_91_universities\", \"best_in_the_world\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nbeijing ::: represents beijing\npeoples_republic_of_china ::: represents the people's republic of china\nnorthern_china ::: represents northern china\n2008_summer_olympics ::: represents the 2008 summer olympics\n2008_summer_paralympics ::: represents the 2008 summer paralympics\nsummer_olympics ::: represents the summer olympics\nwinter_olympics ::: represents the winter olympics\nuniversities ::: represents universities\nasia_pacific ::: represents the asia-pacific\nworld ::: represents the world\nPredicates:\nis_capital_of(x, y) ::: x is the capital of y.\nis_populous(x) ::: x is populous.\nis_located_in(x, y) ::: x is located in y.\nhosted(x, y) ::: x hosted y.\nrank_among(x, y) ::: x ranks among y.\nPremises:\nis_capital_of(\"beijing\", \"peoples_republic_of_china\") ::: Beijing is the capital of the People's Republic of China.\nis_populous(\"beijing\") ::: Beijing is the world's most populous national capital city.\nis_located_in(\"beijing\", \"northern_china\") ::: Beijing is located in Northern China.\nhosted(\"beijing\", \"2008_summer_olympics\") \u2227 hosted(\"beijing\", \"2008_summer_paralympics\") ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nhosted(\"beijing\", \"summer_olympics\") \u2227 hosted(\"beijing\", \"winter_olympics\") \u2227 hosted(\"beijing\", \"summer_paralympics\") \u2227 hosted(\"beijing\", \"winter_paralympics\") ::: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nrank_among(\"beijing's_91_universities\", \"best_in_the_asia_pacific\") \u2227 rank_among(\"beijing's_91_universities\", \"best_in_the_world\") ::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nQuery:\nhosted(\"beijing\", \"2008_summer_olympics\") \u2227 hosted(\"beijing\", \"winter_olympics\") ::: Beijing has hosted both the 2008 Summer Olympics and a winter olympics.",
            "problem": " Beijing is the capital of the People's Republic of China.  Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBeijing has hosted both the 2008 Summer Olympics and a winter olympics."
        },
        {
            "example": 25,
            "response": [
                "is_located_in(\"beijing\", \"southern_china\")",
                [
                    "is_capital_of(\"beijing\", \"peoples_republic_of_china\") ",
                    "is_populous(\"beijing\") ",
                    "is_located_in(\"beijing\", \"northern_china\") ",
                    "hosted(\"beijing\", \"summer_olympics_2008\")  &  hosted(\"beijing\", \"summer_paralympics_2008\") ",
                    "hosted(\"beijing\", \"summer_olympics\")  &  hosted(\"beijing\", \"winter_olympics\")  &  hosted(\"beijing\", \"summer_paralympics\")  &  hosted(\"beijing\", \"winter_paralympics\") ",
                    "rank_among(\"beijing's_91_universities\", \"asia_pacific\", \"world\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nbeijing ::: represents beijing\npeoples_republic_of_china ::: represents the people's republic of china\nnorthern_china ::: represents northern china\nsummer_olympics_2008 ::: represents the 2008 summer olympics\nsummer_paralympics_2008 ::: represents the 2008 summer paralympics\nwinter_olympics ::: represents the winter olympics\nwinter_paralympics ::: represents the winter paralympics\nPredicates:\nis_capital_of(x, y) ::: x is the capital of y.\nis_populous(x) ::: x is the world's most populous national capital city.\nis_located_in(x, y) ::: x is located in y.\nhosted(x, y) ::: x hosted the event y.\nrank_among(x, y, z) ::: x ranks among the best in y and z.\nPremises:\nis_capital_of(\"beijing\", \"peoples_republic_of_china\") ::: Beijing is the capital of the People's Republic of China.\nis_populous(\"beijing\") ::: Beijing is the world's most populous national capital city.\nis_located_in(\"beijing\", \"northern_china\") ::: Beijing is located in Northern China.\nhosted(\"beijing\", \"summer_olympics_2008\") \u2227 hosted(\"beijing\", \"summer_paralympics_2008\") ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nhosted(\"beijing\", \"summer_olympics\") \u2227 hosted(\"beijing\", \"winter_olympics\") \u2227 hosted(\"beijing\", \"summer_paralympics\") \u2227 hosted(\"beijing\", \"winter_paralympics\") ::: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics.\nrank_among(\"beijing's 91 universities\", \"asia-pacific\", \"world\") ::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nQuery:\nis_located_in(\"beijing\", \"southern_china\") ::: Beijing is located in southern China.",
            "problem": " Beijing is the capital of the People's Republic of China.  Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBeijing is located in southern China."
        },
        {
            "example": 26,
            "response": [
                "is_second_largest_city_by_urban_population(\"beijing\", \"china\")",
                [
                    "is_capital_of(\"beijing\", \"peoples_republic_of_china\") ",
                    "is_populous(\"beijing\") ",
                    "located_in(\"beijing\", \"northern_china\") ",
                    "hosted(\"beijing\", \"2008_summer_olympics\")  &  hosted(\"beijing\", \"2008_summer_paralympics\") ",
                    "hosted(\"beijing\", \"summer_olympics\")  &  hosted(\"beijing\", \"winter_olympics\")  &  hosted(\"beijing\", \"summer_paralympics\")  &  hosted(\"beijing\", \"winter_paralympics\") ",
                    "rank_among(\"beijing's_91_universities\", \"best_in_asia_pacific\")  &  rank_among(\"beijing's_91_universities\", \"best_in_world\") "
                ]
            ],
            "label": "Uncertain",
            "text": "###\nConstants:\nbeijing ::: represents beijing\npeoples_republic_of_china ::: represents the people's republic of china\nnorthern_china ::: represents northern china\n2008_summer_olympics ::: represents the 2008 summer olympics\n2008_summer_paralympics ::: represents the 2008 summer paralympics\nuniversities ::: represents universities\nasia_pacific ::: represents the asia-pacific\nworld ::: represents the world\nPredicates:\nis_capital_of(x, y) ::: x is the capital of y.\nis_populous(x) ::: x is populous.\nlocated_in(x, y) ::: x is located in y.\nhosted(x, y) ::: x hosted y.\nrank_among(x, y) ::: x ranks among y.\nPremises:\nis_capital_of(\"beijing\", \"peoples_republic_of_china\") ::: Beijing is the capital of the People's Republic of China.\nis_populous(\"beijing\") ::: Beijing is the world's most populous national capital city.\nlocated_in(\"beijing\", \"northern_china\") ::: Beijing is located in Northern China.\nhosted(\"beijing\", \"2008_summer_olympics\") \u2227 hosted(\"beijing\", \"2008_summer_paralympics\") ::: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nhosted(\"beijing\", \"summer_olympics\") \u2227 hosted(\"beijing\", \"winter_olympics\") \u2227 hosted(\"beijing\", \"summer_paralympics\") \u2227 hosted(\"beijing\", \"winter_paralympics\") ::: Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics\nrank_among(\"beijing's_91_universities\", \"best_in_asia_pacific\") \u2227 rank_among(\"beijing's_91_universities\", \"best_in_world\") ::: Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.\nQuery:\nis_second_largest_city_by_urban_population(\"beijing\", \"china\") ::: Beijing is the second largest Chinese city by urban population.",
            "problem": " Beijing is the capital of the People's Republic of China.  Beijing is the world's most populous national capital city. Beijing is located in Northern China. Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games. Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBeijing is the second largest Chinese city by urban population."
        },
        {
            "example": 27,
            "response": [
                "is_alien(\"marvin\")",
                [
                    "all x ((is_alien(x)  ->  is_extraterrestrial(x)) )",
                    "all x ((is_from(x, \"mars\")  ->  is_alien(x)) )",
                    "all x ((is_extraterrestrial(x)  ->   -is_human(x)) )",
                    "all x ((is_from(x, \"earth\")  ->  is_human(x)) )",
                    " -(is_from(\"marvin\", \"earth\")  &  is_from(\"marvin\", \"mars\")) ",
                    "(is_from(\"marvin\", \"earth\")  ->   -is_from(\"marvin\", \"earth\"))  ->  (is_from(\"marvin\", \"mars\")  ->  is_extraterrestrial(\"marvin\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nmarvin ::: represents marvin\nmars ::: represents mars\nearth ::: represents earth\nPredicates:\nis_alien(x) ::: x is an alien.\nis_extraterrestrial(x) ::: x is extraterrestrial.\nis_human(x) ::: x is human.\nis_from(x, y) ::: x is from y.\nPremises:\n\u2200x (is_alien(x) \u2192 is_extraterrestrial(x)) ::: All aliens are extraterrestrial.\n\u2200x (is_from(x, \"mars\") \u2192 is_alien(x)) ::: If someone is from Mars, then they are aliens.\n\u2200x (is_extraterrestrial(x) \u2192 \u00acis_human(x)) ::: No extraterrestrial is human.\n\u2200x (is_from(x, \"earth\") \u2192 is_human(x)) ::: Everyone from Earth is a human.\n\u00ac(is_from(\"marvin\", \"earth\") \u2227 is_from(\"marvin\", \"mars\")) ::: Marvin cannot be from Earth and from Mars.\n(is_from(\"marvin\", \"earth\") \u2192 \u00acis_from(\"marvin\", \"earth\")) \u2192 (is_from(\"marvin\", \"mars\") \u2192 is_extraterrestrial(\"marvin\")) ::: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nQuery:\nis_alien(\"marvin\") ::: Marvin is an alien.",
            "problem": " All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMarvin is an alien."
        },
        {
            "example": 28,
            "response": [
                " -is_human(\"marvin\")  &   -is_from(\"marvin\", \"mars\")",
                [
                    "all x ((is_alien(x)  ->  is_extraterrestrial(x)) )",
                    "all x ((is_from(x, \"mars\")  ->  is_alien(x)) )",
                    "all x ((is_extraterrestrial(x)  ->   -is_human(x)) )",
                    "all x ((is_from(x, \"earth\")  ->  is_human(x)) )",
                    " -(is_from(\"marvin\", \"earth\")  &  is_from(\"marvin\", \"mars\")) ",
                    " -is_from(\"marvin\", \"earth\")  ->  is_extraterrestrial(\"marvin\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nmarvin ::: represents marvin\nmars ::: represents mars\nearth ::: represents earth\nPredicates:\nis_alien(x) ::: x is an alien.\nis_extraterrestrial(x) ::: x is extraterrestrial.\nis_human(x) ::: x is human.\nis_from(x, y) ::: x is from y.\nPremises:\n\u2200x (is_alien(x) \u2192 is_extraterrestrial(x)) ::: All aliens are extraterrestrial.\n\u2200x (is_from(x, \"mars\") \u2192 is_alien(x)) ::: If someone is from Mars, then they are aliens.\n\u2200x (is_extraterrestrial(x) \u2192 \u00acis_human(x)) ::: No extraterrestrial is human.\n\u2200x (is_from(x, \"earth\") \u2192 is_human(x)) ::: Everyone from Earth is a human.\n\u00ac(is_from(\"marvin\", \"earth\") \u2227 is_from(\"marvin\", \"mars\")) ::: Marvin cannot be from Earth and from Mars.\n\u00acis_from(\"marvin\", \"earth\") \u2192 is_extraterrestrial(\"marvin\") ::: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nQuery:\n\u00acis_human(\"marvin\") \u2227 \u00acis_from(\"marvin\", \"mars\") ::: Marvin is neither a human nor from Mars.",
            "problem": " All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMarvin is neither a human nor from Mars."
        },
        {
            "example": 29,
            "response": [
                " -is_from(\"marvin\", \"mars\")  ->  is_human(\"marvin\")",
                [
                    "all x ((is_alien(x)  ->  is_extraterrestrial(x)) )",
                    "all x ((is_from(x, \"mars\")  ->  is_alien(x)) )",
                    "all x ((is_extraterrestrial(x)  ->   -is_human(x)) )",
                    "all x ((is_from(x, \"earth\")  ->  is_human(x)) )",
                    " -(is_from(\"marvin\", \"earth\")  &  is_from(\"marvin\", \"mars\")) ",
                    " -is_from(\"marvin\", \"earth\")  ->  is_extraterrestrial(\"marvin\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nmarvin ::: represents marvin\nmars ::: represents mars\nearth ::: represents earth\nPredicates:\nis_alien(x) ::: x is an alien.\nis_extraterrestrial(x) ::: x is extraterrestrial.\nis_human(x) ::: x is human.\nis_from(x, y) ::: x is from y.\nPremises:\n\u2200x (is_alien(x) \u2192 is_extraterrestrial(x)) ::: All aliens are extraterrestrial.\n\u2200x (is_from(x, \"mars\") \u2192 is_alien(x)) ::: If someone is from Mars, then they are aliens.\n\u2200x (is_extraterrestrial(x) \u2192 \u00acis_human(x)) ::: No extraterrestrial is human.\n\u2200x (is_from(x, \"earth\") \u2192 is_human(x)) ::: Everyone from Earth is a human.\n\u00ac(is_from(\"marvin\", \"earth\") \u2227 is_from(\"marvin\", \"mars\")) ::: Marvin cannot be from Earth and from Mars.\n\u00acis_from(\"marvin\", \"earth\") \u2192 is_extraterrestrial(\"marvin\") ::: If Marvin is not from Earth, then Marvin is an extraterrestrial.\nQuery:\n\u00acis_from(\"marvin\", \"mars\") \u2192 is_human(\"marvin\") ::: If Marvin is not from Mars, then Marvin is a human.",
            "problem": " All aliens are extraterrestrial. If someone is from Mars, then they are aliens. No extraterrestrial is human. Everyone from Earth is a human. Marvin cannot be from Earth and from Mars. If Marvin is not from Earth, then Marvin is an extraterrestrial.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Marvin is not from Mars, then Marvin is a human."
        },
        {
            "example": 30,
            "response": [
                "is_grand_slam_champion(\"djokovic\")",
                [
                    "all x (((is_grand_slam_champion(x)  |  is_oscar_nominated_actor(x))  &  (is_grand_slam_champion(x)  ->  is_professional_tennis_player(x))  &  (is_oscar_nominated_actor(x)  ->  is_celebrity(x))) )",
                    "all x ((is_grand_slam_champion(x)  ->  is_professional_tennis_player(x)) )",
                    "all x ((is_oscar_nominated_actor(x)  ->  is_celebrity(x)) )",
                    "all x ((is_professional_tennis_player(x)  ->  is_athlete(x)) )",
                    "(is_celebrity(x)  ->  is_well_paid(x)) ",
                    "(is_athlete(x)  ->  is_famous(x)) ",
                    "all x ((is_well_paid(x)  ->  live_in_tax_havens(x)) )",
                    "(is_famous(\"djokovic\")  &  is_athlete(\"djokovic\"))  ->  is_well_paid(\"djokovic\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\ndjokovic ::: represents djokovic\nPredicates:\nis_grand_slam_champion(x) ::: x is a Grand Slam champion.\nis_oscar_nominated_actor(x) ::: x is an Oscar-nominated actor.\nis_professional_tennis_player(x) ::: x is a professional tennis player.\nis_celebrity(x) ::: x is a celebrity.\nis_athlete(x) ::: x is an athlete.\nis_well_paid(x) ::: x is well paid.\nlive_in_tax_havens(x) ::: x lives in tax havens.\nPremises:\n\u2200x ((is_grand_slam_champion(x) \u2228 is_oscar_nominated_actor(x)) \u2227 (is_grand_slam_champion(x) \u2192 is_professional_tennis_player(x)) \u2227 (is_oscar_nominated_actor(x) \u2192 is_celebrity(x))) ::: A person is either a Grand Slam champion or an Oscar-nominated actor.\n\u2200x (is_grand_slam_champion(x) \u2192 is_professional_tennis_player(x)) ::: All people who are Grand Slam champions are professional tennis players.\n\u2200x (is_oscar_nominated_actor(x) \u2192 is_celebrity(x)) ::: All Oscar-nominated actors are celebrities.\n\u2200x (is_professional_tennis_player(x) \u2192 is_athlete(x)) ::: All professional tennis players are athletes.\n(is_celebrity(x) \u2192 is_well_paid(x)) ::: If a person is a celebrity then they are well paid.\n(is_athlete(x) \u2192 is_famous(x)) ::: If a person is an athlete then they are famous.\n\u2200x (is_well_paid(x) \u2192 live_in_tax_havens(x)) ::: All well-paid people live in tax havens.\n(is_famous(\"djokovic\") \u2227 is_athlete(\"djokovic\")) \u2192 is_well_paid(\"djokovic\") ::: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nQuery:\nis_grand_slam_champion(\"djokovic\") ::: Djokovic is a Grand Slam champion.",
            "problem": " A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDjokovic is a Grand Slam champion."
        },
        {
            "example": 31,
            "response": [
                "lives_in_tax_haven(\"djokovic\")",
                [
                    "all x (((is_grand_slam_champion(x)  |  is_oscar_nominated_actor(x))  &  (is_grand_slam_champion(x)  ->  is_professional_tennis_player(x))  &  (is_oscar_nominated_actor(x)  ->  is_celebrity(x))) )",
                    "all x ((is_professional_tennis_player(x)  ->  is_athlete(x)) )",
                    "all x ((is_celebrity(x)  ->  is_well_paid(x)) )",
                    "all x ((is_athlete(x)  ->  is_famous(x)) )",
                    "all x ((is_well_paid(x)  ->  lives_in_tax_haven(x)) )",
                    "(is_famous(\"djokovic\")  &  is_athlete(\"djokovic\"))  ->  lives_in_tax_haven(\"djokovic\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\ndjokovic ::: represents djokovic\nPredicates:\nis_grand_slam_champion(x) ::: x is a Grand Slam champion.\nis_oscar_nominated_actor(x) ::: x is an Oscar-nominated actor.\nis_professional_tennis_player(x) ::: x is a professional tennis player.\nis_celebrity(x) ::: x is a celebrity.\nis_athlete(x) ::: x is an athlete.\nis_well_paid(x) ::: x is well paid.\nlives_in_tax_haven(x) ::: x lives in a tax haven.\nPremises:\n\u2200x ((is_grand_slam_champion(x) \u2228 is_oscar_nominated_actor(x)) \u2227 (is_grand_slam_champion(x) \u2192 is_professional_tennis_player(x)) \u2227 (is_oscar_nominated_actor(x) \u2192 is_celebrity(x))) ::: A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities.\n\u2200x (is_professional_tennis_player(x) \u2192 is_athlete(x)) ::: All professional tennis players are athletes.\n\u2200x (is_celebrity(x) \u2192 is_well_paid(x)) ::: If a person is a celebrity then they are well paid.\n\u2200x (is_athlete(x) \u2192 is_famous(x)) ::: If a person is an athlete then they are famous.\n\u2200x (is_well_paid(x) \u2192 lives_in_tax_haven(x)) ::: All well-paid people live in tax havens.\n(is_famous(\"djokovic\") \u2227 is_athlete(\"djokovic\")) \u2192 lives_in_tax_haven(\"djokovic\") ::: If Djokovic is famous and is an athlete, then Djokovic lives in well paid.\nQuery:\nlives_in_tax_haven(\"djokovic\") ::: Djokovic lives in a tax haven.",
            "problem": " A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDjokovic lives in a tax haven."
        },
        {
            "example": 32,
            "response": [
                " -live_in_tax_haven(\"djokovic\")",
                [
                    "all x (((is_grand_slam_champion(x)  |  is_oscar_nominated_actor(x))  &  (is_grand_slam_champion(x)  ->  is_professional_tennis_player(x))  &  (is_oscar_nominated_actor(x)  ->  is_celebrity(x))) )",
                    "all x ((is_professional_tennis_player(x)  ->  is_athlete(x)) )",
                    "all x ((is_celebrity(x)  ->  is_well_paid(x)) )",
                    "all x ((is_athlete(x)  ->  is_famous(x)) )",
                    "all x ((is_well_paid(x)  ->  live_in_tax_haven(x)) )",
                    "(is_famous(\"djokovic\")  &  is_athlete(\"djokovic\"))  ->  live_in_tax_haven(\"djokovic\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\ndjokovic ::: represents djokovic\nPredicates:\nis_grand_slam_champion(x) ::: x is a Grand Slam champion.\nis_oscar_nominated_actor(x) ::: x is an Oscar-nominated actor.\nis_professional_tennis_player(x) ::: x is a professional tennis player.\nis_celebrity(x) ::: x is a celebrity.\nis_athlete(x) ::: x is an athlete.\nis_well_paid(x) ::: x is well paid.\nlive_in_tax_haven(x) ::: x lives in a tax haven.\nPremises:\n\u2200x ((is_grand_slam_champion(x) \u2228 is_oscar_nominated_actor(x)) \u2227 (is_grand_slam_champion(x) \u2192 is_professional_tennis_player(x)) \u2227 (is_oscar_nominated_actor(x) \u2192 is_celebrity(x))) ::: A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities.\n\u2200x (is_professional_tennis_player(x) \u2192 is_athlete(x)) ::: All professional tennis players are athletes.\n\u2200x (is_celebrity(x) \u2192 is_well_paid(x)) ::: If a person is a celebrity then they are well paid.\n\u2200x (is_athlete(x) \u2192 is_famous(x)) ::: If a person is an athlete then they are famous.\n\u2200x (is_well_paid(x) \u2192 live_in_tax_haven(x)) ::: All well-paid people live in tax havens.\n(is_famous(\"djokovic\") \u2227 is_athlete(\"djokovic\")) \u2192 live_in_tax_haven(\"djokovic\") ::: If Djokovic is famous and is an athlete, then Djokovic lives in a tax haven.\nQuery:\n\u00aclive_in_tax_haven(\"djokovic\") ::: Djokovic does not live in a tax haven.",
            "problem": " A person is either a Grand Slam champion or an Oscar-nominated actor. All people who are Grand Slam champions are professional tennis players. All Oscar-nominated actors are celebrities. All professional tennis players are athletes. If a person is a celebrity then they are well paid. If a person is an athlete then they are famous. All well-paid people live in tax havens. If Djokovic is famous and is an athlete, then Djokovic lives in well paid.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDjokovic does not live in a tax haven."
        },
        {
            "example": 33,
            "response": [
                "leads(\"roderick_strong\", \"is_professional_wrestling_stable\")",
                [
                    "is_professional_wrestling_stable(\"diamond_mine\")  &  formed_in(\"diamond_mine\", \"wwe\") ",
                    "leads(\"roderick_strong\", \"diamond_mine\") ",
                    "includes(\"diamond_mine\", \"creed_brothers\")  &  includes(\"diamond_mine\", \"ivy_nile\") ",
                    "has_feud_with(\"imperium\", \"diamond_mine\") "
                ]
            ],
            "label": "True",
            "text": "###\nConstants:\ndiamond_mine ::: represents Diamond Mine\nwwe ::: represents WWE\nroderick_strong ::: represents Roderick Strong\ncreed_brothers ::: represents the Creed Brothers\nivy_nile ::: represents Ivy Nile\nimperium ::: represents Imperium\nPredicates:\nis_professional_wrestling_stable(x) ::: x is a professional wrestling stable.\nleads(x, y) ::: x leads y.\nincludes(x, y) ::: x includes y.\nhas_feud_with(x, y) ::: x has a feud with y.\nPremises:\nis_professional_wrestling_stable(\"diamond_mine\") \u2227 formed_in(\"diamond_mine\", \"wwe\") ::: Diamond Mine is a professional wrestling stable, formed in WWE.\nleads(\"roderick_strong\", \"diamond_mine\") ::: Roderick Strong leads Diamond Mine.\nincludes(\"diamond_mine\", \"creed_brothers\") \u2227 includes(\"diamond_mine\", \"ivy_nile\") ::: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nhas_feud_with(\"imperium\", \"diamond_mine\") ::: Imperium has a feud with Diamond Mine.\nQuery:\nleads(\"roderick_strong\", \"is_professional_wrestling_stable\") ::: Roderick strong leads a professional wrestling stable.",
            "problem": " Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRoderick strong leads a professional wrestling stable."
        },
        {
            "example": 34,
            "response": [
                "leads(\"roderick_strong\", \"creed_brothers\")",
                [
                    "is_professional_wrestling_stable(\"diamond_mine\")  &  formed_in(\"diamond_mine\", \"wwe\") ",
                    "leads(\"roderick_strong\", \"diamond_mine\") ",
                    "includes(\"diamond_mine\", \"creed_brothers\")  &  includes(\"diamond_mine\", \"ivy_nile\") ",
                    "has_feud_with(\"imperium\", \"diamond_mine\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\ndiamond_mine ::: represents Diamond Mine\nwwe ::: represents WWE\nroderick_strong ::: represents Roderick Strong\ncreed_brothers ::: represents the Creed Brothers\nivy_nile ::: represents Ivy Nile\nimperium ::: represents Imperium\nPredicates:\nis_professional_wrestling_stable(x) ::: x is a professional wrestling stable.\nformed_in(x, y) ::: x is formed in y.\nleads(x, y) ::: x leads y.\nincludes(x, y) ::: x includes y.\nhas_feud_with(x, y) ::: x has a feud with y.\nPremises:\nis_professional_wrestling_stable(\"diamond_mine\") \u2227 formed_in(\"diamond_mine\", \"wwe\") ::: Diamond Mine is a professional wrestling stable, formed in WWE.\nleads(\"roderick_strong\", \"diamond_mine\") ::: Roderick Strong leads Diamond Mine.\nincludes(\"diamond_mine\", \"creed_brothers\") \u2227 includes(\"diamond_mine\", \"ivy_nile\") ::: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nhas_feud_with(\"imperium\", \"diamond_mine\") ::: Imperium has a feud with Diamond Mine.\nQuery:\nleads(\"roderick_strong\", \"creed_brothers\") ::: Roderick Strong leads the Creed Brothers.",
            "problem": " Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRoderick strong leads the Creed Brothers."
        },
        {
            "example": 35,
            "response": [
                " -has_feud_with(\"imperium\", \"x\")  &  includes(\"x\", \"ivy_nile\")",
                [
                    "is_professional_wrestling_stable(\"diamond_mine\")  &  is_formed_in(\"diamond_mine\", \"WWE\") ",
                    "leads(\"roderick_strong\", \"diamond_mine\") ",
                    "includes(\"diamond_mine\", \"creed_brothers\")  &  includes(\"diamond_mine\", \"ivy_nile\") ",
                    "has_feud_with(\"imperium\", \"diamond_mine\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\ndiamond_mine ::: represents Diamond Mine\nroderick_strong ::: represents Roderick Strong\ncreed_brothers ::: represents the Creed Brothers\nivy_nile ::: represents Ivy Nile\nimperium ::: represents Imperium\nPredicates:\nis_professional_wrestling_stable(x) ::: x is a professional wrestling stable.\nis_formed_in(x, y) ::: x is formed in y.\nleads(x, y) ::: x leads y.\nincludes(x, y) ::: x includes y.\nhas_feud_with(x, y) ::: x has a feud with y.\nPremises:\nis_professional_wrestling_stable(\"diamond_mine\") \u2227 is_formed_in(\"diamond_mine\", \"WWE\") ::: Diamond Mine is a professional wrestling stable, formed in WWE.\nleads(\"roderick_strong\", \"diamond_mine\") ::: Roderick Strong leads Diamond Mine.\nincludes(\"diamond_mine\", \"creed_brothers\") \u2227 includes(\"diamond_mine\", \"ivy_nile\") ::: Diamond Mine includes the Creed Brothers, and Ivy Nile.\nhas_feud_with(\"imperium\", \"diamond_mine\") ::: Imperium has a feud with Diamond Mine.\nQuery:\n\u00achas_feud_with(\"imperium\", \"x\") \u2227 includes(\"x\", \"ivy_nile\") ::: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
            "problem": " Diamond Mine is a professional wrestling stable, formed in WWE. Roderick Strong leads Diamond Mine. Diamond Mine includes the Creed Brothers, and Ivy Nile. Imperium has a feud with Diamond Mine.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile."
        },
        {
            "example": 36,
            "response": [
                "is_composer(\"beethoven\")",
                [
                    "is_music_piece(\"symphony_no_9\") ",
                    "all x ((is_composer(x)  ->  write_music(x)) )",
                    "write_music(\"beethoven\")  &  write_music(\"symphony_no_9\") ",
                    "premiere(\"vienna_music_society\", \"symphony_no_9\")  &  is_orchestra(\"vienna_music_society\") ",
                    "lead(\"beethoven\", \"vienna_music_society\")  &  is_orchestra(\"vienna_music_society\") ",
                    "all x ((is_orchestra(x)  ->   exists y (is_conductor(y)  &  lead(y, x))) )"
                ]
            ],
            "label": "True",
            "text": "Constants:\nsymphony_no_9 ::: represents Symphony No. 9\nvienna_music_society ::: represents Vienna Music Society\nbeethoven ::: represents Beethoven\nPredicates:\nis_music_piece(x) ::: x is a music piece.\nwrite_music(x) ::: x writes music.\npremiere(x, y) ::: x premiered y.\nis_orchestra(x) ::: x is an orchestra.\nlead(x, y) ::: x leads y.\nis_composer(x) ::: x is a composer.\nis_conductor(x) ::: x is a conductor.\nPremises:\nis_music_piece(\"symphony_no_9\") ::: Symphony No. 9 is a music piece.\n\u2200x (is_composer(x) \u2192 write_music(x)) ::: Composers write music pieces.\nwrite_music(\"beethoven\") \u2227 write_music(\"symphony_no_9\") ::: Beethoven wrote Symphony No. 9.\npremiere(\"vienna_music_society\", \"symphony_no_9\") \u2227 is_orchestra(\"vienna_music_society\") ::: Vienna Music Society premiered Symphony No. 9.\nlead(\"beethoven\", \"vienna_music_society\") \u2227 is_orchestra(\"vienna_music_society\") ::: Beethoven leads the Vienna Music Society.\n\u2200x (is_orchestra(x) \u2192 \u2203y (is_conductor(y) \u2227 lead(y, x))) ::: Orchestras are led by conductors.\nQuery:\nis_composer(\"beethoven\") ::: Beethoven is a composer.",
            "problem": " Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBeethoven is a composer."
        },
        {
            "example": 37,
            "response": [
                " exists x (is_orchestra(x)  &   exists y (premiered_by(y, x)))",
                [
                    "is_music_piece(\"symphony_no_9\") ",
                    "all x ((write_music_pieces(x)  ->  is_music_piece(x)) )",
                    "write_music_pieces(\"beethoven\")  &  premiered_by(\"symphony_no_9\", \"vienna_music_society\")  &  is_orchestra(\"vienna_music_society\")  &  leads(\"beethoven\", \"vienna_music_society\") ",
                    "all x ((is_orchestra(x)  ->   exists y (premiered_by(y, x))) )"
                ]
            ],
            "label": "True",
            "text": "Constants:\nsymphony_no_9 ::: represents Symphony No. 9\nbeethoven ::: represents Beethoven\nvienna_music_society ::: represents Vienna Music Society\norchestra ::: represents orchestra\nconductors ::: represents conductors\nPredicates:\nis_music_piece(x) ::: x is a music piece.\nwrite_music_pieces(x) ::: x writes music pieces.\npremiered_by(x, y) ::: x is premiered by y.\nis_orchestra(x) ::: x is an orchestra.\nleads(x, y) ::: x leads y.\nled_by(x, y) ::: x is led by y.\nPremises:\nis_music_piece(\"symphony_no_9\") ::: Symphony No. 9 is a music piece.\n\u2200x (write_music_pieces(x) \u2192 is_music_piece(x)) ::: Composers write music pieces.\nwrite_music_pieces(\"beethoven\") \u2227 premiered_by(\"symphony_no_9\", \"vienna_music_society\") \u2227 is_orchestra(\"vienna_music_society\") \u2227 leads(\"beethoven\", \"vienna_music_society\") ::: Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society.\n\u2200x (is_orchestra(x) \u2192 \u2203y (premiered_by(y, x))) ::: Orchestras are led by conductors.\nQuery:\n\u2203x (is_orchestra(x) \u2227 \u2203y (premiered_by(y, x))) ::: Some orchestras premiered music pieces.",
            "problem": " Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSome orchestras premiered music pieces."
        },
        {
            "example": 38,
            "response": [
                " -is_conductor(\"beethoven\")",
                [
                    "is_music_piece(\"symphony_no_9\") ",
                    "all x ((write_music(x)  ->  is_music_piece(x)) )",
                    "write_music(\"beethoven\")  &  is_music_piece(\"symphony_no_9\") ",
                    "premiere(\"vienna_music_society\", \"symphony_no_9\")  &  is_orchestra(\"vienna_music_society\") ",
                    "lead(\"beethoven\", \"vienna_music_society\")  &  is_orchestra(\"vienna_music_society\") ",
                    "all x ((is_orchestra(x)  ->   exists y (lead(y, x)  &  is_conductor(y))) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\nsymphony_no_9 ::: represents Symphony No. 9\nvienna_music_society ::: represents Vienna Music Society\nbeethoven ::: represents Beethoven\nPredicates:\nis_music_piece(x) ::: x is a music piece.\nwrite_music(x) ::: x writes music.\npremiere(x, y) ::: x premieres y.\nis_orchestra(x) ::: x is an orchestra.\nlead(x, y) ::: x leads y.\nis_conductor(x) ::: x is a conductor.\nPremises:\nis_music_piece(\"symphony_no_9\") ::: Symphony No. 9 is a music piece.\n\u2200x (write_music(x) \u2192 is_music_piece(x)) ::: Composers write music pieces.\nwrite_music(\"beethoven\") \u2227 is_music_piece(\"symphony_no_9\") ::: Beethoven wrote Symphony No. 9.\npremiere(\"vienna_music_society\", \"symphony_no_9\") \u2227 is_orchestra(\"vienna_music_society\") ::: Vienna Music Society premiered Symphony No. 9.\nlead(\"beethoven\", \"vienna_music_society\") \u2227 is_orchestra(\"vienna_music_society\") ::: Beethoven leads the Vienna Music Society.\n\u2200x (is_orchestra(x) \u2192 \u2203y (lead(y, x) \u2227 is_conductor(y))) ::: Orchestras are led by conductors.\nQuery:\n\u00acis_conductor(\"beethoven\") ::: Beethoven is not a conductor.",
            "problem": " Symphony No. 9 is a music piece. Composers write music pieces. Beethoven wrote Symphony No. 9. Vienna Music Society premiered Symphony No. 9. Vienna Music Society is an orchestra. Beethoven leads the Vienna Music Society. Orchestras are led by conductors.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBeethoven is not a conductor."
        },
        {
            "example": 39,
            "response": [
                "is_mass_product_design(design_by(\"max\", x))",
                [
                    "all x ((is_design_style(x)  ->  is_timeless(x)) )",
                    "all x ((is_mass_product_design(x)  ->   -is_timeless(x)) )",
                    "(is_design_style(\"zaha_hadid\")  |  is_design_style(\"kelly_wearstler\")) ",
                    "all x ((is_design_style(x)  ->  is_evocative(x)) )",
                    "all x ((is_design_style(x)  ->  is_dreamy(x)) )",
                    "all x ((is_timeless(design_by(\"max\", x))  ->  (is_mass_product_design(design_by(\"max\", x))  &  is_evocative(design_by(\"max\", x)))) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nzaha_hadid ::: represents Zaha Hadid\nkelly_wearstler ::: represents Kelly Wearstler\nmax ::: represents Max\nPredicates:\nis_design_style(x) ::: x is a design style.\nis_timeless(x) ::: x is timeless.\nis_mass_product_design(x) ::: x is a mass product design.\nis_evocative(x) ::: x is evocative.\nis_dreamy(x) ::: x is dreamy.\ndesign_by(x, y) ::: x is a design by y.\nPremises:\n\u2200x (is_design_style(x) \u2192 is_timeless(x)) ::: All of Zaha Hadid's design styles are timeless.\n\u2200x (is_mass_product_design(x) \u2192 \u00acis_timeless(x)) ::: No mass product design is timeless.\n(is_design_style(\"zaha_hadid\") \u2228 is_design_style(\"kelly_wearstler\")) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.\n\u2200x (is_design_style(x) \u2192 is_evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.\n\u2200x (is_design_style(x) \u2192 is_dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.\n\u2200x (is_timeless(design_by(\"max\", x)) \u2192 (is_mass_product_design(design_by(\"max\", x)) \u2227 is_evocative(design_by(\"max\", x)))) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nQuery:\nis_mass_product_design(design_by(\"max\", x)) ::: A design by Max is a mass product design.",
            "problem": " All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style.  All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nA design by Max is a mass product design."
        },
        {
            "example": 40,
            "response": [
                "exists x ((design_by(\"max\", x)  &  is_evocative(x)  &  is_dreamy(x)))",
                [
                    "all x ((is_design_style(x)  ->  is_timeless(x)) )",
                    "all x ((is_mass_product_design(x)  ->   -is_timeless(x)) )",
                    "(is_design_style(\"zaha_hadid\")  |  is_design_style(\"kelly_wearstler\")) ",
                    "all x ((is_design_style(x)  ->  is_evocative(x)) )",
                    "all x ((is_design_style(x)  ->  is_dreamy(x)) )",
                    "all x ((is_timeless(design_by(\"max\", x))  ->  (is_mass_product_design(design_by(\"max\", x))  &  is_evocative(design_by(\"max\", x)))) )"
                ]
            ],
            "label": "True",
            "text": "Constants:\nzaha_hadid ::: represents Zaha Hadid\nkelly_wearstler ::: represents Kelly Wearstler\nmax ::: represents Max\nPredicates:\nis_design_style(x) ::: x is a design style.\nis_timeless(x) ::: x is timeless.\nis_mass_product_design(x) ::: x is a mass product design.\nis_evocative(x) ::: x is evocative.\nis_dreamy(x) ::: x is dreamy.\ndesign_by(x, y) ::: x is a design by y.\nPremises:\n\u2200x (is_design_style(x) \u2192 is_timeless(x)) ::: All of Zaha Hadid's design styles are timeless.\n\u2200x (is_mass_product_design(x) \u2192 \u00acis_timeless(x)) ::: No mass product design is timeless.\n(is_design_style(\"zaha_hadid\") \u2228 is_design_style(\"kelly_wearstler\")) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.\n\u2200x (is_design_style(x) \u2192 is_evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.\n\u2200x (is_design_style(x) \u2192 is_dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.\n\u2200x (is_timeless(design_by(\"max\", x)) \u2192 (is_mass_product_design(design_by(\"max\", x)) \u2227 is_evocative(design_by(\"max\", x)))) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nQuery:\n\u2203x (design_by(\"max\", x) \u2227 is_evocative(x) \u2227 is_dreamy(x)) ::: A design by Max is evocative and dreamy.",
            "problem": " All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style.  All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nA design by Max is evocative and dreamy."
        },
        {
            "example": 41,
            "response": [
                "(is_evocative(design_by(\"max\", x))  |  is_dreamy(design_by(\"max\", x)))",
                [
                    "all x ((is_design_style(x)  ->  is_timeless(x)) )",
                    "all x ((is_mass_product_design(x)  ->   -is_timeless(x)) )",
                    "(is_design_style(\"zaha_hadid\")  |  is_design_style(\"kelly_wearstler\")) ",
                    "all x ((is_design_style(x)  ->  is_evocative(x)) )",
                    "all x ((is_design_style(x)  ->  is_dreamy(x)) )",
                    "all x ((is_timeless(design_by(\"max\", x))  ->  (is_mass_product_design(design_by(\"max\", x))  &  is_evocative(design_by(\"max\", x)))) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\nzaha_hadid ::: represents Zaha Hadid\nkelly_wearstler ::: represents Kelly Wearstler\nmax ::: represents Max\nPredicates:\nis_design_style(x) ::: x is a design style.\nis_timeless(x) ::: x is timeless.\nis_mass_product_design(x) ::: x is a mass product design.\nis_evocative(x) ::: x is evocative.\nis_dreamy(x) ::: x is dreamy.\ndesign_by(x, y) ::: x is a design by y.\nPremises:\n\u2200x (is_design_style(x) \u2192 is_timeless(x)) ::: All of Zaha Hadid's design styles are timeless.\n\u2200x (is_mass_product_design(x) \u2192 \u00acis_timeless(x)) ::: No mass product design is timeless.\n(is_design_style(\"zaha_hadid\") \u2228 is_design_style(\"kelly_wearstler\")) ::: Either Zaha Hadid's design style or Kelly Wearstler's design style.\n\u2200x (is_design_style(x) \u2192 is_evocative(x)) ::: All of Kelly Wearstler's design styles are evocative.\n\u2200x (is_design_style(x) \u2192 is_dreamy(x)) ::: All of Kelly Wearstler's design styles are dreamy.\n\u2200x (is_timeless(design_by(\"max\", x)) \u2192 (is_mass_product_design(design_by(\"max\", x)) \u2227 is_evocative(design_by(\"max\", x)))) ::: If a design by Max is timeless, then a design by Max is a mass product design and evocative.\nQuery:\n(is_evocative(design_by(\"max\", x)) \u2228 is_dreamy(design_by(\"max\", x))) ::: A design by Max is either evocative or dreamy.",
            "problem": " All of Zaha Hadid's design styles are timeless. No mass product design is timeless. Either Zaha Hadid's design style or Kelly Wearstler's design style.  All of Kelly Wearstler's design styles are evocative. All of Kelly Wearstler's design styles are dreamy. If a design by Max is timeless, then a design by Max is a mass product design and evocative.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nA design by Max is either evocative or dreamy."
        },
        {
            "example": 42,
            "response": [
                "is_active(\"Coco_Gauff\")",
                [
                    "all x ((is_ranked_highly(x)  ->  is_active(x)) )",
                    "all x ((lost_to(x, \"Iga_Swiatek\")  ->  is_ranked_highly(x)) )",
                    "all x ((is_female(x)  &  lost_to(x, \"Iga_Swiatek\")  ->  is_ranked_highly(x)) )",
                    "all x ((is_female(x)  &  is_player(x)  &  is_female(\"Roland_Garros_2022\"))  |  (is_male(x)  &  is_player(x)  &  is_male(\"Roland_Garros_2022\")) )",
                    "all x ((is_male(x)  &  is_player(x)  &  is_male(\"Roland_Garros_2022\")  ->  lost_to(x, \"Rafael_Nadal\")) )",
                    "(is_ranked_highly(\"Coco_Gauff\")  |  lost_to(\"Coco_Gauff\", \"Rafael_Nadal\"))  ->   -(is_male(\"Coco_Gauff\")  &  is_player(\"Coco_Gauff\")  &  is_male(\"Roland_Garros_2022\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nCoco_Gauff ::: represents Coco Gauff\nIga_\u015awi\u0105tek ::: represents Iga \u015awi\u0105tek\nRafael_Nadal ::: represents Rafael Nadal\nRoland_Garros_2022 ::: represents Roland Garros 2022\nPredicates:\nis_player(x) ::: x is a tennis player.\nis_female(x) ::: x is a female tennis player.\nis_male(x) ::: x is a male tennis player.\nis_ranked_highly(x) ::: x is ranked highly by the Women's Tennis Association.\nis_active(x) ::: x is among the most active players in major tennis.\nlost_to(x, y) ::: x lost to y.\nPremises:\n\u2200x (is_ranked_highly(x) \u2192 is_active(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\n\u2200x (lost_to(x, \"Iga_\u015awi\u0105tek\") \u2192 is_ranked_highly(x)) ::: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\n\u2200x (is_female(x) \u2227 lost_to(x, \"Iga_\u015awi\u0105tek\") \u2192 is_ranked_highly(x)) ::: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\n\u2200x (is_female(x) \u2227 is_player(x) \u2227 is_female(\"Roland_Garros_2022\")) \u2228 (is_male(x) \u2227 is_player(x) \u2227 is_male(\"Roland_Garros_2022\")) ::: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\n\u2200x (is_male(x) \u2227 is_player(x) \u2227 is_male(\"Roland_Garros_2022\") \u2192 lost_to(x, \"Rafael_Nadal\")) ::: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\n(is_ranked_highly(\"Coco_Gauff\") \u2228 lost_to(\"Coco_Gauff\", \"Rafael_Nadal\")) \u2192 \u00ac(is_male(\"Coco_Gauff\") \u2227 is_player(\"Coco_Gauff\") \u2227 is_male(\"Roland_Garros_2022\")) ::: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nQuery:\nis_active(\"Coco_Gauff\") ::: Coco Gauff is among the most active players in major tennis.",
            "problem": " If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.  Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.  All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nCoco Gauff is among the most active players in major tennis."
        },
        {
            "example": 43,
            "response": [
                "lost_to(coco_gauff, rafael_nadal)",
                [
                    "all x ((is_ranked_highly(x)  ->  is_active(x)) )",
                    "all x ((lost_to(x, iga_swiatek)  ->  is_ranked_highly(x)) )",
                    "all x ((is_female(x)  &  lost_to(x, iga_swiatek)  ->  is_ranked_highly(x)) )",
                    "all x ((is_female(x)  &  is_male(x)) )",
                    "all x ((is_male(x)  &  lost_to(x, rafael_nadal)) )",
                    "((is_ranked_highly(coco_gauff)  |  lost_to(coco_gauff, rafael_nadal))  ->   -is_male(coco_gauff)) "
                ]
            ],
            "label": "Uncertain",
            "text": "###\nConstants:\niga_swiatek ::: represents Iga \u015awi\u0105tek\nroland_garros_2022 ::: represents Roland Garros 2022\nrafael_nadal ::: represents Rafael Nadal\ncoco_gauff ::: represents Coco Gauff\nPredicates:\nis_player(x) ::: x is a tennis player.\nis_ranked_highly(x) ::: x is ranked highly by the Women's Tennis Association.\nis_active(x) ::: x is among the most active players in major tennis.\nlost_to(x, y) ::: x lost to y.\nis_female(x) ::: x is a female tennis player.\nis_male(x) ::: x is a male tennis player.\nPremises:\n\u2200x (is_ranked_highly(x) \u2192 is_active(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\n\u2200x (lost_to(x, iga_swiatek) \u2192 is_ranked_highly(x)) ::: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\n\u2200x (is_female(x) \u2227 lost_to(x, iga_swiatek) \u2192 is_ranked_highly(x)) ::: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\n\u2200x (is_female(x) \u2227 is_male(x)) ::: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\n\u2200x (is_male(x) \u2227 lost_to(x, rafael_nadal)) ::: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\n((is_ranked_highly(coco_gauff) \u2228 lost_to(coco_gauff, rafael_nadal)) \u2192 \u00acis_male(coco_gauff)) ::: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nQuery:\nlost_to(coco_gauff, rafael_nadal) ::: Coco Gauff has lost to Rafael Nadal.\n---",
            "problem": " If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.  Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.  All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nCoco Gauff has lost to Rafael Nadal."
        },
        {
            "example": 44,
            "response": [
                " -(lost_to(\"Coco_Gauff\", \"Iga_Swiatek\")  |  is_active(\"Coco_Gauff\"))",
                [
                    "all x ((is_ranked_highly(x)  ->  is_active(x)) )",
                    "all x ((lost_to(x, \"Iga_Swiatek\")  ->  is_ranked_highly(x)) )",
                    "all x ((is_female(x)  &  is_player(x)  &  is_at(\"Roland_Garros_2022\", x)  ->  lost_to(x, \"Iga_Swiatek\")) )",
                    " all x (is_female(x)  &  is_player(x)  &  is_at(\"Roland_Garros_2022\", x))  |  ( all y (is_male(y)  &  is_player(y)  &  is_at(\"Roland_Garros_2022\", y))) ",
                    "all x ((is_male(x)  &  is_player(x)  &  is_at(\"Roland_Garros_2022\", x)  ->  lost_to(x, \"Rafael_Nadal\")) )",
                    "(is_ranked_highly(\"Coco_Gauff\")  |  lost_to(\"Coco_Gauff\", \"Rafael_Nadal\"))  ->   -(is_male(\"Coco_Gauff\")  &  is_player(\"Coco_Gauff\")  &  is_at(\"Roland_Garros_2022\", \"Coco_Gauff\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nCoco_Gauff ::: represents Coco Gauff\nIga_\u015awi\u0105tek ::: represents Iga \u015awi\u0105tek\nRoland_Garros_2022 ::: represents Roland Garros 2022\nRafael_Nadal ::: represents Rafael Nadal\nPredicates:\nis_player(x) ::: x is a player.\nis_ranked_highly(x) ::: x is ranked highly by the Women's Tennis Association.\nis_active(x) ::: x is among the most active players in major tennis.\nlost_to(x, y) ::: x lost to y.\nis_female(x) ::: x is a female.\nis_male(x) ::: x is a male.\nPremises:\n\u2200x (is_ranked_highly(x) \u2192 is_active(x)) ::: If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.\n\u2200x (lost_to(x, \"Iga_\u015awi\u0105tek\") \u2192 is_ranked_highly(x)) ::: Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association.\n\u2200x (is_female(x) \u2227 is_player(x) \u2227 is_at(\"Roland_Garros_2022\", x) \u2192 lost_to(x, \"Iga_\u015awi\u0105tek\")) ::: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\n\u2200x (is_female(x) \u2227 is_player(x) \u2227 is_at(\"Roland_Garros_2022\", x)) \u2228 (\u2200y (is_male(y) \u2227 is_player(y) \u2227 is_at(\"Roland_Garros_2022\", y))) ::: Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.\n\u2200x (is_male(x) \u2227 is_player(x) \u2227 is_at(\"Roland_Garros_2022\", x) \u2192 lost_to(x, \"Rafael_Nadal\")) ::: All male tennis players at Roland Garros 2022 lost to Rafael Nadal.\n(is_ranked_highly(\"Coco_Gauff\") \u2228 lost_to(\"Coco_Gauff\", \"Rafael_Nadal\")) \u2192 \u00ac(is_male(\"Coco_Gauff\") \u2227 is_player(\"Coco_Gauff\") \u2227 is_at(\"Roland_Garros_2022\", \"Coco_Gauff\")) ::: If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nQuery:\n\u00ac(lost_to(\"Coco_Gauff\", \"Iga_\u015awi\u0105tek\") \u2228 is_active(\"Coco_Gauff\")) ::: Coco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis.",
            "problem": " If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis.  Everyone who lost to Iga \u015awi\u0105tek is ranked highly by the Women's Tennis Association. All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek. Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022.  All male tennis players at Roland Garros 2022 lost to Rafael Nadal. If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nCoco Gauff is not a player who lost to Iga \u015awi\u0105tek or one of the most active players in major tennis."
        },
        {
            "example": 45,
            "response": [
                " -( exists x (is_pet(x)  &  is_cat(x)))",
                [
                    "all x ((is_cat(x)  ->  is_mammal(x)) )",
                    "exists x ((is_pet(x)  &  is_not_mammal(x)) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\ncats ::: represents cats\nmammals ::: represents mammals\npets ::: represents pets\nPredicates:\nis_cat(x) ::: x is a cat.\nis_mammal(x) ::: x is a mammal.\nis_pet(x) ::: x is a pet.\nis_not_mammal(x) ::: x is not a mammal.\nPremises:\n\u2200x (is_cat(x) \u2192 is_mammal(x)) ::: All cats are mammals.\n\u2203x (is_pet(x) \u2227 is_not_mammal(x)) ::: Some pets are not mammals.\nQuery:\n\u00ac(\u2203x (is_pet(x) \u2227 is_cat(x))) ::: No pets are cats.",
            "problem": " All cats are mammals. Some pets are not mammals.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nNo pets are cats."
        },
        {
            "example": 46,
            "response": [
                "is_favorite_season(\"james\", \"summer\")",
                [
                    " all x (is_favorite_season(x, \"spring\")  |  is_favorite_season(x, \"summer\")  |  is_favorite_season(x, \"fall\")  |  is_favorite_season(x, \"winter\")) ",
                    "all x ((wants_long_vacation(x)  ->  is_favorite_season(x, \"summer\")) )",
                    "is_favorite_season(\"emma\", \"summer\") ",
                    " -(is_favorite_season(\"mia\", \"summer\")) ",
                    "wants_long_vacation(\"james\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nspring ::: represents spring\nsummer ::: represents summer\nfall ::: represents fall\nwinter ::: represents winter\nemma ::: represents emma\nmia ::: represents mia\njames ::: represents james\nPredicates:\nis_favorite_season(x, y) ::: x's favorite season is y.\nwants_long_vacation(x) ::: x wants to have a long vacation.\nPremises:\n\u2200x (is_favorite_season(x, \"spring\") \u2228 is_favorite_season(x, \"summer\") \u2228 is_favorite_season(x, \"fall\") \u2228 is_favorite_season(x, \"winter\")) ::: There are four seasons in a year: Spring, Summer, Fall, and Winter.\n\u2200x (wants_long_vacation(x) \u2192 is_favorite_season(x, \"summer\")) ::: All students who want to have a long vacation love summer the most.\nis_favorite_season(\"emma\", \"summer\") ::: Emma's favorite season is summer.\n\u00ac(is_favorite_season(\"mia\", \"summer\")) ::: Mia's favorite season is not the same as Emma's.\nwants_long_vacation(\"james\") ::: James wants to have a long vacation.\nQuery:\nis_favorite_season(\"james\", \"summer\") ::: James's favorite season is summer.",
            "problem": " [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's.  James wants to have a long vacation.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJames's favorite season is summer."
        },
        {
            "example": 47,
            "response": [
                " -is_favorite_season(\"james\", \"fall\")",
                [
                    " all x (is_favorite_season(x, \"spring\")  |  is_favorite_season(x, \"summer\")  |  is_favorite_season(x, \"fall\")  |  is_favorite_season(x, \"winter\")) ",
                    "all x ((wants_long_vacation(x)  ->  is_favorite_season(x, \"summer\")) )",
                    "is_favorite_season(\"emma\", \"summer\") ",
                    " -(is_favorite_season(\"mia\", \"summer\")) ",
                    "wants_long_vacation(\"james\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nspring ::: represents spring\nsummer ::: represents summer\nfall ::: represents fall\nwinter ::: represents winter\nemma ::: represents emma\nmia ::: represents mia\njames ::: represents james\nPredicates:\nis_favorite_season(x, y) ::: x's favorite season is y.\nwants_long_vacation(x) ::: x wants to have a long vacation.\nPremises:\n\u2200x (is_favorite_season(x, \"spring\") \u2228 is_favorite_season(x, \"summer\") \u2228 is_favorite_season(x, \"fall\") \u2228 is_favorite_season(x, \"winter\")) ::: There are four seasons in a year: Spring, Summer, Fall, and Winter.\n\u2200x (wants_long_vacation(x) \u2192 is_favorite_season(x, \"summer\")) ::: All students who want to have a long vacation love summer the most.\nis_favorite_season(\"emma\", \"summer\") ::: Emma's favorite season is summer.\n\u00ac(is_favorite_season(\"mia\", \"summer\")) ::: Mia's favorite season is not the same as Emma's.\nwants_long_vacation(\"james\") ::: James wants to have a long vacation.\nQuery:\n\u00acis_favorite_season(\"james\", \"fall\") ::: James's favorite season is not fall.",
            "problem": " [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's.  James wants to have a long vacation.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJames's favorite season is fall."
        },
        {
            "example": 48,
            "response": [
                "is_favorite_season(\"mia\", \"spring\")",
                [
                    " all x (is_favorite_season(x, \"spring\")  |  is_favorite_season(x, \"summer\")  |  is_favorite_season(x, \"fall\")  |  is_favorite_season(x, \"winter\")) ",
                    "all x ((wants_long_vacation(x)  ->  is_favorite_season(x, \"summer\")) )",
                    "is_favorite_season(\"emma\", \"summer\") ",
                    " -(is_favorite_season(\"mia\", \"summer\")) ",
                    "wants_long_vacation(\"james\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nspring ::: represents spring\nsummer ::: represents summer\nfall ::: represents fall\nwinter ::: represents winter\nemma ::: represents emma\nmia ::: represents mia\njames ::: represents james\nPredicates:\nis_favorite_season(x, y) ::: x's favorite season is y.\nwants_long_vacation(x) ::: x wants to have a long vacation.\nPremises:\n\u2200x (is_favorite_season(x, \"spring\") \u2228 is_favorite_season(x, \"summer\") \u2228 is_favorite_season(x, \"fall\") \u2228 is_favorite_season(x, \"winter\")) ::: There are four seasons in a year: Spring, Summer, Fall, and Winter.\n\u2200x (wants_long_vacation(x) \u2192 is_favorite_season(x, \"summer\")) ::: All students who want to have a long vacation love summer the most.\nis_favorite_season(\"emma\", \"summer\") ::: Emma's favorite season is summer.\n\u00ac(is_favorite_season(\"mia\", \"summer\")) ::: Mia's favorite season is not the same as Emma's.\nwants_long_vacation(\"james\") ::: James wants to have a long vacation.\nQuery:\nis_favorite_season(\"mia\", \"spring\") ::: Mia's favorite season is spring.",
            "problem": " [BG] There are four seasons in a year: Spring, Summer, Fall, and Winter. All students who want to have a long vacation love summer the most. Emma's favorite season is summer. Mia's favorite season is not the same as Emma's.  James wants to have a long vacation.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMia's favorite season is spring."
        },
        {
            "example": 49,
            "response": [
                "is_printed_text(\"1984\")",
                [
                    "all x ((is_digital_media(x)  ->   -is_analog(x)) )",
                    "all x ((is_printed_text(x)  ->  is_analog(x)) )",
                    "all x ((is_streaming_service(x)  ->  is_digital_media(x)) )",
                    "all x ((is_hardcover_book(x)  ->  is_printed_text(x)) )",
                    "is_streaming_service(\"1984\")  ->  is_hardcover_book(\"1984\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\n1984 ::: represents 1984\nPredicates:\nis_digital_media(x) ::: x is digital media.\nis_analog(x) ::: x is analog.\nis_printed_text(x) ::: x is printed text.\nis_streaming_service(x) ::: x is a streaming service.\nis_hardcover_book(x) ::: x is a hardcover book.\nPremises:\n\u2200x (is_digital_media(x) \u2192 \u00acis_analog(x)) ::: No digital media are analog.\n\u2200x (is_printed_text(x) \u2192 is_analog(x)) ::: Every printed text is analog.\n\u2200x (is_streaming_service(x) \u2192 is_digital_media(x)) ::: All streaming services are digital.\n\u2200x (is_hardcover_book(x) \u2192 is_printed_text(x)) ::: If an object is a hardcover book then it is printed text.\nis_streaming_service(\"1984\") \u2192 is_hardcover_book(\"1984\") ::: If 1984 is a streaming service, then 1984 is a hardcover book.\nQuery:\nis_printed_text(\"1984\") ::: 1984 is printed text.",
            "problem": " No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\n1984 is printed text."
        },
        {
            "example": 50,
            "response": [
                "is_streaming_service(\"1984\")",
                [
                    "all x ((is_digital_media(x)  ->   -is_analog(x)) )",
                    "all x ((is_printed_text(x)  ->  is_analog(x)) )",
                    "all x ((is_streaming_service(x)  ->  is_digital_media(x)) )",
                    "all x ((is_hardcover_book(x)  ->  is_printed_text(x)) )",
                    "is_streaming_service(\"1984\")  ->  is_hardcover_book(\"1984\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\n1984 ::: represents 1984\nPredicates:\nis_digital_media(x) ::: x is digital media.\nis_analog(x) ::: x is analog.\nis_printed_text(x) ::: x is printed text.\nis_streaming_service(x) ::: x is a streaming service.\nis_hardcover_book(x) ::: x is a hardcover book.\nPremises:\n\u2200x (is_digital_media(x) \u2192 \u00acis_analog(x)) ::: No digital media are analog.\n\u2200x (is_printed_text(x) \u2192 is_analog(x)) ::: Every printed text is analog.\n\u2200x (is_streaming_service(x) \u2192 is_digital_media(x)) ::: All streaming services are digital.\n\u2200x (is_hardcover_book(x) \u2192 is_printed_text(x)) ::: If an object is a hardcover book then it is printed text.\nis_streaming_service(\"1984\") \u2192 is_hardcover_book(\"1984\") ::: If 1984 is a streaming service, then 1984 is a hardcover book.\nQuery:\nis_streaming_service(\"1984\") ::: 1984 is a streaming service.",
            "problem": " No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\n1984 is a streaming service."
        },
        {
            "example": 51,
            "response": [
                " -is_streaming_service(\"1984\")",
                [
                    "all x ((is_digital_media(x)  ->   -is_analog(x)) )",
                    "all x ((is_printed_text(x)  ->  is_analog(x)) )",
                    "all x ((is_streaming_service(x)  ->  is_digital_media(x)) )",
                    "all x ((is_hardcover_book(x)  ->  is_printed_text(x)) )",
                    "is_streaming_service(\"1984\")  ->  is_hardcover_book(\"1984\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\n1984 ::: represents 1984\nPredicates:\nis_digital_media(x) ::: x is digital media.\nis_analog(x) ::: x is analog.\nis_printed_text(x) ::: x is printed text.\nis_streaming_service(x) ::: x is a streaming service.\nis_hardcover_book(x) ::: x is a hardcover book.\nPremises:\n\u2200x (is_digital_media(x) \u2192 \u00acis_analog(x)) ::: No digital media are analog.\n\u2200x (is_printed_text(x) \u2192 is_analog(x)) ::: Every printed text is analog.\n\u2200x (is_streaming_service(x) \u2192 is_digital_media(x)) ::: All streaming services are digital.\n\u2200x (is_hardcover_book(x) \u2192 is_printed_text(x)) ::: If an object is a hardcover book then it is printed text.\nis_streaming_service(\"1984\") \u2192 is_hardcover_book(\"1984\") ::: If 1984 is a streaming service, then 1984 is a hardcover book.\nQuery:\n\u00acis_streaming_service(\"1984\") ::: 1984 is not a streaming service.",
            "problem": " No digital media are analog. Every printed text is analog. All streaming services are digital. If an object is a hardcover book then it is printed text. If 1984 is a streaming service, then 1984 is a hardcover book.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\n1984 is not a streaming service."
        },
        {
            "example": 52,
            "response": [
                "is_romance_language(\"basque\")",
                [
                    "all x ((is_romance_language(x)  ->  is_indo_european_language(x)) )",
                    "is_language_family(\"romance_languages\") ",
                    " all x (is_language_family(x)  ->   all y (is_language_family(y)  ->  is_related(x, y))) ",
                    "is_romance_language(\"french\")  &  is_romance_language(\"spanish\") ",
                    "is_related(\"german\", \"spanish\") ",
                    " -is_related(\"basque\", y) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nfrench ::: represents french\nspanish ::: represents spanish\ngerman ::: represents german\nbasque ::: represents basque\nPredicates:\nis_romance_language(x) ::: x is a Romance language.\nis_indo_european_language(x) ::: x is an Indo-European language.\nis_language_family(x) ::: x is a language family.\nis_related(x, y) ::: x is related to y.\nPremises:\n\u2200x (is_romance_language(x) \u2192 is_indo_european_language(x)) ::: All Romance languages are Indo-European languages.\nis_language_family(\"romance_languages\") ::: The Romance languages are a language family.\n\u2200x (is_language_family(x) \u2192 \u2200y (is_language_family(y) \u2192 is_related(x, y))) ::: All languages within a language family are related to each other.\nis_romance_language(\"french\") \u2227 is_romance_language(\"spanish\") ::: French and Spanish are both Romance languages.\nis_related(\"german\", \"spanish\") ::: German is related to Spanish.\n\u00acis_related(\"basque\", y) ::: Basque is not related to any other language.\nQuery:\nis_romance_language(\"basque\") ::: Basque is a Romance language.",
            "problem": " All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBasque is a Romance language."
        },
        {
            "example": 53,
            "response": [
                "is_romance_language(\"german\")",
                [
                    "all x ((is_romance_language(x)  ->  is_indo_european_language(x)) )",
                    "is_language_family(\"romance_languages\") ",
                    " all x (is_language_family(x)  ->   all y (is_language_family(y)  ->  is_related(x, y))) ",
                    "is_romance_language(\"french\")  &  is_romance_language(\"spanish\") ",
                    "is_related(\"german\", \"spanish\") ",
                    " -is_related(\"basque\", y) "
                ]
            ],
            "label": "Uncertain",
            "text": "###\nConstants:\nfrench ::: represents french\nspanish ::: represents spanish\ngerman ::: represents german\nbasque ::: represents basque\nPredicates:\nis_romance_language(x) ::: x is a Romance language.\nis_indo_european_language(x) ::: x is an Indo-European language.\nis_language_family(x) ::: x is a language family.\nis_related(x, y) ::: x is related to y.\nPremises:\n\u2200x (is_romance_language(x) \u2192 is_indo_european_language(x)) ::: All Romance languages are Indo-European languages.\nis_language_family(\"romance_languages\") ::: The Romance languages are a language family.\n\u2200x (is_language_family(x) \u2192 \u2200y (is_language_family(y) \u2192 is_related(x, y))) ::: All languages within a language family are related to each other.\nis_romance_language(\"french\") \u2227 is_romance_language(\"spanish\") ::: French and Spanish are both Romance languages.\nis_related(\"german\", \"spanish\") ::: German is related to Spanish.\n\u00acis_related(\"basque\", y) ::: Basque is not related to any other language.\nQuery:\nis_romance_language(\"german\") ::: German is a Romance language.",
            "problem": " All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nGerman is a Romance language."
        },
        {
            "example": 54,
            "response": [
                "is_indo_european_language(\"french\")",
                [
                    "all x ((is_romance_language(x)  ->  is_indo_european_language(x)) )",
                    "is_language_family(\"romance_languages\") ",
                    "all x ((is_language_family(x)  ->  is_related(x, x)) )",
                    "is_romance_language(\"french\")  &  is_romance_language(\"spanish\") ",
                    "is_related(\"german\", \"spanish\") ",
                    " -is_related(\"basque\", y) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nfrench ::: represents french\nspanish ::: represents spanish\ngerman ::: represents german\nbasque ::: represents basque\nPredicates:\nis_romance_language(x) ::: x is a Romance language.\nis_indo_european_language(x) ::: x is an Indo-European language.\nis_language_family(x) ::: x is a language family.\nis_related(x, y) ::: x is related to y.\nPremises:\n\u2200x (is_romance_language(x) \u2192 is_indo_european_language(x)) ::: All Romance languages are Indo-European languages.\nis_language_family(\"romance_languages\") ::: The Romance languages are a language family.\n\u2200x (is_language_family(x) \u2192 is_related(x, x)) ::: All languages within a language family are related to each other.\nis_romance_language(\"french\") \u2227 is_romance_language(\"spanish\") ::: French and Spanish are both Romance languages.\nis_related(\"german\", \"spanish\") ::: German is related to Spanish.\n\u00acis_related(\"basque\", y) ::: Basque is not related to any other language.\nQuery:\nis_indo_european_language(\"french\") ::: French is an Indo-European language.",
            "problem": " All Romance languages are Indo-European languages. The Romance languages are a language family. All languages within a language family are related to each other. French and Spanish are both Romance languages. German is related to Spanish. Basque is not related to any other language.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nFrench is an Indo-European language."
        },
        {
            "example": 55,
            "response": [
                "is_soccer_player(\"robert_lewandowski\")",
                [
                    "is_striker(\"robert_lewandowski\") ",
                    "all x ((is_striker(x)  ->  is_soccer_player(x)) )",
                    "left(\"robert_lewandowski\", \"bayern_munchen\") ",
                    "left(x, y)  ->  no_longer_play_for(x, y) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nrobert_lewandowski ::: represents Robert Lewandowski\nbayern_munchen ::: represents Bayern Munchen\nPredicates:\nis_striker(x) ::: x is a striker.\nis_soccer_player(x) ::: x is a soccer player.\nleft(x, y) ::: x left y.\nno_longer_play_for(x, y) ::: x no longer plays for y.\nPremises:\nis_striker(\"robert_lewandowski\") ::: Robert Lewandowski is a striker.\n\u2200x (is_striker(x) \u2192 is_soccer_player(x)) ::: Strikers are soccer players.\nleft(\"robert_lewandowski\", \"bayern_munchen\") ::: Robert Lewandowski left Bayern Munchen.\nleft(x, y) \u2192 no_longer_play_for(x, y) ::: If a player left a team they no longer play for that team.\nQuery:\nis_soccer_player(\"robert_lewandowski\") ::: Robert Lewandowski is a soccer player.",
            "problem": " Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRobert Lewandowski is a soccer player."
        },
        {
            "example": 56,
            "response": [
                " -plays_for(\"robert_lewandowski\", \"bayern_munchen\")",
                [
                    "is_striker(\"robert_lewandowski\") ",
                    "all x ((is_striker(x)  ->  is_soccer_player(x)) )",
                    "left(\"robert_lewandowski\", \"bayern_munchen\") ",
                    " all x  all y (left(x, y)  ->   -plays_for(x, y)) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nrobert_lewandowski ::: represents robert lewandowski\nbayern_munchen ::: represents bayern munchen\nPredicates:\nis_striker(x) ::: x is a striker.\nis_soccer_player(x) ::: x is a soccer player.\nleft(x, y) ::: x left y.\nplays_for(x, y) ::: x plays for y.\nPremises:\nis_striker(\"robert_lewandowski\") ::: Robert Lewandowski is a striker.\n\u2200x (is_striker(x) \u2192 is_soccer_player(x)) ::: Strikers are soccer players.\nleft(\"robert_lewandowski\", \"bayern_munchen\") ::: Robert Lewandowski left Bayern Munchen.\n\u2200x \u2200y (left(x, y) \u2192 \u00acplays_for(x, y)) ::: If a player left a team they no longer play for that team.\nQuery:\n\u00acplays_for(\"robert_lewandowski\", \"bayern_munchen\") ::: Robert Lewandowski plays for Bayern Munchen.",
            "problem": " Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRobert Lewandowski plays for Bayern Munchen."
        },
        {
            "example": 57,
            "response": [
                "is_star(\"robert_lewandowski\")",
                [
                    "is_striker(\"robert_lewandowski\") ",
                    "all x ((is_striker(x)  ->  is_soccer_player(x)) )",
                    "left(\"robert_lewandowski\", \"bayern_munchen\") ",
                    "left(x, y)  ->  no_longer_play_for(x, y) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nrobert_lewandowski ::: represents Robert Lewandowski\nbayern_munchen ::: represents Bayern Munchen\nPredicates:\nis_striker(x) ::: x is a striker.\nis_soccer_player(x) ::: x is a soccer player.\nleft(x, y) ::: x left y.\nno_longer_play_for(x, y) ::: x no longer plays for y.\nPremises:\nis_striker(\"robert_lewandowski\") ::: Robert Lewandowski is a striker.\n\u2200x (is_striker(x) \u2192 is_soccer_player(x)) ::: Strikers are soccer players.\nleft(\"robert_lewandowski\", \"bayern_munchen\") ::: Robert Lewandowski left Bayern Munchen.\nleft(x, y) \u2192 no_longer_play_for(x, y) ::: If a player left a team they no longer play for that team.\nQuery:\nis_star(\"robert_lewandowski\") ::: Robert Lewandowski is a star.",
            "problem": " Robert Lewandowski is a striker. [BG] Strikers are soccer players. Robert Lewandowski left Bayern Munchen. [BG] If a player left a team they no longer play for that team.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRobert Lewandowski is a star."
        },
        {
            "example": 58,
            "response": [
                "is_in_same_state(\"butte\", \"pierre\")",
                [
                    "is_city(\"billings\")  &  is_in(\"billings\", \"montana\") ",
                    "is_city(\"montana\")  &  is_in(\"montana\", \"butte\")  &  is_in(\"montana\", \"helena\")  &  is_in(\"montana\", \"missoula\") ",
                    "is_city(\"white_sulphur_springs\")  &  is_city(\"butte\")  &  is_in_same_state(\"white_sulphur_springs\", \"butte\") ",
                    " -is_in(\"pierre\", \"montana\") ",
                    "all x ((is_in(\"butte\", x)  ->   -is_in(\"pierre\", x)) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\nbillings ::: represents billings\nmontana ::: represents montana\nbutte ::: represents butte\nhelena ::: represents helena\nmissoula ::: represents missoula\nwhite_sulphur_springs ::: represents white sulphur springs\npierre ::: represents pierre\nPredicates:\nis_city(x) ::: x is a city.\nis_in(x, y) ::: x is in y.\nis_in_same_state(x, y) ::: x is in the same state as y.\nPremises:\nis_city(\"billings\") \u2227 is_in(\"billings\", \"montana\") ::: Billings is a city in Montana.\nis_city(\"montana\") \u2227 is_in(\"montana\", \"butte\") \u2227 is_in(\"montana\", \"helena\") \u2227 is_in(\"montana\", \"missoula\") ::: Montana includes the cities of Butte, Helena, and Missoula.\nis_city(\"white_sulphur_springs\") \u2227 is_city(\"butte\") \u2227 is_in_same_state(\"white_sulphur_springs\", \"butte\") ::: White Sulphur Springs and Butte are cities in the same state.\n\u00acis_in(\"pierre\", \"montana\") ::: The city of Pierre is not in Montana.\n\u2200x (is_in(\"butte\", x) \u2192 \u00acis_in(\"pierre\", x)) ::: Any city in Butte is not in Pierre.\nQuery:\nis_in_same_state(\"butte\", \"pierre\") ::: Butte and Pierre are in the same state.",
            "problem": " Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nButte and Pierre are in the same state."
        },
        {
            "example": 59,
            "response": [
                "is_in_same_state(\"pierre\", \"bismarck\")",
                [
                    "is_city(\"billings\")  &  is_in(\"billings\", \"montana\") ",
                    "(is_city(\"butte\")  &  is_in(\"butte\", \"montana\"))  &  (is_city(\"helena\")  &  is_in(\"helena\", \"montana\"))  &  (is_city(\"missoula\")  &  is_in(\"missoula\", \"montana\")) ",
                    "(is_city(\"white_sulphur_springs\")  &  is_in(\"white_sulphur_springs\", \"montana\"))  &  (is_city(\"butte\")  &  is_in(\"butte\", \"montana\")) ",
                    " -is_in(\"pierre\", \"montana\") ",
                    "all x ((is_city(x)  &  is_in(\"butte\", x)  ->   -is_in(\"pierre\", x)) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nbillings ::: represents billings\nmontana ::: represents montana\nbutte ::: represents butte\nhelena ::: represents helena\nmissoula ::: represents missoula\nwhite_sulphur_springs ::: represents white sulphur springs\npierre ::: represents pierre\nbismarck ::: represents bismarck\nPredicates:\nis_city(x) ::: x is a city.\nis_in(x, y) ::: x is in y.\nis_in_same_state(x, y) ::: x is in the same state as y.\nPremises:\nis_city(\"billings\") \u2227 is_in(\"billings\", \"montana\") ::: Billings is a city in Montana.\n(is_city(\"butte\") \u2227 is_in(\"butte\", \"montana\")) \u2227 (is_city(\"helena\") \u2227 is_in(\"helena\", \"montana\")) \u2227 (is_city(\"missoula\") \u2227 is_in(\"missoula\", \"montana\")) ::: Montana includes the cities of Butte, Helena, and Missoula.\n(is_city(\"white_sulphur_springs\") \u2227 is_in(\"white_sulphur_springs\", \"montana\")) \u2227 (is_city(\"butte\") \u2227 is_in(\"butte\", \"montana\")) ::: White Sulphur Springs and Butte are cities in the same state.\n\u00acis_in(\"pierre\", \"montana\") ::: The city of Pierre is not in Montana.\n\u2200x (is_city(x) \u2227 is_in(\"butte\", x) \u2192 \u00acis_in(\"pierre\", x)) ::: Any city in Butte is not in Pierre.\nQuery:\nis_in_same_state(\"pierre\", \"bismarck\") ::: Pierre and Bismarck are in the same state.",
            "problem": " Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPierre and Bismarck are in the same state."
        },
        {
            "example": 60,
            "response": [
                "is_in(\"missoula\", \"montana\")",
                [
                    "is_city(\"billings\")  &  is_in(\"billings\", \"montana\") ",
                    "is_city(\"butte\")  &  is_city(\"helena\")  &  is_city(\"missoula\")  &  is_in(\"butte\", \"montana\")  &  is_in(\"helena\", \"montana\")  &  is_in(\"missoula\", \"montana\") ",
                    "is_city(\"white_sulphur_springs\")  &  is_city(\"butte\")  &  is_in_same_state(\"white_sulphur_springs\", \"butte\") ",
                    " -is_in(\"pierre\", \"montana\") ",
                    "all x ((is_city(x)  &  is_in(\"butte\", x)  ->   -is_in(\"pierre\", x)) )"
                ]
            ],
            "label": "True",
            "text": "Constants:\nbillings ::: represents billings\nmontana ::: represents montana\nbutte ::: represents butte\nhelena ::: represents helena\nmissoula ::: represents missoula\nwhite_sulphur_springs ::: represents white sulphur springs\npierre ::: represents pierre\nPredicates:\nis_city(x) ::: x is a city.\nis_in(x, y) ::: x is in y.\nis_in_same_state(x, y) ::: x is in the same state as y.\nPremises:\nis_city(\"billings\") \u2227 is_in(\"billings\", \"montana\") ::: Billings is a city in Montana.\nis_city(\"butte\") \u2227 is_city(\"helena\") \u2227 is_city(\"missoula\") \u2227 is_in(\"butte\", \"montana\") \u2227 is_in(\"helena\", \"montana\") \u2227 is_in(\"missoula\", \"montana\") ::: Montana includes the cities of Butte, Helena, and Missoula.\nis_city(\"white_sulphur_springs\") \u2227 is_city(\"butte\") \u2227 is_in_same_state(\"white_sulphur_springs\", \"butte\") ::: White Sulphur Springs and Butte are cities in the same state.\n\u00acis_in(\"pierre\", \"montana\") ::: The city of Pierre is not in Montana.\n\u2200x (is_city(x) \u2227 is_in(\"butte\", x) \u2192 \u00acis_in(\"pierre\", x)) ::: Any city in Butte is not in Pierre.\nQuery:\nis_in(\"missoula\", \"montana\") ::: Montana is home to the city of Missoula.",
            "problem": " Billings is a city in Montana. Montana includes the cities of Butte, Helena, and Missoula. White Sulphur Springs and Butte are cities in the same state. The city of Pierre is not in Montana. Any city in Butte is not in Pierre.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMontana is home to the city of Missoula."
        },
        {
            "example": 61,
            "response": [
                "has_visa(\"mike\", \"F1\")",
                [
                    "all x ((is_student(x)  &  has_visa(x, \"F1\")  |  has_visa(x, \"J1\")) )",
                    "all x (((is_student(x)  &  has_visa(x, \"F1\"))  ->  (wants_to_work(x)  ->  needs_to_apply(x, \"CPT\")  |  needs_to_apply(x, \"OPT\"))) )",
                    "is_student(\"mike\") ",
                    "(wants_to_work(\"mike\")  ->  needs_to_apply(\"mike\", \"CPT\")) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nmike ::: represents mike\nPredicates:\nhas_visa(x, y) ::: x has visa y.\nneeds_to_apply(x, y) ::: x needs to apply for y.\nis_student(x) ::: x is a student.\nwants_to_work(x) ::: x wants to work.\nPremises:\n\u2200x (is_student(x) \u2227 has_visa(x, \"F1\") \u2228 has_visa(x, \"J1\")) ::: International students in US have either an F1 visa or a J1 visa.\n\u2200x ((is_student(x) \u2227 has_visa(x, \"F1\")) \u2192 (wants_to_work(x) \u2192 needs_to_apply(x, \"CPT\") \u2228 needs_to_apply(x, \"OPT\"))) ::: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nis_student(\"mike\") ::: Mike is an international student.\n(wants_to_work(\"mike\") \u2192 needs_to_apply(\"mike\", \"CPT\")) ::: Mike needs to apply for CPT if he wants to work in the US.\nQuery:\nhas_visa(\"mike\", \"F1\") ::: Mike has an F1 visa.",
            "problem": " International students in US have either an F1 visa or a J1 visa. An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US. Mike is an international student. Mike needs to apply for CPT if he wants to work in the US.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMike has an F1 visa."
        },
        {
            "example": 62,
            "response": [
                "has_visa(\"mike\", \"J1\")",
                [
                    "all x ((is_student(x)  &  has_visa(x, \"F1\")  |  has_visa(x, \"J1\")) )",
                    "all x ((is_student(x)  &  has_visa(x, \"F1\")  &  wants_to_work(x, \"US\")  ->  needs_to_apply(x, \"CPT\", x)  |  needs_to_apply(x, \"OPT\", x)) )",
                    "is_student(\"mike\") ",
                    "needs_to_apply(\"mike\", \"CPT\", \"mike\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nmike ::: represents mike\nPredicates:\nhas_visa(x, y) ::: x has visa y.\nneeds_to_apply(x, y, z) ::: x needs to apply for y if z.\nis_student(x) ::: x is a student.\nwants_to_work(x, y) ::: x wants to work in y.\nPremises:\n\u2200x (is_student(x) \u2227 has_visa(x, \"F1\") \u2228 has_visa(x, \"J1\")) ::: International students in US have either an F1 visa or a J1 visa.\n\u2200x (is_student(x) \u2227 has_visa(x, \"F1\") \u2227 wants_to_work(x, \"US\") \u2192 needs_to_apply(x, \"CPT\", x) \u2228 needs_to_apply(x, \"OPT\", x)) ::: An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nis_student(\"mike\") ::: Mike is an international student.\nneeds_to_apply(\"mike\", \"CPT\", \"mike\") ::: Mike needs to apply for CPT if he wants to work in the US.\nQuery:\nhas_visa(\"mike\", \"J1\") ::: Mike has a J1 visa.",
            "problem": " International students in US have either an F1 visa or a J1 visa. An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US. Mike is an international student. Mike needs to apply for CPT if he wants to work in the US.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMike has a J1 visa."
        },
        {
            "example": 63,
            "response": [
                "is_pet(\"ted\")",
                [
                    "all x ((is_cow(x)  ->  is_bovine(x)) )",
                    "exists x ((is_pet(x)  &  is_cow(x)) )",
                    "all x ((is_bovine(x)  ->  is_domesticated(x)) )",
                    " all x (is_domesticated(x)  ->   -is_alligator(x)) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nted ::: represents ted\nPredicates:\nis_cow(x) ::: x is a cow.\nis_bovine(x) ::: x is a bovine.\nis_pet(x) ::: x is a pet.\nis_domesticated(x) ::: x is domesticated.\nis_alligator(x) ::: x is an alligator.\nPremises:\n\u2200x (is_cow(x) \u2192 is_bovine(x)) ::: All cows are bovines.\n\u2203x (is_pet(x) \u2227 is_cow(x)) ::: Some pets are cows.\n\u2200x (is_bovine(x) \u2192 is_domesticated(x)) ::: If something is a bovine, then it is domesticated.\n\u2200x (is_domesticated(x) \u2192 \u00acis_alligator(x)) ::: No domesticated animals are alligators.\nQuery:\nis_pet(\"ted\") ::: Ted is a pet.",
            "problem": " All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTed is a pet."
        },
        {
            "example": 64,
            "response": [
                "is_pet(\"ted\")  &  is_cow(\"ted\")",
                [
                    "all x ((is_cow(x)  ->  is_bovine(x)) )",
                    "exists x ((is_pet(x)  &  is_cow(x)) )",
                    "all x ((is_bovine(x)  ->  is_domesticated(x)) )",
                    " all x (is_domesticated(x)  ->   -is_alligator(x)) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nted ::: represents ted\nPredicates:\nis_cow(x) ::: x is a cow.\nis_bovine(x) ::: x is a bovine.\nis_pet(x) ::: x is a pet.\nis_domesticated(x) ::: x is domesticated.\nis_alligator(x) ::: x is an alligator.\nPremises:\n\u2200x (is_cow(x) \u2192 is_bovine(x)) ::: All cows are bovines.\n\u2203x (is_pet(x) \u2227 is_cow(x)) ::: Some pets are cows.\n\u2200x (is_bovine(x) \u2192 is_domesticated(x)) ::: If something is a bovine, then it is domesticated.\n\u2200x (is_domesticated(x) \u2192 \u00acis_alligator(x)) ::: No domesticated animals are alligators.\nQuery:\nis_pet(\"ted\") \u2227 is_cow(\"ted\") ::: Ted is a pet and a cow.",
            "problem": " All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTed is a pet and a cow."
        },
        {
            "example": 65,
            "response": [
                "is_cow(\"ted\")  ->   -is_pet(\"ted\")",
                [
                    "all x ((is_cow(x)  ->  is_bovine(x)) )",
                    "exists x ((is_pet(x)  &  is_cow(x)) )",
                    "all x ((is_bovine(x)  ->  is_domesticated(x)) )",
                    " all x (is_domesticated(x)  ->   -is_alligator(x)) ",
                    "is_alligator(\"ted\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nted ::: represents ted\nPredicates:\nis_cow(x) ::: x is a cow.\nis_bovine(x) ::: x is a bovine.\nis_pet(x) ::: x is a pet.\nis_domesticated(x) ::: x is domesticated.\nis_alligator(x) ::: x is an alligator.\nPremises:\n\u2200x (is_cow(x) \u2192 is_bovine(x)) ::: All cows are bovines.\n\u2203x (is_pet(x) \u2227 is_cow(x)) ::: Some pets are cows.\n\u2200x (is_bovine(x) \u2192 is_domesticated(x)) ::: If something is a bovine, then it is domesticated.\n\u2200x (is_domesticated(x) \u2192 \u00acis_alligator(x)) ::: No domesticated animals are alligators.\nis_alligator(\"ted\") ::: Ted is an alligator.\nQuery:\nis_cow(\"ted\") \u2192 \u00acis_pet(\"ted\") ::: If Ted is a cow, then Ted is not a pet.",
            "problem": " All cows are bovines. Some pets are cows. If something is a bovine, then it is domesticated. No domesticated animals are alligators. Ted is an aligator.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Ted is a cow, then Ted is not a pet."
        },
        {
            "example": 66,
            "response": [
                "moved_to(\"yale_university\", \"new_haven\")",
                [
                    "is_private(\"yale_university\")  &  is_ivy_league(\"yale_university\")  &  is_research_university(\"yale_university\") ",
                    "moved_to(\"yale_university\", \"new_haven\")  &  moved_to(\"yale_university\", \"year_1716\") ",
                    "has_endowment(\"yale_university\", \"$42_3_billion\") ",
                    "is_organized_into(\"yale_university\", \"27_constituent_colleges_and_schools\")  &  is_constituent_college(\"yale_university\")  &  is_school(\"yale_university\")  &  is_school(\"yale_university\")  &  is_school(\"yale_university\") ",
                    "is_constituent_college(\"benjamin_franklin_college\")  &  is_constituent_college(\"berkeley_college\")  &  is_constituent_college(\"branford_college\")  &  is_constituent_college(\"davenport_college\")  &  is_constituent_college(\"ezra_stiles_college\")  &  is_constituent_college(\"grace_hopper_college\")  &  is_constituent_college(\"jonathan_edwards_college\")  &  is_constituent_college(\"morse_college\")  &  is_constituent_college(\"pauli_murray_college\")  &  is_constituent_college(\"pierson_college\")  &  is_constituent_college(\"saybrook_college\")  &  is_constituent_college(\"silliman_college\")  &  is_constituent_college(\"timothy_dwight_college\")  &  is_constituent_college(\"trumbull_college\") "
                ]
            ],
            "label": "True",
            "text": "###\nConstants:\nyale_university ::: represents Yale University\nnew_haven ::: represents New Haven\nyear_1716 ::: represents the year 1716\n$42.3_billion ::: represents the value of $42.3 billion\nbenjamin_franklin_college ::: represents Benjamin Franklin College\nberkeley_college ::: represents Berkeley College\nbranford_college ::: represents Branford College\ndavenport_college ::: represents Davenport College\nezra_stiles_college ::: represents Ezra Stiles College\ngrace_hopper_college ::: represents Grace Hopper College\njonathan_edwards_college ::: represents Jonathan Edwards College\nmorse_college ::: represents Morse College\npauli_murray_college ::: represents Pauli Murray College\npierson_college ::: represents Pierson College\nsaybrook_college ::: represents Saybrook College\nsilliman_college ::: represents Silliman College\ntimothy_dwight_college ::: represents Timothy Dwight College\ntrumbull_college ::: represents Trumbull College\nPredicates:\nis_private(x) ::: x is a private university.\nis_ivy_league(x) ::: x is an Ivy League university.\nis_research_university(x) ::: x is a research university.\nmoved_to(x, y) ::: x moved to y.\nhas_endowment(x, y) ::: x has an endowment valued at y.\nis_organized_into(x, y) ::: x is organized into y.\nis_constituent_college(x) ::: x is a constituent college.\nis_school(x) ::: x is a school.\nPremises:\nis_private(\"yale_university\") \u2227 is_ivy_league(\"yale_university\") \u2227 is_research_university(\"yale_university\") ::: Yale University is a private Ivy League research university.\nmoved_to(\"yale_university\", \"new_haven\") \u2227 moved_to(\"yale_university\", \"year_1716\") ::: Yale University moved to New Haven in 1716.\nhas_endowment(\"yale_university\", \"$42.3_billion\") ::: Yale university's endowment was valued at $42.3 billion.\nis_organized_into(\"yale_university\", \"27 constituent colleges and schools\") \u2227 is_constituent_college(\"yale_university\") \u2227 is_school(\"yale_university\") \u2227 is_school(\"yale_university\") \u2227 is_school(\"yale_university\") ::: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nis_constituent_college(\"benjamin_franklin_college\") \u2227 is_constituent_college(\"berkeley_college\") \u2227 is_constituent_college(\"branford_college\") \u2227 is_constituent_college(\"davenport_college\") \u2227 is_constituent_college(\"ezra_stiles_college\") \u2227 is_constituent_college(\"grace_hopper_college\") \u2227 is_constituent_college(\"jonathan_edwards_college\") \u2227 is_constituent_college(\"morse_college\") \u2227 is_constituent_college(\"pauli_murray_college\") \u2227 is_constituent_college(\"pierson_college\") \u2227 is_constituent_college(\"saybrook_college\") \u2227 is_constituent_college(\"silliman_college\") \u2227 is_constituent_college(\"timothy_dwight_college\") \u2227 is_constituent_college(\"trumbull_college\") ::: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nQuery:\nmoved_to(\"yale_university\", \"new_haven\") ::: A private Ivy League research university moved to New Haven.\n---",
            "problem": " Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nA private Ivy League research university moved to New Haven."
        },
        {
            "example": 67,
            "response": [
                "has_largest_endowment(\"yale_university\")",
                [
                    "is_private(\"yale_university\")  &  is_ivy_league(\"yale_university\")  &  is_research_university(\"yale_university\") ",
                    "moved_to(\"yale_university\", \"new_haven\")  &  moved_to(\"yale_university\", \"year_1716\") ",
                    "has_endowment_value(\"yale_university\", \"dollar_42_3_billion\") ",
                    "is_organized_into(\"yale_university\", \"constituent_colleges\")  &  is_organized_into(\"yale_university\", \"residential_colleges\")  &  is_organized_into(\"yale_university\", \"yale_graduate_school_of_arts_and_sciences\")  &  is_organized_into(\"yale_university\", \"professional_schools\") "
                ]
            ],
            "label": "Uncertain",
            "text": "###\nConstants:\nyale_university ::: represents Yale University\nnew_haven ::: represents New Haven\nyear_1716 ::: represents the year 1716\nendowment_value ::: represents the endowment value\ndollar_42.3_billion ::: represents the value of $42.3 billion\nconstituent_colleges ::: represents the constituent colleges\nresidential_colleges ::: represents the residential colleges\nyale_graduate_school_of_arts_and_sciences ::: represents the Yale Graduate School of Arts and Sciences\nprofessional_schools ::: represents the professional schools\nbenjamin_franklin_college ::: represents Benjamin Franklin College\nberkeley_college ::: represents Berkeley College\nbranford_college ::: represents Branford College\ndavenport_college ::: represents Davenport College\nezra_stiles_college ::: represents Ezra Stiles College\ngrace_hopper_college ::: represents Grace Hopper College\njonathan_edwards_college ::: represents Jonathan Edwards College\nmorse_college ::: represents Morse College\npauli_murray_college ::: represents Pauli Murray College\npierson_college ::: represents Pierson College\nsaybrook_college ::: represents Saybrook College\nsilliman_college ::: represents Silliman College\ntimothy_dwight_college ::: represents Timothy Dwight College\ntrumbull_college ::: represents Trumbull College\nPredicates:\nis_private(x) ::: x is a private university.\nis_ivy_league(x) ::: x is an Ivy League university.\nis_research_university(x) ::: x is a research university.\nmoved_to(x, y) ::: x moved to y.\nhas_endowment_value(x, y) ::: x has an endowment value of y.\nis_organized_into(x, y) ::: x is organized into y.\nPremises:\nis_private(\"yale_university\") \u2227 is_ivy_league(\"yale_university\") \u2227 is_research_university(\"yale_university\") ::: Yale University is a private Ivy League research university.\nmoved_to(\"yale_university\", \"new_haven\") \u2227 moved_to(\"yale_university\", \"year_1716\") ::: Yale University moved to New Haven in 1716.\nhas_endowment_value(\"yale_university\", \"dollar_42.3_billion\") ::: Yale university's endowment was valued at $42.3 billion.\nis_organized_into(\"yale_university\", \"constituent_colleges\") \u2227 is_organized_into(\"yale_university\", \"residential_colleges\") \u2227 is_organized_into(\"yale_university\", \"yale_graduate_school_of_arts_and_sciences\") \u2227 is_organized_into(\"yale_university\", \"professional_schools\") ::: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nQuery:\nhas_largest_endowment(\"yale_university\") ::: Yale University has the largest university endowment of any educational institution.\n---",
            "problem": " Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nYale University has the largest university endowment of any educational institution."
        },
        {
            "example": 68,
            "response": [
                "is_constituent_of(\"pierson_college\", \"residential_colleges\")",
                [
                    "is_private(\"yale_university\")  &  is_ivy_league(\"yale_university\")  &  is_research_university(\"yale_university\") ",
                    "moved_to(\"yale_university\", \"new_haven\")  &  moved_to(\"yale_university\", \"year_1716\") ",
                    "has_endowment_value(\"yale_university\", \"$42_3_billion\") ",
                    "is_organized_into(\"yale_university\", \"27_constituent_colleges_and_schools\")  &  is_constituent_of(\"residential_colleges\", \"yale_university\")  &  is_constituent_of(\"yale_graduate_school_of_arts_and_sciences\", \"yale_university\")  &  is_constituent_of(\"twelve_professional_schools\", \"yale_university\") ",
                    "is_list_of(\"residential_colleges\", \"benjamin_franklin_college,_berkeley_college,_branford_college,_davenport_college,_ezra_stiles_college,_grace_hopper_college,_jonathan_edwards_college,_morse_college,_pauli_murray_college,_pierson_college,_saybrook_college,_silliman_college,_timothy_dwight_college,_trumbull_college\") "
                ]
            ],
            "label": "True",
            "text": "###\nConstants:\nyale_university ::: represents Yale University\nnew_haven ::: represents New Haven\nyear_1716 ::: represents the year 1716\nendowment_value ::: represents the endowment value\nresidential_colleges ::: represents the residential colleges\nyale_graduate_school_of_arts_and_sciences ::: represents the Yale Graduate School of Arts and Sciences\nbenjamin_franklin_college ::: represents Benjamin Franklin College\nberkeley_college ::: represents Berkeley College\nbranford_college ::: represents Branford College\ndavenport_college ::: represents Davenport College\nezra_stiles_college ::: represents Ezra Stiles College\ngrace_hopper_college ::: represents Grace Hopper College\njonathan_edwards_college ::: represents Jonathan Edwards College\nmorse_college ::: represents Morse College\npauli_murray_college ::: represents Pauli Murray College\npierson_college ::: represents Pierson College\nsaybrook_college ::: represents Saybrook College\nsilliman_college ::: represents Silliman College\ntimothy_dwight_college ::: represents Timothy Dwight College\ntrumbull_college ::: represents Trumbull College\nPredicates:\nis_private(x) ::: x is a private university.\nis_ivy_league(x) ::: x is an Ivy League university.\nis_research_university(x) ::: x is a research university.\nmoved_to(x, y) ::: x moved to y.\nhas_endowment_value(x, y) ::: x has an endowment value of y.\nis_organized_into(x, y) ::: x is organized into y.\nis_constituent_of(x, y) ::: x is a constituent of y.\nis_list_of(x, y) ::: x is a list of y.\nPremises:\nis_private(\"yale_university\") \u2227 is_ivy_league(\"yale_university\") \u2227 is_research_university(\"yale_university\") ::: Yale University is a private Ivy League research university.\nmoved_to(\"yale_university\", \"new_haven\") \u2227 moved_to(\"yale_university\", \"year_1716\") ::: Yale University moved to New Haven in 1716.\nhas_endowment_value(\"yale_university\", \"$42.3 billion\") ::: Yale university's endowment was valued at $42.3 billion.\nis_organized_into(\"yale_university\", \"27 constituent colleges and schools\") \u2227 is_constituent_of(\"residential_colleges\", \"yale_university\") \u2227 is_constituent_of(\"yale_graduate_school_of_arts_and_sciences\", \"yale_university\") \u2227 is_constituent_of(\"twelve professional schools\", \"yale_university\") ::: Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools.\nis_list_of(\"residential_colleges\", \"benjamin_franklin_college, berkeley_college, branford_college, davenport_college, ezra_stiles_college, grace_hopper_college, jonathan_edwards_college, morse_college, pauli_murray_college, pierson_college, saybrook_college, silliman_college, timothy_dwight_college, trumbull_college\") ::: A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\nQuery:\nis_constituent_of(\"pierson_college\", \"residential_colleges\") ::: Pierson College is a residential college at Yale.",
            "problem": " Yale University is a private Ivy League research university. Yale University moved to New Haven in 1716. Yale university's endowment was valued at $42.3 billion. Yale University has been organized into 27 constituent colleges and schools: the residential colleges, the Yale Graduate School of Arts and Sciences, and twelve professional schools. A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPierson College is a residential college at Yale."
        },
        {
            "example": 69,
            "response": [
                "script_editor(\"andrew_collins\", \"the_secret_dude_society\")",
                [
                    "is_british(\"badults\")  &  is_sitcom_series(\"badults\")  &  starring(\"badults\", \"pappys\") ",
                    "piloted_in(\"badults\", \"july_2013\")  &  piloted_in(\"badults\", \"bbc_three\") ",
                    "working_title(\"badults\", \"the_secret_dude_society\") ",
                    "script_editor(\"andrew_collins\", \"badults\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nbadults ::: represents Badults\npappys ::: represents Pappy's\nbbc_three ::: represents BBC Three\nthe_secret_dude_society ::: represents The Secret Dude Society\nandrew_collins ::: represents Andrew Collins\nPredicates:\nis_british(x) ::: x is British.\nis_sitcom_series(x) ::: x is a sitcom series.\nstarring(x, y) ::: x is starring y.\npiloted_in(x, y) ::: x piloted in y.\nworking_title(x, y) ::: x has a working title y.\nscript_editor(x, y) ::: x is the script editor for y.\nPremises:\nis_british(\"badults\") \u2227 is_sitcom_series(\"badults\") \u2227 starring(\"badults\", \"pappys\") ::: Badults is a British Sitcom series, starring members of Pappy's.\npiloted_in(\"badults\", \"july_2013\") \u2227 piloted_in(\"badults\", \"bbc_three\") ::: Badults piloted in July 2013 on BBC Three.\nworking_title(\"badults\", \"the_secret_dude_society\") ::: The Working title \"The Secret Dude Society\" was used for Badults.\nscript_editor(\"andrew_collins\", \"badults\") ::: Andrew Collins was the script editor for Badults.\nQuery:\nscript_editor(\"andrew_collins\", \"the_secret_dude_society\") ::: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
            "problem": " Badults is a British Sitcom series, starring members of Pappy's. Badults piloted in July 2013 on BBC Three. The Working title \"The Secret Dude Society\" was used for Badults. Andrew Collins was the script editor for Badults",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\"."
        },
        {
            "example": 70,
            "response": [
                " -( exists x (starring(\"pappys\", x)  &  (piloted_in(x, \"bbc_two\")  |  piloted_in(x, \"bbc_three\"))))",
                [
                    "is_british(\"badults\")  &  is_sitcom_series(\"badults\")  &  starring(\"pappys\", \"badults\") ",
                    "piloted_in(\"badults\", \"july_2013\")  &  piloted_in(\"badults\", \"bbc_three\") ",
                    "working_title(\"badults\", \"the_secret_dude_society\") ",
                    "is_script_editor(\"andrew_collins\", \"badults\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nbadults ::: represents badults\npappys ::: represents pappys\nbbc_three ::: represents bbc three\nworking_title ::: represents the working title\nandrew_collins ::: represents andrew collins\nbbc_two ::: represents bbc two\nPredicates:\nis_british(x) ::: x is British.\nis_sitcom_series(x) ::: x is a sitcom series.\nstarring(x, y) ::: x is starring in y.\npiloted_in(x, y) ::: x piloted in y.\nused_for(x, y) ::: x was used for y.\nis_script_editor(x, y) ::: x is the script editor for y.\nPremises:\nis_british(\"badults\") \u2227 is_sitcom_series(\"badults\") \u2227 starring(\"pappys\", \"badults\") ::: Badults is a British Sitcom series, starring members of Pappy's.\npiloted_in(\"badults\", \"july_2013\") \u2227 piloted_in(\"badults\", \"bbc_three\") ::: Badults piloted in July 2013 on BBC Three.\nworking_title(\"badults\", \"the_secret_dude_society\") ::: The Working title \"The Secret Dude Society\" was used for Badults.\nis_script_editor(\"andrew_collins\", \"badults\") ::: Andrew Collins was the script editor for Badults.\nQuery:\n\u00ac(\u2203x (starring(\"pappys\", x) \u2227 (piloted_in(x, \"bbc_two\") \u2228 piloted_in(x, \"bbc_three\")))) ::: No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.",
            "problem": " Badults is a British Sitcom series, starring members of Pappy's. Badults piloted in July 2013 on BBC Three. The Working title \"The Secret Dude Society\" was used for Badults. Andrew Collins was the script editor for Badults",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nNo members of Pappy's have starred for a show piloting on BBC Two or BBC Three."
        },
        {
            "example": 71,
            "response": [
                "is_company_stock(\"KO\")",
                [
                    "all x ((is_growth_company_stock(x)  ->  is_volatile(x)) )",
                    "all x ((is_volatile(x)  ->   -is_suitable_for_retirement_fund(x)) )",
                    "exists x ((is_growth_company_stock(x)  &  is_company_stock(x)) )",
                    "all x ((is_mature_company_stock(x)  ->  is_suitable_for_retirement_fund(x)) )",
                    "is_mature_company_stock(\"KO\") "
                ]
            ],
            "label": "Uncertain",
            "text": "###\nConstants:\nKO ::: represents KO\nPredicates:\nis_growth_company_stock(x) ::: x is a growth company stock.\nis_volatile(x) ::: x is volatile.\nis_suitable_for_retirement_fund(x) ::: x is suitable for a retirement fund.\nis_mature_company_stock(x) ::: x is a mature company stock.\nPremises:\n\u2200x (is_growth_company_stock(x) \u2192 is_volatile(x)) ::: All growth companies\u2019 stocks are volatile.\n\u2200x (is_volatile(x) \u2192 \u00acis_suitable_for_retirement_fund(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\n\u2203x (is_growth_company_stock(x) \u2227 is_company_stock(x)) ::: Some companies\u2019 stocks are growth companies\u2019 stocks.\n\u2200x (is_mature_company_stock(x) \u2192 is_suitable_for_retirement_fund(x)) ::: All mature companies\u2019 stocks are suitable for a retirement fund.\nis_mature_company_stock(\"KO\") ::: KO is a mature company\u2019s stock.\nQuery:\nis_company_stock(\"KO\") ::: KO is a company stock.",
            "problem": " All growth companies\u2019 stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies\u2019 stocks are growth companies\u2019 stocks. All mature companies\u2019 stocks are suitable for a retirement fund. KO is a mature company\u2019s stock.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nKO is a company stock."
        },
        {
            "example": 72,
            "response": [
                "is_growth_company_stock(\"KO\")",
                [
                    "all x ((is_growth_company_stock(x)  ->  is_volatile(x)) )",
                    "all x ((is_volatile(x)  ->   -is_suitable_for_retirement_fund(x)) )",
                    "exists x ((is_growth_company_stock(x)) )",
                    "all x ((is_mature_company_stock(x)  ->  is_suitable_for_retirement_fund(x)) )",
                    "is_mature_company_stock(\"KO\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nKO ::: represents KO\nPredicates:\nis_growth_company_stock(x) ::: x is a growth company's stock.\nis_volatile(x) ::: x is volatile.\nis_suitable_for_retirement_fund(x) ::: x is suitable for a retirement fund.\nis_mature_company_stock(x) ::: x is a mature company's stock.\nPremises:\n\u2200x (is_growth_company_stock(x) \u2192 is_volatile(x)) ::: All growth companies\u2019 stocks are volatile.\n\u2200x (is_volatile(x) \u2192 \u00acis_suitable_for_retirement_fund(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\n\u2203x (is_growth_company_stock(x)) ::: Some companies\u2019 stocks are growth companies\u2019 stocks.\n\u2200x (is_mature_company_stock(x) \u2192 is_suitable_for_retirement_fund(x)) ::: All mature companies\u2019 stocks are suitable for a retirement fund.\nis_mature_company_stock(\"KO\") ::: KO is a mature company\u2019s stock.\nQuery:\nis_growth_company_stock(\"KO\") ::: KO is a company stock and a growth company\u2019s stock.",
            "problem": " All growth companies\u2019 stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies\u2019 stocks are growth companies\u2019 stocks. All mature companies\u2019 stocks are suitable for a retirement fund. KO is a mature company\u2019s stock.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nKO is a company stock and a growth company\u2019s stock."
        },
        {
            "example": 73,
            "response": [
                "((is_growth_company_stock(\"KO\")  |  is_volatile(\"KO\"))  ->  ( -is_company_stock(\"KO\")  &   -is_volatile(\"KO\")))",
                [
                    "all x ((is_growth_company_stock(x)  ->  is_volatile(x)) )",
                    "all x ((is_volatile(x)  ->   -is_suitable_for_retirement_fund(x)) )",
                    "exists x ((is_growth_company_stock(x)  &  is_company_stock(x)) )",
                    "all x ((is_mature_company_stock(x)  ->  is_suitable_for_retirement_fund(x)) )",
                    "is_mature_company_stock(\"KO\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nKO ::: represents KO\nPredicates:\nis_growth_company_stock(x) ::: x is a growth company's stock.\nis_volatile(x) ::: x is volatile.\nis_suitable_for_retirement_fund(x) ::: x is suitable for a retirement fund.\nis_mature_company_stock(x) ::: x is a mature company's stock.\nPremises:\n\u2200x (is_growth_company_stock(x) \u2192 is_volatile(x)) ::: All growth companies\u2019 stocks are volatile.\n\u2200x (is_volatile(x) \u2192 \u00acis_suitable_for_retirement_fund(x)) ::: If the stock price is volatile, then it is not suitable for a retirement fund.\n\u2203x (is_growth_company_stock(x) \u2227 is_company_stock(x)) ::: Some companies\u2019 stocks are growth companies\u2019 stocks.\n\u2200x (is_mature_company_stock(x) \u2192 is_suitable_for_retirement_fund(x)) ::: All mature companies\u2019 stocks are suitable for a retirement fund.\nis_mature_company_stock(\"KO\") ::: KO is a mature company\u2019s stock.\nQuery:\n((is_growth_company_stock(\"KO\") \u2228 is_volatile(\"KO\")) \u2192 (\u00acis_company_stock(\"KO\") \u2227 \u00acis_volatile(\"KO\"))) ::: If KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile.",
            "problem": " All growth companies\u2019 stocks are volatile. If the stock price is volatile, then it is not suitable for a retirement fund. Some companies\u2019 stocks are growth companies\u2019 stocks. All mature companies\u2019 stocks are suitable for a retirement fund. KO is a mature company\u2019s stock.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf KO is a growth company\u2019s stock or if its price is volatile, then KO is neither a company\u2019s stock nor is its price volatile."
        },
        {
            "example": 74,
            "response": [
                "begin_with(\"joe\", 34)",
                [
                    "all x ((is_vehicle_registration_plate(x)  ->  begin_with(x, 34)) )",
                    "all x (( -begin_with(x, 34)  ->   -is_from(x, \"Istanbul\")) )",
                    "is_from(\"joe\", \"Istanbul\") ",
                    "begin_with(\"tom\", 35) ",
                    "begin_with(\"tom\", 35)  ->   -begin_with(\"tom\", 34) "
                ]
            ],
            "label": "True",
            "text": "Constants:\njoe ::: represents joe\ntom ::: represents tom\nPredicates:\nbegin_with(x, y) ::: x begins with the number y.\nis_from(x, y) ::: x is from y.\nPremises:\n\u2200x (is_vehicle_registration_plate(x) \u2192 begin_with(x, 34)) ::: All vehicle registration plates in Istanbul begin with the number 34.\n\u2200x (\u00acbegin_with(x, 34) \u2192 \u00acis_from(x, \"Istanbul\")) ::: Plates that do not begin with the number 34 are not from Istanbul.\nis_from(\"joe\", \"Istanbul\") ::: Joe's vehicle registration plate is from Istanbul.\nbegin_with(\"tom\", 35) ::: Tom's license plate begins with the number 35.\nbegin_with(\"tom\", 35) \u2192 \u00acbegin_with(\"tom\", 34) ::: If a license plate begins with the number 35, then it does not begin with the number 34.\nQuery:\nbegin_with(\"joe\", 34) ::: Joe's license plate begins with the number 34.",
            "problem": " All vehicle registration plates in Istanbul begin with the number 34. Plates that do not begin with the number 34 are not from Istanbul.  Joe's vehicle registration plate is from Istanbul.  Tom's license plate begins with the number 35.  [BG] If a license plate begins with the number 35, then it does not begin with the number 34.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJoe's license plate begins with the number 34."
        },
        {
            "example": 75,
            "response": [
                "is_from(\"tom\", \"istanbul\")",
                [
                    "all x ((begin_with(x, \"34\")) )",
                    "all x (( -begin_with(x, \"34\")  ->   -is_from(x, \"istanbul\")) )",
                    "is_from(\"joe\", \"istanbul\") ",
                    "begin_with(\"tom\", \"35\") ",
                    "begin_with(\"tom\", \"35\")  ->   -begin_with(\"tom\", \"34\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\njoe ::: represents joe\ntom ::: represents tom\nistanbul ::: represents istanbul\nPredicates:\nbegin_with(x, y) ::: x begins with y.\nis_from(x, y) ::: x is from y.\nPremises:\n\u2200x (begin_with(x, \"34\")) ::: All vehicle registration plates in Istanbul begin with the number 34.\n\u2200x (\u00acbegin_with(x, \"34\") \u2192 \u00acis_from(x, \"istanbul\")) ::: Plates that do not begin with the number 34 are not from Istanbul.\nis_from(\"joe\", \"istanbul\") ::: Joe's vehicle registration plate is from Istanbul.\nbegin_with(\"tom\", \"35\") ::: Tom's license plate begins with the number 35.\nbegin_with(\"tom\", \"35\") \u2192 \u00acbegin_with(\"tom\", \"34\") ::: If a license plate begins with the number 35, then it does not begin with the number 34.\nQuery:\nis_from(\"tom\", \"istanbul\") ::: Tom's license plate is from Istanbul.",
            "problem": " All vehicle registration plates in Istanbul begin with the number 34. Plates that do not begin with the number 34 are not from Istanbul.  Joe's vehicle registration plate is from Istanbul.  Tom's license plate begins with the number 35.  [BG] If a license plate begins with the number 35, then it does not begin with the number 34.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTom's license plate is from Istanbul."
        },
        {
            "example": 76,
            "response": [
                "earn_money(\"mary\")",
                [
                    "all x ((work_in_student_jobs(x)  ->  earn_money(x)) )",
                    "all x ((order_takeout_frequently(x)  ->  work_in_student_jobs(x)) )",
                    "(( -order_takeout_frequently(x)  &  enjoy_dining_hall_meals(x))  |  (order_takeout_frequently(x)  &   -enjoy_dining_hall_meals(x))) ",
                    " all x (enjoy_dining_hall_meals(x)  ->   -is_picky_eater(x)) ",
                    " all x (enjoy_dining_hall_meals(x)  ->  spend_lot_of_time_eating(x)) ",
                    "(work_in_student_jobs(\"mary\")  &  earn_money(\"mary\"))  ->  ( -is_picky_eater(\"mary\")  &   -earn_money(\"mary\")) "
                ]
            ],
            "label": "Uncertain",
            "text": "###\nConstants:\nmary ::: represents mary\nPredicates:\nwork_in_student_jobs(x) ::: x works in student jobs on campus.\nearn_money(x) ::: x needs to earn money to help pay for college tuition.\norder_takeout_frequently(x) ::: x orders takeout frequently in college.\nenjoy_dining_hall_meals(x) ::: x enjoys the dining hall meals and recipes.\nis_picky_eater(x) ::: x is a picky eater.\nspend_lot_of_time_eating(x) ::: x spends a lot of time eating and catching up with friends in the campus dining halls.\nPremises:\n\u2200x (work_in_student_jobs(x) \u2192 earn_money(x)) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n\u2200x (order_takeout_frequently(x) \u2192 work_in_student_jobs(x)) ::: If people order takeout frequently in college, then they work in student jobs on campus.\n((\u00acorder_takeout_frequently(x) \u2227 enjoy_dining_hall_meals(x)) \u2228 (order_takeout_frequently(x) \u2227 \u00acenjoy_dining_hall_meals(x))) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\n\u2200x (enjoy_dining_hall_meals(x) \u2192 \u00acis_picky_eater(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\n\u2200x (enjoy_dining_hall_meals(x) \u2192 spend_lot_of_time_eating(x)) ::: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n(work_in_student_jobs(\"mary\") \u2227 earn_money(\"mary\")) \u2192 (\u00acis_picky_eater(\"mary\") \u2227 \u00acearn_money(\"mary\")) ::: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nQuery:\nearn_money(\"mary\") ::: Mary needs to earn money to help pay for her college tuition.\n---",
            "problem": " If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMary needs to earn money to help pay for her college tuition."
        },
        {
            "example": 77,
            "response": [
                "( -is_picky_eater(\"mary\")  &  spend_lot_of_time_eating(\"mary\"))",
                [
                    "all x ((work_in_student_jobs(x)  ->  earn_money(x)) )",
                    "all x ((order_takeout_frequently(x)  ->  work_in_student_jobs(x)) )",
                    "(( -order_takeout_frequently(x)  &  enjoy_dining_hall_meals(x))  |  (order_takeout_frequently(x)  &   -enjoy_dining_hall_meals(x))) ",
                    " all x (enjoy_dining_hall_meals(x)  ->   -is_picky_eater(x)) ",
                    " all x (enjoy_dining_hall_meals(x)  ->  spend_lot_of_time_eating(x)) ",
                    "(work_in_student_jobs(\"mary\")  &  earn_money(\"mary\"))  ->  ( -is_picky_eater(\"mary\")  &   -earn_money(\"mary\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nmary ::: represents mary\nPredicates:\nwork_in_student_jobs(x) ::: x works in student jobs on campus.\nearn_money(x) ::: x needs to earn money to help pay for college tuition.\norder_takeout_frequently(x) ::: x orders takeout frequently in college.\nenjoy_dining_hall_meals(x) ::: x enjoys the dining hall meals and recipes.\nis_picky_eater(x) ::: x is a picky eater.\nspend_lot_of_time_eating(x) ::: x spends a lot of time eating and catching up with friends in the campus dining halls.\nPremises:\n\u2200x (work_in_student_jobs(x) \u2192 earn_money(x)) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n\u2200x (order_takeout_frequently(x) \u2192 work_in_student_jobs(x)) ::: If people order takeout frequently in college, then they work in student jobs on campus.\n((\u00acorder_takeout_frequently(x) \u2227 enjoy_dining_hall_meals(x)) \u2228 (order_takeout_frequently(x) \u2227 \u00acenjoy_dining_hall_meals(x))) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\n\u2200x (enjoy_dining_hall_meals(x) \u2192 \u00acis_picky_eater(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\n\u2200x (enjoy_dining_hall_meals(x) \u2192 spend_lot_of_time_eating(x)) ::: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n(work_in_student_jobs(\"mary\") \u2227 earn_money(\"mary\")) \u2192 (\u00acis_picky_eater(\"mary\") \u2227 \u00acearn_money(\"mary\")) ::: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nQuery:\n(\u00acis_picky_eater(\"mary\") \u2227 spend_lot_of_time_eating(\"mary\")) ::: Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
            "problem": " If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls."
        },
        {
            "example": 78,
            "response": [
                "( -is_picky_eater(\"mary\")  |  (is_picky_eater(\"mary\")  ->  spend_lot_of_time_eating(\"mary\")))",
                [
                    "all x ((work_in_student_jobs(x)  ->  earn_money(x)) )",
                    "all x ((order_takeout_frequently(x)  ->  work_in_student_jobs(x)) )",
                    "(( -order_takeout_frequently(x)  &  enjoy_dining_hall_meals(x))  |  (order_takeout_frequently(x)  &   -enjoy_dining_hall_meals(x))) ",
                    " all x (enjoy_dining_hall_meals(x)  ->   -is_picky_eater(x)) ",
                    " all x (enjoy_dining_hall_meals(x)  ->  spend_lot_of_time_eating(x)) ",
                    "(work_in_student_jobs(\"mary\")  &  earn_money(\"mary\"))  ->  ( -is_picky_eater(\"mary\")  &   -earn_money(\"mary\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nmary ::: represents mary\nPredicates:\nwork_in_student_jobs(x) ::: x works in student jobs on campus.\nearn_money(x) ::: x needs to earn money to help pay for college tuition.\norder_takeout_frequently(x) ::: x orders takeout frequently in college.\nenjoy_dining_hall_meals(x) ::: x enjoys the dining hall meals and recipes.\nis_picky_eater(x) ::: x is a picky eater.\nspend_lot_of_time_eating(x) ::: x spends a lot of time eating and catching up with friends in the campus dining halls.\nPremises:\n\u2200x (work_in_student_jobs(x) \u2192 earn_money(x)) ::: If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n\u2200x (order_takeout_frequently(x) \u2192 work_in_student_jobs(x)) ::: If people order takeout frequently in college, then they work in student jobs on campus.\n((\u00acorder_takeout_frequently(x) \u2227 enjoy_dining_hall_meals(x)) \u2228 (order_takeout_frequently(x) \u2227 \u00acenjoy_dining_hall_meals(x))) ::: People either order takeout frequently in college or enjoy the dining hall meals and recipes.\n\u2200x (enjoy_dining_hall_meals(x) \u2192 \u00acis_picky_eater(x)) ::: If people enjoy the dining hall meals and recipes, then they are not picky eaters.\n\u2200x (enjoy_dining_hall_meals(x) \u2192 spend_lot_of_time_eating(x)) ::: If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n(work_in_student_jobs(\"mary\") \u2227 earn_money(\"mary\")) \u2192 (\u00acis_picky_eater(\"mary\") \u2227 \u00acearn_money(\"mary\")) ::: If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.\nQuery:\n(\u00acis_picky_eater(\"mary\") \u2228 (is_picky_eater(\"mary\") \u2192 spend_lot_of_time_eating(\"mary\"))) ::: Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
            "problem": " If people work in student jobs on campus, then they need to earn money to help pay for their college tuition. If people order takeout frequently in college, then they work in student jobs on campus. People either order takeout frequently in college or enjoy the dining hall meals and recipes. If people enjoy the dining hall meals and recipes, then they are not picky eaters. If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls. If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls."
        },
        {
            "example": 79,
            "response": [
                "is_product(\"dried_thai_chilies\", baked_by_melissa)",
                [
                    "all x ((is_bakery(x)  ->   -is_spicy(x)) )",
                    "all x ((is_cupcake(x)  ->  is_bakery(x)) )",
                    "all x ((is_hotpot(x)  ->  is_spicy(x)) )",
                    "all x ((is_product(x, baked_by_melissa)  ->  is_cupcake(x)) )",
                    "(is_spicy(\"dried_thai_chilies\")  |  is_bakery(\"dried_thai_chilies\"))  ->  (is_hotpot(\"dried_thai_chilies\")  |  is_spicy(\"dried_thai_chilies\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\ndried_thai_chilies ::: represents dried Thai chilies\nbaked_by_melissa ::: represents Baked by Melissa\nPredicates:\nis_spicy(x) ::: x is spicy.\nis_bakery(x) ::: x is a bakery.\nis_cupcake(x) ::: x is a cupcake.\nis_hotpot(x) ::: x is a hotpot.\nis_product(x, y) ::: x is a product of y.\nPremises:\n\u2200x (is_bakery(x) \u2192 \u00acis_spicy(x)) ::: No bakery is spicy.\n\u2200x (is_cupcake(x) \u2192 is_bakery(x)) ::: All cupcakes are bakeries.\n\u2200x (is_hotpot(x) \u2192 is_spicy(x)) ::: All hotpots are spicy.\n\u2200x (is_product(x, baked_by_melissa) \u2192 is_cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n(is_spicy(\"dried_thai_chilies\") \u2228 is_bakery(\"dried_thai_chilies\")) \u2192 (is_hotpot(\"dried_thai_chilies\") \u2228 is_spicy(\"dried_thai_chilies\")) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nQuery:\nis_product(\"dried_thai_chilies\", baked_by_melissa) ::: Dried Thai chilies are a product of Baked by Melissa.",
            "problem": " No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDried Thai chilies are a product of Baked by Melissa."
        },
        {
            "example": 80,
            "response": [
                " -is_product(\"dried_thai_chilies\", baked_by_melissa)",
                [
                    "all x ((is_bakery(x)  ->   -is_spicy(x)) )",
                    "all x ((is_cupcake(x)  ->  is_bakery(x)) )",
                    "all x ((is_hotpot(x)  ->  is_spicy(x)) )",
                    "all x ((is_product(x, baked_by_melissa)  ->  is_cupcake(x)) )",
                    "(is_spicy(\"dried_thai_chilies\")  |  is_bakery(\"dried_thai_chilies\"))  ->  (is_hotpot(\"dried_thai_chilies\")  |  is_spicy(\"dried_thai_chilies\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\ndried_thai_chilies ::: represents dried Thai chilies\nbaked_by_melissa ::: represents Baked by Melissa\nPredicates:\nis_spicy(x) ::: x is spicy.\nis_bakery(x) ::: x is a bakery.\nis_cupcake(x) ::: x is a cupcake.\nis_hotpot(x) ::: x is a hotpot.\nis_product(x, y) ::: x is a product of y.\nPremises:\n\u2200x (is_bakery(x) \u2192 \u00acis_spicy(x)) ::: No bakery is spicy.\n\u2200x (is_cupcake(x) \u2192 is_bakery(x)) ::: All cupcakes are bakeries.\n\u2200x (is_hotpot(x) \u2192 is_spicy(x)) ::: All hotpots are spicy.\n\u2200x (is_product(x, baked_by_melissa) \u2192 is_cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n(is_spicy(\"dried_thai_chilies\") \u2228 is_bakery(\"dried_thai_chilies\")) \u2192 (is_hotpot(\"dried_thai_chilies\") \u2228 is_spicy(\"dried_thai_chilies\")) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nQuery:\n\u00acis_product(\"dried_thai_chilies\", baked_by_melissa) ::: Dried Thai chilies are not a product of Baked by Melissa.",
            "problem": " No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDried Thai chilies are not a product of Baked by Melissa."
        },
        {
            "example": 81,
            "response": [
                "is_hotpot(\"dried_thai_chilies\")",
                [
                    "all x ((is_bakery(x)  ->   -is_spicy(x)) )",
                    "all x ((is_cupcake(x)  ->  is_bakery(x)) )",
                    "all x ((is_hotpot(x)  ->  is_spicy(x)) )",
                    "all x ((is_product_of(x, baked_by_melissa)  ->  is_cupcake(x)) )",
                    "(is_spicy(\"dried_thai_chilies\")  |  is_bakery(\"dried_thai_chilies\"))  ->  (is_hotpot(\"dried_thai_chilies\")  |  is_spicy(\"dried_thai_chilies\")) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\ndried_thai_chilies ::: represents dried Thai chilies\nbaked_by_melissa ::: represents Baked by Melissa\nPredicates:\nis_spicy(x) ::: x is spicy.\nis_bakery(x) ::: x is a bakery.\nis_cupcake(x) ::: x is a cupcake.\nis_hotpot(x) ::: x is a hotpot.\nis_product_of(x, y) ::: x is a product of y.\nPremises:\n\u2200x (is_bakery(x) \u2192 \u00acis_spicy(x)) ::: No bakery is spicy.\n\u2200x (is_cupcake(x) \u2192 is_bakery(x)) ::: All cupcakes are bakeries.\n\u2200x (is_hotpot(x) \u2192 is_spicy(x)) ::: All hotpots are spicy.\n\u2200x (is_product_of(x, baked_by_melissa) \u2192 is_cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n(is_spicy(\"dried_thai_chilies\") \u2228 is_bakery(\"dried_thai_chilies\")) \u2192 (is_hotpot(\"dried_thai_chilies\") \u2228 is_spicy(\"dried_thai_chilies\")) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nQuery:\nis_hotpot(\"dried_thai_chilies\") ::: Dried Thai chilies are a hotpot.",
            "problem": " No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDried Thai chilies are a hotpot."
        },
        {
            "example": 82,
            "response": [
                " -is_product(dried_thai_chilies, baked_by_melissa)  &   -is_bakery(dried_thai_chilies)",
                [
                    "all x ((is_bakery(x)  ->   -is_spicy(x)) )",
                    "all x ((is_cupcake(x)  ->  is_bakery(x)) )",
                    "all x ((is_hotpot(x)  ->  is_spicy(x)) )",
                    "all x ((is_product(x, baked_by_melissa)  ->  is_cupcake(x)) )",
                    "(( -is_product(dried_thai_chilies, baked_by_melissa)  &   -is_bakery(dried_thai_chilies))  |  (is_product(dried_thai_chilies, baked_by_melissa)  |  is_bakery(dried_thai_chilies)))  ->  (is_hotpot(dried_thai_chilies)  |  is_spicy(dried_thai_chilies)) "
                ]
            ],
            "label": "True",
            "text": "Constants:\ndried_thai_chilies ::: represents dried Thai chilies\nbaked_by_melissa ::: represents Baked by Melissa\nPredicates:\nis_spicy(x) ::: x is spicy.\nis_bakery(x) ::: x is a bakery.\nis_cupcake(x) ::: x is a cupcake.\nis_hotpot(x) ::: x is a hotpot.\nis_product(x, y) ::: x is a product of y.\nPremises:\n\u2200x (is_bakery(x) \u2192 \u00acis_spicy(x)) ::: No bakery is spicy.\n\u2200x (is_cupcake(x) \u2192 is_bakery(x)) ::: All cupcakes are bakeries.\n\u2200x (is_hotpot(x) \u2192 is_spicy(x)) ::: All hotpots are spicy.\n\u2200x (is_product(x, baked_by_melissa) \u2192 is_cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n((\u00acis_product(dried_thai_chilies, baked_by_melissa) \u2227 \u00acis_bakery(dried_thai_chilies)) \u2228 (is_product(dried_thai_chilies, baked_by_melissa) \u2228 is_bakery(dried_thai_chilies))) \u2192 (is_hotpot(dried_thai_chilies) \u2228 is_spicy(dried_thai_chilies)) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nQuery:\n\u00acis_product(dried_thai_chilies, baked_by_melissa) \u2227 \u00acis_bakery(dried_thai_chilies) ::: Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.",
            "problem": " No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDried Thai chilies are neither a product of Baked by Melissa nor a bakery."
        },
        {
            "example": 83,
            "response": [
                "is_cupcake(\"dried_thai_chilies\")  &  is_product(\"dried_thai_chilies\", \"baked_by_melissa\")",
                [
                    "all x ((is_bakery(x)  ->   -is_spicy(x)) )",
                    "all x ((is_cupcake(x)  ->  is_bakery(x)) )",
                    "all x ((is_hotpot(x)  ->  is_spicy(x)) )",
                    "all x ((is_product(x, \"baked_by_melissa\")  ->  is_cupcake(x)) )",
                    "(is_spicy(\"dried_thai_chilies\")  |  is_bakery(\"dried_thai_chilies\"))  ->  (is_hotpot(\"dried_thai_chilies\")  |  is_spicy(\"dried_thai_chilies\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\ndried_thai_chilies ::: represents dried Thai chilies\nbaked_by_melissa ::: represents Baked by Melissa\nPredicates:\nis_spicy(x) ::: x is spicy.\nis_bakery(x) ::: x is a bakery.\nis_cupcake(x) ::: x is a cupcake.\nis_hotpot(x) ::: x is a hotpot.\nis_product(x, y) ::: x is a product of y.\nPremises:\n\u2200x (is_bakery(x) \u2192 \u00acis_spicy(x)) ::: No bakery is spicy.\n\u2200x (is_cupcake(x) \u2192 is_bakery(x)) ::: All cupcakes are bakeries.\n\u2200x (is_hotpot(x) \u2192 is_spicy(x)) ::: All hotpots are spicy.\n\u2200x (is_product(x, \"baked_by_melissa\") \u2192 is_cupcake(x)) ::: All products of Baked by Melissa are cupcakes.\n(is_spicy(\"dried_thai_chilies\") \u2228 is_bakery(\"dried_thai_chilies\")) \u2192 (is_hotpot(\"dried_thai_chilies\") \u2228 is_spicy(\"dried_thai_chilies\")) ::: If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.\nQuery:\nis_cupcake(\"dried_thai_chilies\") \u2227 is_product(\"dried_thai_chilies\", \"baked_by_melissa\") ::: Dried Thai chilies are cupcakes and a product of Baked by Melissa.",
            "problem": " No bakery is spicy. All cupcakes are bakeries. All hotpots are spicy. All products of Baked by Melissa are cupcakes. If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDried Thai chilies are cupcakes and a product of Baked by Melissa."
        },
        {
            "example": 84,
            "response": [
                "(provide_take_out_service(\"subway\")  &  receive_negative_reviews(\"subway\"))  ->  (has_rating_greater_than_9(\"subway\")  &   -provide_take_out_service(\"subway\"))",
                [
                    "all x ((is_listed_in_yelp(x)  ->   -receive_negative_reviews(x)) )",
                    "all x ((has_rating_greater_than_9(x)  ->  is_listed_in_yelp(x)) )",
                    "exists x (( -provide_take_out_service(x)  &  receive_negative_reviews(x)) )",
                    "all x ((is_popular_among_local_residents(x)  ->  has_rating_greater_than_9(x)) )",
                    "(has_rating_greater_than_9(\"subway\")  |  is_popular_among_local_residents(\"subway\")) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nsubway ::: represents subway\nPredicates:\nis_listed_in_yelp(x) ::: x is listed in Yelp\u2019s recommendations.\nreceive_negative_reviews(x) ::: x receives many negative reviews.\nhas_rating_greater_than_9(x) ::: x has a rating greater than 9.\nprovide_take_out_service(x) ::: x provides take-out service.\nis_popular_among_local_residents(x) ::: x is popular among local residents.\nPremises:\n\u2200x (is_listed_in_yelp(x) \u2192 \u00acreceive_negative_reviews(x)) ::: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\n\u2200x (has_rating_greater_than_9(x) \u2192 is_listed_in_yelp(x)) ::: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\n\u2203x (\u00acprovide_take_out_service(x) \u2227 receive_negative_reviews(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.\n\u2200x (is_popular_among_local_residents(x) \u2192 has_rating_greater_than_9(x)) ::: All restaurants that are popular among local residents have ratings greater than 9.\n(has_rating_greater_than_9(\"subway\") \u2228 is_popular_among_local_residents(\"subway\")) ::: Subway has a rating greater than 9 or is popular among local residents.\nQuery:\n(provide_take_out_service(\"subway\") \u2227 receive_negative_reviews(\"subway\")) \u2192 (has_rating_greater_than_9(\"subway\") \u2227 \u00acprovide_take_out_service(\"subway\")) ::: If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.",
            "problem": " If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service."
        },
        {
            "example": 85,
            "response": [
                "(provide_take_out_service(\"subway\")  &   -receive_negative_reviews(\"subway\"))",
                [
                    "all x ((is_listed_in_yelp(x)  ->   -receive_negative_reviews(x)) )",
                    "all x ((has_rating_greater_than_9(x)  ->  is_listed_in_yelp(x)) )",
                    "exists x (( -provide_take_out_service(x)  &  receive_negative_reviews(x)) )",
                    "all x ((is_popular_among_residents(x)  ->  has_rating_greater_than_9(x)) )",
                    "(has_rating_greater_than_9(\"subway\")  |  is_popular_among_residents(\"subway\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nsubway ::: represents subway\nPredicates:\nis_listed_in_yelp(x) ::: x is listed in Yelp's recommendations.\nreceive_negative_reviews(x) ::: x receives many negative reviews.\nhas_rating_greater_than_9(x) ::: x has a rating greater than 9.\nprovide_take_out_service(x) ::: x provides take-out service.\nis_popular_among_residents(x) ::: x is popular among local residents.\nPremises:\n\u2200x (is_listed_in_yelp(x) \u2192 \u00acreceive_negative_reviews(x)) ::: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\n\u2200x (has_rating_greater_than_9(x) \u2192 is_listed_in_yelp(x)) ::: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\n\u2203x (\u00acprovide_take_out_service(x) \u2227 receive_negative_reviews(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.\n\u2200x (is_popular_among_residents(x) \u2192 has_rating_greater_than_9(x)) ::: All restaurants that are popular among local residents have ratings greater than 9.\n(has_rating_greater_than_9(\"subway\") \u2228 is_popular_among_residents(\"subway\")) ::: Subway has a rating greater than 9 or is popular among local residents.\nQuery:\n(provide_take_out_service(\"subway\") \u2227 \u00acreceive_negative_reviews(\"subway\")) ::: Subway provides take-out service and does not receive many negative reviews.",
            "problem": " If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSubway provides take-out service and does not receive many negative reviews."
        },
        {
            "example": 86,
            "response": [
                "provide_take_out_service(\"subway\")",
                [
                    "all x ((is_listed(x)  ->   -receive_negative_reviews(x)) )",
                    "all x ((has_rating_greater_than_9(x)  ->  is_listed(x)) )",
                    "exists x (( -provide_take_out_service(x)  &  receive_negative_reviews(x)) )",
                    "all x ((is_popular_among_residents(x)  ->  has_rating_greater_than_9(x)) )",
                    "(has_rating_greater_than_9(\"subway\")  |  is_popular_among_residents(\"subway\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nsubway ::: represents subway\nPredicates:\nis_listed(x) ::: x is listed in Yelp's recommendations.\nreceive_negative_reviews(x) ::: x receives many negative reviews.\nhas_rating_greater_than_9(x) ::: x has a rating greater than 9.\nprovide_take_out_service(x) ::: x provides take-out service.\nis_popular_among_residents(x) ::: x is popular among local residents.\nPremises:\n\u2200x (is_listed(x) \u2192 \u00acreceive_negative_reviews(x)) ::: If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews.\n\u2200x (has_rating_greater_than_9(x) \u2192 is_listed(x)) ::: All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations.\n\u2203x (\u00acprovide_take_out_service(x) \u2227 receive_negative_reviews(x)) ::: Some restaurants that do not provide take-out service receive many negative reviews.\n\u2200x (is_popular_among_residents(x) \u2192 has_rating_greater_than_9(x)) ::: All restaurants that are popular among local residents have ratings greater than 9.\n(has_rating_greater_than_9(\"subway\") \u2228 is_popular_among_residents(\"subway\")) ::: Subway has a rating greater than 9 or is popular among local residents.\nQuery:\nprovide_take_out_service(\"subway\") ::: Subway does not provide take-out service.",
            "problem": " If the restaurant is listed in Yelp\u2019s recommendations, then the restaurant does not receive many negative reviews. All restaurants with a rating greater than 9 are listed in Yelp\u2019s recommendations. Some restaurants that do not provide take-out service receive many negative reviews. All restaurants that are popular among local residents have ratings greater than 9. Subway has a rating greater than 9 or is popular among local residents.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSubway does not provide take-out service."
        },
        {
            "example": 87,
            "response": [
                "loses_fight(\"nemesis\")",
                [
                    "all x ((is_superhero_movie(x)  ->  (good_guy(fight(x, y))  &  bad_guy(fight(x, y))  &  good_guy(y)  &  bad_guy(y))) )",
                    "is_superhero_movie(\"the_surprising_adventures_of_sir_digby_chicken_caesar\") ",
                    "all x ((good_guy(fight(x, y))  ->  bad_guy(fight(x, y))  &  bad_guy(fight(x, y))  ->  good_guy(fight(x, y))) )",
                    "fight(\"sir_digby_chicken_caesar\", \"nemesis\") ",
                    "all x (((is_superhero_movie(x)  &  named_after(x, y))  ->  good_guy(y)) )",
                    "named_after(\"the_surprising_adventures_of_sir_digby_chicken_caesar\", \"sir_digby_chicken_caesar\") ",
                    "all x ((wins_fight(x)  ->  loses_fight(fight(x))) )",
                    "all x (((is_superhero_movie(x)  &  named_after(x, y))  ->  appears_in(y, x)) )"
                ]
            ],
            "label": "True",
            "text": "Constants:\nsir_digby_chicken_caesar ::: represents Sir Digby Chicken Caesar\nPredicates:\nis_superhero_movie(x) ::: x is a superhero movie.\ngood_guy(x) ::: x is a good guy.\nbad_guy(x) ::: x is a bad guy.\nfight(x, y) ::: x fights y.\nnamed_after(x, y) ::: x is named after y.\nappears_in(x, y) ::: x appears in y.\nwins_fight(x) ::: x wins a fight.\nloses_fight(x) ::: x loses a fight.\nPremises:\n\u2200x (is_superhero_movie(x) \u2192 (good_guy(fight(x, y)) \u2227 bad_guy(fight(x, y)) \u2227 good_guy(y) \u2227 bad_guy(y))) ::: In superhero movies, the good guys always win.\nis_superhero_movie(\"the_surprising_adventures_of_sir_digby_chicken_caesar\") ::: The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.\n\u2200x (good_guy(fight(x, y)) \u2192 bad_guy(fight(x, y)) \u2227 bad_guy(fight(x, y)) \u2192 good_guy(fight(x, y))) ::: Good guys fight bad guys and vice versa.\nfight(\"sir_digby_chicken_caesar\", \"nemesis\") ::: Sir Digby fights his nemesis.\n\u2200x ((is_superhero_movie(x) \u2227 named_after(x, y)) \u2192 good_guy(y)) ::: If a superhero movie is named after a character, that character is a good guy.\nnamed_after(\"the_surprising_adventures_of_sir_digby_chicken_caesar\", \"sir_digby_chicken_caesar\") ::: The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.\n\u2200x (wins_fight(x) \u2192 loses_fight(fight(x))) ::: If somebody wins a fight, the person they are fighting loses.\n\u2200x ((is_superhero_movie(x) \u2227 named_after(x, y)) \u2192 appears_in(y, x)) ::: If a superhero movie is named after a character, that character appears in the movie.\nQuery:\nloses_fight(\"nemesis\") ::: Sir Digby\u2019s nemesis loses.",
            "problem": " In superhero movies, the good guys always win. The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie. Good guys fight bad guys and vice versa. Sir Digby fights his nemesis. If a superhero movie is named after a character, that character is a good guy. The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby. If somebody wins a fight, the person they are fighting loses. If a superhero movie is named after a character, that character appears in the movie.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSir Digby\u2019s nemesis loses."
        },
        {
            "example": 88,
            "response": [
                "contains(\"walden\", knowledge)",
                [
                    "all x ( exists y (contains(x, y)  &  tons_of_knowledge(y)) )",
                    " all x  all y (reads(x, y)  ->  gains(x, knowledge)) ",
                    "all x ((gains(x, knowledge)  ->  become_smarter(x)) )",
                    "reads(\"harry\", \"walden\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nharry ::: represents harry\nwalden ::: represents walden\nhenry_thoreau ::: represents henry thoreau\nPredicates:\ncontains(x, y) ::: x contains y.\nreads(x, y) ::: x reads y.\ngains(x, y) ::: x gains y.\nbecome_smarter(x) ::: x becomes smarter.\nPremises:\n\u2200x \u2203y (contains(x, y) \u2227 tons_of_knowledge(y)) ::: Books contain tons of knowledge.\n\u2200x \u2200y (reads(x, y) \u2192 gains(x, knowledge)) ::: When a person reads a book, that person gains knowledge.\n\u2200x (gains(x, knowledge) \u2192 become_smarter(x)) ::: If a person gains knowledge, they become smarter.\nreads(\"harry\", \"walden\") ::: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nQuery:\ncontains(\"walden\", knowledge) ::: Walden contains knowledge.",
            "problem": " [BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge.  [BG] If a person gains knowledge, they become smarter. Harry read the book \u201cWalden\u201d by Henry Thoreau.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nWalden contains knowledge."
        },
        {
            "example": 89,
            "response": [
                "become_smarter(\"harry\")",
                [
                    " all x  all y (contains(x, y)  ->  gains(x, y)) ",
                    " all x  all y (reads(x, y)  ->  gains(x, \"knowledge\")) ",
                    "all x ((gains(x, \"knowledge\")  ->  become_smarter(x)) )",
                    "reads(\"harry\", \"walden\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nharry ::: represents harry\nwalden ::: represents walden\nhenry_thoreau ::: represents henry thoreau\nPredicates:\ncontains(x, y) ::: x contains y.\nreads(x, y) ::: x reads y.\ngains(x, y) ::: x gains y.\nbecome_smarter(x) ::: x becomes smarter.\nPremises:\n\u2200x \u2200y (contains(x, y) \u2192 gains(x, y)) ::: Books contain tons of knowledge.\n\u2200x \u2200y (reads(x, y) \u2192 gains(x, \"knowledge\")) ::: When a person reads a book, that person gains knowledge.\n\u2200x (gains(x, \"knowledge\") \u2192 become_smarter(x)) ::: If a person gains knowledge, they become smarter.\nreads(\"harry\", \"walden\") ::: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nQuery:\nbecome_smarter(\"harry\") ::: Harry is smarter than before.",
            "problem": " [BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge.  [BG] If a person gains knowledge, they become smarter. Harry read the book \u201cWalden\u201d by Henry Thoreau.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nHarry is smarter than before."
        },
        {
            "example": 90,
            "response": [
                "all x ((is_smarter(x)  ->  gains(x, knowledge)))",
                [
                    "all x ( exists y (contains(x, y)  &  tons_of_knowledge(y)) )",
                    " all x  all y (reads(x, y)  ->  gains(x, knowledge)) ",
                    "all x ((gains(x, knowledge)  ->  is_smarter(x)) )",
                    "reads(\"harry\", \"walden\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nharry ::: represents harry\nwalden ::: represents walden\nhenry_thoreau ::: represents henry thoreau\nPredicates:\ncontains(x, y) ::: x contains y.\nreads(x, y) ::: x reads y.\ngains(x, y) ::: x gains y.\nis_smarter(x) ::: x is smarter.\nPremises:\n\u2200x \u2203y (contains(x, y) \u2227 tons_of_knowledge(y)) ::: Books contain tons of knowledge.\n\u2200x \u2200y (reads(x, y) \u2192 gains(x, knowledge)) ::: When a person reads a book, that person gains knowledge.\n\u2200x (gains(x, knowledge) \u2192 is_smarter(x)) ::: If a person gains knowledge, they become smarter.\nreads(\"harry\", \"walden\") ::: Harry read the book \u201cWalden\u201d by Henry Thoreau.\nQuery:\n\u2200x (is_smarter(x) \u2192 gains(x, knowledge)) ::: A person who is smarter has gained knowledge.",
            "problem": " [BG] Books contain tons of knowledge. [BG] When a person reads a book, that person gains knowledge.  [BG] If a person gains knowledge, they become smarter. Harry read the book \u201cWalden\u201d by Henry Thoreau.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nA person who is smarter has gained knowledge."
        },
        {
            "example": 91,
            "response": [
                "is_categorized_as(machine_translation, language_generation_task)",
                [
                    "all x ((natural_language_processing_tasks(x)  ->  (is_categorized_as(x, language_generation_task)  |  is_categorized_as(x, language_understanding_task))) )",
                    "all x ((is_output_of(x, natural_language_processing_tasks)  ->  is_categorized_as(x, language_generation_task)  |  is_categorized_as(x, language_understanding_task)) )",
                    "is_output_of(machine_translation, natural_language_processing_tasks) ",
                    "is_output_of(machine_translation, text_sequence) "
                ]
            ],
            "label": "True",
            "text": "###\nConstants:\nnatural_language_processing_tasks ::: represents natural language processing tasks\nlanguage_generation_task ::: represents language generation task\nlanguage_understanding_task ::: represents language understanding task\nmachine_translation ::: represents machine translation\ntext_sequence ::: represents a text sequence\nPredicates:\nis_categorized_as(x, y) ::: x is categorized as y.\nis_output_of(x, y) ::: x is the output of y.\nPremises:\n\u2200x (natural_language_processing_tasks(x) \u2192 (is_categorized_as(x, language_generation_task) \u2228 is_categorized_as(x, language_understanding_task))) ::: Natural language processing tasks can be categorized as either language generation task or language understanding task.\n\u2200x (is_output_of(x, natural_language_processing_tasks) \u2192 is_categorized_as(x, language_generation_task) \u2228 is_categorized_as(x, language_understanding_task)) ::: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nis_output_of(machine_translation, natural_language_processing_tasks) ::: Machine translation is a natural language processing task.\nis_output_of(machine_translation, text_sequence) ::: The output of machine translation is a text sequence.\nQuery:\nis_categorized_as(machine_translation, language_generation_task) ::: Machine translation is a language generation task.",
            "problem": " Natural language processing tasks can be categorized as either language generation task or language understanding task. If the output of a natural language processing task is a text sequence, then it is a language generation task. Machine translation is a natural language processing task. The output of machine translation is a text sequence.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMachine translation is a language generation task."
        },
        {
            "example": 92,
            "response": [
                " -is_language_understanding_task(\"machine_translation\")",
                [
                    "all x ((is_language_processing_task(x)  ->  (is_language_generation_task(x)  |  is_language_understanding_task(x))) )",
                    "all x ((is_output(x, \"natural_language_processing_task\")  ->  is_language_generation_task(x)) )",
                    "is_language_processing_task(\"machine_translation\") ",
                    "is_output(\"text_sequence\", \"machine_translation\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nlanguage_generation_task ::: represents a language generation task\nlanguage_understanding_task ::: represents a language understanding task\nmachine_translation ::: represents machine translation\ntext_sequence ::: represents a text sequence\nPredicates:\nis_language_processing_task(x) ::: x is a natural language processing task.\nis_output(x, y) ::: x is the output of y.\nPremises:\n\u2200x (is_language_processing_task(x) \u2192 (is_language_generation_task(x) \u2228 is_language_understanding_task(x))) ::: Natural language processing tasks can be categorized as either language generation task or language understanding task.\n\u2200x (is_output(x, \"natural_language_processing_task\") \u2192 is_language_generation_task(x)) ::: If the output of a natural language processing task is a text sequence, then it is a language generation task.\nis_language_processing_task(\"machine_translation\") ::: Machine translation is a natural language processing task.\nis_output(\"text_sequence\", \"machine_translation\") ::: The output of machine translation is a text sequence.\nQuery:\n\u00acis_language_understanding_task(\"machine_translation\") ::: Machine translation is not a language understanding task.",
            "problem": " Natural language processing tasks can be categorized as either language generation task or language understanding task. If the output of a natural language processing task is a text sequence, then it is a language generation task. Machine translation is a natural language processing task. The output of machine translation is a text sequence.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nMachine translation is a language understanding task."
        },
        {
            "example": 93,
            "response": [
                "rent_apartment(\"tom\", \"olive_garden\")",
                [
                    "exists x ((is_managed_building(x)  &  allowed_in(is_pet(\"fluffy\"), x)) )",
                    "all x ((requires_deposit(x)  ->  rent_apartment(is_security_deposit(x), x)) )",
                    "all x ((is_security_deposit(x)  ->  (is_equal_to(x, \"one_month_rent\")  |  is_more_than(x, \"one_month_rent\"))) )",
                    "is_cat(\"fluffy\")  &  is_cat(\"tom\") ",
                    "is_managed_building(\"olive_garden\")  &  (is_monthly_rent(\"olive_garden\", \"$2000\")) ",
                    "rent_apartment(\"tom\", \"olive_garden\")  <->  (move_in_with(\"tom\", \"fluffy\")  &  is_more_than(\"1500\", \"security_deposit\")  &  is_more_than(\"2000\", \"1500\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nfluffy ::: represents fluffy\ntom ::: represents tom\ncats ::: represents cats\nolive_garden ::: represents the olive garden\n2000 ::: represents 2000\n1500 ::: represents 1500\nPredicates:\nallowed_in(x, y) ::: x is allowed in y.\nrent_apartment(x, y) ::: x rents an apartment in y.\nis_cat(x) ::: x is a cat.\nis_pet(x) ::: x is a pet.\nis_managed_building(x) ::: x is a managed building.\nrequires_deposit(x) ::: x requires a deposit.\nis_security_deposit(x) ::: x is a security deposit.\nis_equal_to(x, y) ::: x is equal to y.\nis_more_than(x, y) ::: x is more than y.\nmove_in_with(x, y) ::: x moves in with y.\nPremises:\n\u2203x (is_managed_building(x) \u2227 allowed_in(is_pet(\"fluffy\"), x)) ::: Pets are allowed in some managed buildings.\n\u2200x (requires_deposit(x) \u2192 rent_apartment(is_security_deposit(x), x)) ::: A deposit is required to rent an apartment in a managed building.\n\u2200x (is_security_deposit(x) \u2192 (is_equal_to(x, \"one_month_rent\") \u2228 is_more_than(x, \"one_month_rent\"))) ::: The security deposit can be either equal to one month's rent or more.\nis_cat(\"fluffy\") \u2227 is_cat(\"tom\") ::: Fluffy is Tom's cat. Cats are pets.\nis_managed_building(\"olive_garden\") \u2227 (is_monthly_rent(\"olive_garden\", \"$2000\")) ::: The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000.\nrent_apartment(\"tom\", \"olive_garden\") \u2194 (move_in_with(\"tom\", \"fluffy\") \u2227 is_more_than(\"1500\", \"security_deposit\") \u2227 is_more_than(\"2000\", \"1500\")) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.\nQuery:\nrent_apartment(\"tom\", \"olive_garden\") ::: Tom will rent an apartment in The Olive Garden.",
            "problem": " Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTom will rent an apartment in The Olive Garden."
        },
        {
            "example": 94,
            "response": [
                "allowed_in(\"tom\", \"olive_garden\")",
                [
                    "exists x ((managed_building(x)  &  allowed_in(\"pets\", x)) )",
                    "all x ((managed_building(x)  ->   exists y (rent_apartment(y, x)  &  security_deposit(\"deposit\", y))) )",
                    "all x ((security_deposit(x, \"apartment\")  ->  (x = \"one_month's_rent\"  |  more_than(x, \"one_month's_rent\"))) )",
                    "move_in_with(\"fluffy\", \"tom\") ",
                    " all x (cats(x)  ->  allowed_in(x, \"pets\")) ",
                    "managed_building(\"olive_garden\") ",
                    "monthly_rent(\"$2000\", \"olive_garden\") ",
                    "all x ((rent_apartment(\"tom\", \"olive_garden\")  <->  (move_in_with(\"tom\", \"fluffy\")  &  security_deposit(\"deposit\", \"olive_garden\") \u2264 \"$1500\")) )",
                    "more_than(\"$2000\", \"$1500\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nfluffy ::: represents fluffy\ntom ::: represents tom\ncats ::: represents cats\nolive_garden ::: represents the olive garden\nPredicates:\nallowed_in(x, y) ::: x is allowed in y.\nrent_apartment(x, y) ::: x rents an apartment in y.\nmove_in_with(x, y) ::: x moves in with y.\nsecurity_deposit(x, y) ::: x is the security deposit for y.\nmonthly_rent(x, y) ::: x is the monthly rent for y.\nmore_than(x, y) ::: x is more than y.\nPremises:\n\u2203x (managed_building(x) \u2227 allowed_in(\"pets\", x)) ::: Pets are allowed in some managed buildings.\n\u2200x (managed_building(x) \u2192 \u2203y (rent_apartment(y, x) \u2227 security_deposit(\"deposit\", y))) ::: A deposit is required to rent an apartment in a managed building.\n\u2200x (security_deposit(x, \"apartment\") \u2192 (x = \"one month's rent\" \u2228 more_than(x, \"one month's rent\"))) ::: The security deposit can be either equal to one month's rent or more.\nmove_in_with(\"fluffy\", \"tom\") ::: Fluffy is Tom's cat.\n\u2200x (cats(x) \u2192 allowed_in(x, \"pets\")) ::: Cats are pets.\nmanaged_building(\"olive_garden\") ::: The Olive Garden is a managed building.\nmonthly_rent(\"$2000\", \"olive_garden\") ::: The monthly rent at the Olive Garden is $2000.\n\u2200x (rent_apartment(\"tom\", \"olive_garden\") \u2194 (move_in_with(\"tom\", \"fluffy\") \u2227 security_deposit(\"deposit\", \"olive_garden\") \u2264 \"$1500\")) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nmore_than(\"$2000\", \"$1500\") ::: 2000$ is more than $1500.\nQuery:\nallowed_in(\"tom\", \"olive_garden\") ::: Tom is allowed to move in an apartment in The Olive Garden with Fluffy.",
            "problem": " Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTom is allowed to move in an apartment in The Olive Garden with Fluffy."
        },
        {
            "example": 95,
            "response": [
                "exists x ((is_security_deposit(x, \"olive_garden\")  &  (x = $2000  |  is_more_than(x, $2000))))",
                [
                    "exists x ((is_managed_building(x)  &  are_allowed(x)) )",
                    "all x ((requires_deposit(x)  ->   exists y (is_security_deposit(y, x)  &  (y = $2000  |  is_more_than(y, $2000)))) )",
                    "is_cat(\"fluffy\")  &  is_cat(\"tom\")  &  can_move_with(\"tom\", \"fluffy\") ",
                    "is_managed_building(\"olive_garden\")  &  has_monthly_rent(\"olive_garden\", $2000) ",
                    "will_rent(\"tom\", \"olive_garden\")  <->  (are_allowed(\"olive_garden\")  &  is_security_deposit(\"$1500\", \"olive_garden\")) ",
                    "is_more_than($2000, $1500) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nfluffy ::: represents fluffy\ntom ::: represents tom\ncats ::: represents cats\nolive_garden ::: represents the olive garden\n$2000 ::: represents 2000 dollars\n$1500 ::: represents 1500 dollars\nPredicates:\nare_allowed(x) ::: pets are allowed in building x.\nrequires_deposit(x) ::: x requires a deposit to rent an apartment.\nis_cat(x) ::: x is a cat.\nis_managed_building(x) ::: x is a managed building.\nhas_monthly_rent(x, y) ::: x has a monthly rent of y dollars.\nwill_rent(x, y) ::: x will rent an apartment in building y.\ncan_move_with(x, y) ::: x can move in with y.\nis_security_deposit(x, y) ::: x is the security deposit for building y.\nis_more_than(x, y) ::: x is more than y.\nPremises:\n\u2203x (is_managed_building(x) \u2227 are_allowed(x)) ::: Pets are allowed in some managed buildings.\n\u2200x (requires_deposit(x) \u2192 \u2203y (is_security_deposit(y, x) \u2227 (y = $2000 \u2228 is_more_than(y, $2000)))) ::: A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more.\nis_cat(\"fluffy\") \u2227 is_cat(\"tom\") \u2227 can_move_with(\"tom\", \"fluffy\") ::: Fluffy is Tom's cat. Cats are pets.\nis_managed_building(\"olive_garden\") \u2227 has_monthly_rent(\"olive_garden\", $2000) ::: The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000.\nwill_rent(\"tom\", \"olive_garden\") \u2194 (are_allowed(\"olive_garden\") \u2227 is_security_deposit(\"$1500\", \"olive_garden\")) ::: Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nis_more_than($2000, $1500) ::: 2000$ is more than $1500.\nQuery:\n\u2203x (is_security_deposit(x, \"olive_garden\") \u2227 (x = $2000 \u2228 is_more_than(x, $2000))) ::: The security deposit at the Olive Garden is either $2000 or more.",
            "problem": " Pets are allowed in some managed buildings. [BG] A deposit is required to rent an apartment in a managed building. The security deposit can be either equal to one month's rent or more. Fluffy is Tom's cat. Cats are pets. The Olive Garden is a managed building. The monthly rent at the Olive Garden is $2000. Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500. 2000$ is more than $1500.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThe security deposit at the Olive Garden is either $2000 or more."
        },
        {
            "example": 96,
            "response": [
                "love_to_sleep(\"koala\")",
                [
                    "all x ((is_animal(x)  ->  is_loved_by_tourists(x)  ->  is_favorite_animal(x)) )",
                    "all x ((is_animal(x)  &  is_from(x, \"australia\")  ->  is_loved_by_tourists(x)) )",
                    "all x ((is_quokka(x)  ->  is_animal(x)  &  is_from(x, \"australia\")) )",
                    "all x ((is_favorite_animal(x)  ->  is_fluffy(x)) )",
                    "all x ((is_favorite_animal(x)  ->  love_to_sleep(x)) )",
                    "all x ((is_koala(x)  ->  is_fluffy(x)  ->   -is_quokka(x)) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nmax ::: represents max\naustralia ::: represents australia\nquokka ::: represents quokka\nPredicates:\nis_animal(x) ::: x is an animal.\nis_loved_by_tourists(x) ::: x is loved by tourists.\nis_favorite_animal(x) ::: x is Max's favorite animal.\nis_fluffy(x) ::: x is very fluffy.\nlove_to_sleep(x) ::: x loves to sleep.\nPremises:\n\u2200x (is_animal(x) \u2192 is_loved_by_tourists(x) \u2192 is_favorite_animal(x)) ::: If animals are loved by tourists, then they are Max's favorite animals.\n\u2200x (is_animal(x) \u2227 is_from(x, \"australia\") \u2192 is_loved_by_tourists(x)) ::: All animals from Australia are loved by tourists.\n\u2200x (is_quokka(x) \u2192 is_animal(x) \u2227 is_from(x, \"australia\")) ::: All quokka are animals from Australia.\n\u2200x (is_favorite_animal(x) \u2192 is_fluffy(x)) ::: All of Max's favorite animals are very fluffy.\n\u2200x (is_favorite_animal(x) \u2192 love_to_sleep(x)) ::: All of Max's favorite animals love to sleep.\n\u2200x (is_koala(x) \u2192 is_fluffy(x) \u2192 \u00acis_quokka(x)) ::: If a koala is very fluffy, then the koala is not a quokka.\nQuery:\nlove_to_sleep(\"koala\") ::: Koalas love to sleep.",
            "problem": " If animals are loved by tourists, then they are Max's favorite animals.  All animals from Australia are loved by tourists.  All quokka are animals from Australia.  All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep.  If a koala is very fluffy, then the koala is not a quokka.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nKoalas love to sleep."
        },
        {
            "example": 97,
            "response": [
                "love_to_sleep(\"koala\")  &  is_quokka(\"koala\")",
                [
                    "all x ((is_animal(x)  ->  is_loved_by_tourists(x)  ->  is_favorite(x, \"max\")) )",
                    "all x ((is_animal(x)  &  is_from(x, \"australia\")  ->  is_loved_by_tourists(x)) )",
                    "all x ((is_quokka(x)  ->  is_animal(x)  &  is_from(x, \"australia\")) )",
                    "all x ((is_favorite(x, \"max\")  ->  is_fluffy(x)) )",
                    "all x ((is_favorite(x, \"max\")  ->  love_to_sleep(x)) )",
                    "all x ((is_koala(x)  ->  is_fluffy(x)  ->   -is_quokka(x)) )"
                ]
            ],
            "label": "False",
            "text": "###\nConstants:\nmax ::: represents max\naustralia ::: represents australia\nPredicates:\nis_animal(x) ::: x is an animal.\nis_loved_by_tourists(x) ::: x is loved by tourists.\nis_favorite(x, y) ::: x is y's favorite.\nis_fluffy(x) ::: x is very fluffy.\nlove_to_sleep(x) ::: x loves to sleep.\nis_quokka(x) ::: x is a quokka.\nPremises:\n\u2200x (is_animal(x) \u2192 is_loved_by_tourists(x) \u2192 is_favorite(x, \"max\")) ::: If animals are loved by tourists, then they are Max's favorite animals.\n\u2200x (is_animal(x) \u2227 is_from(x, \"australia\") \u2192 is_loved_by_tourists(x)) ::: All animals from Australia are loved by tourists.\n\u2200x (is_quokka(x) \u2192 is_animal(x) \u2227 is_from(x, \"australia\")) ::: All quokka are animals from Australia.\n\u2200x (is_favorite(x, \"max\") \u2192 is_fluffy(x)) ::: All of Max's favorite animals are very fluffy.\n\u2200x (is_favorite(x, \"max\") \u2192 love_to_sleep(x)) ::: All of Max's favorite animals love to sleep.\n\u2200x (is_koala(x) \u2192 is_fluffy(x) \u2192 \u00acis_quokka(x)) ::: If a koala is very fluffy, then the koala is not a quokka.\nQuery:\nlove_to_sleep(\"koala\") \u2227 is_quokka(\"koala\") ::: Koalas love to sleep and are quokka.",
            "problem": " If animals are loved by tourists, then they are Max's favorite animals.  All animals from Australia are loved by tourists.  All quokka are animals from Australia.  All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep.  If a koala is very fluffy, then the koala is not a quokka.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nKoalas love to sleep and are quokka."
        },
        {
            "example": 98,
            "response": [
                "(is_koala(x)  &  is_quokka(x))  ->  (loves_to_sleep(x)  |  is_fluffy(x))",
                [
                    "all x ((is_loved_by_tourists(x)  ->  is_favorite_animal(x, \"max\")) )",
                    "all x ((is_from(x, \"australia\")  ->  is_loved_by_tourists(x)) )",
                    "all x ((is_quokka(x)  ->  is_from(x, \"australia\")) )",
                    "all x ((is_favorite_animal(x, \"max\")  ->  is_fluffy(x)) )",
                    "all x ((is_favorite_animal(x, \"max\")  ->  loves_to_sleep(x)) )",
                    "all x ((is_koala(x)  &  is_fluffy(x)  ->   -is_quokka(x)) )"
                ]
            ],
            "label": "True",
            "text": "Constants:\nmax ::: represents max\naustralia ::: represents australia\nPredicates:\nis_loved_by_tourists(x) ::: x is loved by tourists.\nis_favorite_animal(x, y) ::: x is Max's favorite animal.\nis_from(x, y) ::: x is from y.\nis_fluffy(x) ::: x is very fluffy.\nloves_to_sleep(x) ::: x loves to sleep.\nPremises:\n\u2200x (is_loved_by_tourists(x) \u2192 is_favorite_animal(x, \"max\")) ::: If animals are loved by tourists, then they are Max's favorite animals.\n\u2200x (is_from(x, \"australia\") \u2192 is_loved_by_tourists(x)) ::: All animals from Australia are loved by tourists.\n\u2200x (is_quokka(x) \u2192 is_from(x, \"australia\")) ::: All quokka are animals from Australia.\n\u2200x (is_favorite_animal(x, \"max\") \u2192 is_fluffy(x)) ::: All of Max's favorite animals are very fluffy.\n\u2200x (is_favorite_animal(x, \"max\") \u2192 loves_to_sleep(x)) ::: All of Max's favorite animals love to sleep.\n\u2200x (is_koala(x) \u2227 is_fluffy(x) \u2192 \u00acis_quokka(x)) ::: If a koala is very fluffy, then the koala is not a quokka.\nQuery:\n(is_koala(x) \u2227 is_quokka(x)) \u2192 (loves_to_sleep(x) \u2228 is_fluffy(x)) ::: If a koala is a quokka, then the koala either loves to sleep or is very fluffy.",
            "problem": " If animals are loved by tourists, then they are Max's favorite animals.  All animals from Australia are loved by tourists.  All quokka are animals from Australia.  All of Max's favorite animals are very fluffy. All of Max's favorite animals love to sleep.  If a koala is very fluffy, then the koala is not a quokka.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf a koala is a quokka, then the koala either loves to sleep or is very fluffy."
        },
        {
            "example": 99,
            "response": [
                "is_ceo(\"harry\")",
                [
                    "all x (((is_man(x)  ->  is_kind(x))  |  (is_man(x)  ->  is_evil(x))) )",
                    "all x ((is_ugly(x)  ->   -is_handsome(x)) )",
                    "all x ((is_evil(x)  ->  is_ugly(x)) )",
                    "all x ((is_gentleman(x)  ->  is_handsome(x)) )",
                    "all x ((is_ceo(x)  ->  is_gentleman(x)) )",
                    "is_gentleman(\"harry\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nharry ::: represents harry\nPredicates:\nis_man(x) ::: x is a man.\nis_kind(x) ::: x is kind.\nis_evil(x) ::: x is evil.\nis_ugly(x) ::: x is ugly.\nis_handsome(x) ::: x is handsome.\nis_gentleman(x) ::: x is a gentleman.\nis_ceo(x) ::: x is a CEO.\nPremises:\n\u2200x ((is_man(x) \u2192 is_kind(x)) \u2228 (is_man(x) \u2192 is_evil(x))) ::: A man is either kind or evil.\n\u2200x (is_ugly(x) \u2192 \u00acis_handsome(x)) ::: No ugly person is handsome.\n\u2200x (is_evil(x) \u2192 is_ugly(x)) ::: All evil people are ugly.\n\u2200x (is_gentleman(x) \u2192 is_handsome(x)) ::: All gentlemen are handsome.\n\u2200x (is_ceo(x) \u2192 is_gentleman(x)) ::: All CEOs are gentlemen.\nis_gentleman(\"harry\") ::: Harry is a gentleman.\nQuery:\nis_ceo(\"harry\") ::: Harry is a CEO.",
            "problem": " A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nHarry is a CEO."
        },
        {
            "example": 100,
            "response": [
                "(is_kind(\"harry\")  |  is_ceo(\"harry\"))",
                [
                    "all x (((is_kind(x)  |  is_evil(x))) )",
                    "all x ((is_ugly(x)  ->   -is_handsome(x)) )",
                    "all x ((is_evil(x)  ->  is_ugly(x)) )",
                    "all x ((is_gentleman(x)  ->  is_handsome(x)) )",
                    "all x ((is_ceo(x)  ->  is_gentleman(x)) )",
                    "is_gentleman(\"harry\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nharry ::: represents harry\nPredicates:\nis_kind(x) ::: x is kind.\nis_evil(x) ::: x is evil.\nis_ugly(x) ::: x is ugly.\nis_handsome(x) ::: x is handsome.\nis_gentleman(x) ::: x is a gentleman.\nis_ceo(x) ::: x is a CEO.\nPremises:\n\u2200x ((is_kind(x) \u2228 is_evil(x))) ::: A man is either kind or evil.\n\u2200x (is_ugly(x) \u2192 \u00acis_handsome(x)) ::: No ugly person is handsome.\n\u2200x (is_evil(x) \u2192 is_ugly(x)) ::: All evil people are ugly.\n\u2200x (is_gentleman(x) \u2192 is_handsome(x)) ::: All gentlemen are handsome.\n\u2200x (is_ceo(x) \u2192 is_gentleman(x)) ::: All CEOs are gentlemen.\nis_gentleman(\"harry\") ::: Harry is a gentleman.\nQuery:\n(is_kind(\"harry\") \u2228 is_ceo(\"harry\")) ::: Harry is kind or a CEO.",
            "problem": " A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nHarry is kind or a CEO."
        },
        {
            "example": 101,
            "response": [
                "( -is_kind(\"harry\")  &   -is_ceo(\"harry\"))",
                [
                    "all x (((is_man(x)  ->  is_kind(x)  |  is_evil(x))) )",
                    "all x ((is_ugly(x)  ->   -is_handsome(x)) )",
                    "all x ((is_evil(x)  ->  is_ugly(x)) )",
                    "all x ((is_gentleman(x)  ->  is_handsome(x)) )",
                    "all x ((is_ceo(x)  ->  is_gentleman(x)) )",
                    "is_gentleman(\"harry\") ",
                    "((is_evil(\"harry\")  &  is_ugly(\"harry\"))  |  ( -is_evil(\"harry\")  &   -is_ugly(\"harry\")))  ->  ( -is_kind(\"harry\")  &   -is_ceo(\"harry\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nharry ::: represents harry\nPredicates:\nis_man(x) ::: x is a man.\nis_kind(x) ::: x is kind.\nis_evil(x) ::: x is evil.\nis_ugly(x) ::: x is ugly.\nis_handsome(x) ::: x is handsome.\nis_gentleman(x) ::: x is a gentleman.\nis_ceo(x) ::: x is a CEO.\nPremises:\n\u2200x ((is_man(x) \u2192 is_kind(x) \u2228 is_evil(x))) ::: A man is either kind or evil.\n\u2200x (is_ugly(x) \u2192 \u00acis_handsome(x)) ::: No ugly person is handsome.\n\u2200x (is_evil(x) \u2192 is_ugly(x)) ::: All evil people are ugly.\n\u2200x (is_gentleman(x) \u2192 is_handsome(x)) ::: All gentlemen are handsome.\n\u2200x (is_ceo(x) \u2192 is_gentleman(x)) ::: All CEOs are gentlemen.\nis_gentleman(\"harry\") ::: Harry is a gentleman.\n((is_evil(\"harry\") \u2227 is_ugly(\"harry\")) \u2228 (\u00acis_evil(\"harry\") \u2227 \u00acis_ugly(\"harry\"))) \u2192 (\u00acis_kind(\"harry\") \u2227 \u00acis_ceo(\"harry\")) ::: If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.\nQuery:\n(\u00acis_kind(\"harry\") \u2227 \u00acis_ceo(\"harry\")) ::: Harry is neither kind nor a CEO.",
            "problem": " A man is either kind or evil. No ugly person is handsome. All evil people are ugly. All gentlemen are handsome. All CEOs are gentlemen. Harry is a gentleman.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO."
        },
        {
            "example": 102,
            "response": [
                "spend_time_with_siblings(\"luke\")",
                [
                    "all x (((are_twins(x)  |  are_triplets(x))  ->  spend_time_with_siblings(x)) )",
                    "all x (((have_same_age_siblings(x))  ->  (are_twins(x)  |  are_triplets(x))) )",
                    "all x (((complain_about_siblings(x))  ->  have_same_age_siblings(x)) )",
                    "all x ((( -live_at_home_regularly(x))  ->   -develop_strong_bonds(x)) )",
                    "all x (((spend_time_with_siblings(x))  ->   -live_at_home_regularly(x)) )",
                    "((are_twins(\"luke\")  |  are_triplets(\"luke\"))  &  develop_strong_bonds(\"luke\"))  |  ( -(are_twins(\"luke\")  |  are_triplets(\"luke\"))  &   -develop_strong_bonds(\"luke\")) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nluke ::: represents luke\nPredicates:\nare_twins(x) ::: x are twins.\nare_triplets(x) ::: x are triplets.\nspend_time_with_siblings(x) ::: x spends a lot of time hanging out and playing with their siblings.\nhave_same_age_siblings(x) ::: x has siblings who are the same age.\ncomplain_about_siblings(x) ::: x complains often about annoying siblings.\nlive_at_home_regularly(x) ::: x lives at home regularly.\ndevelop_strong_bonds(x) ::: x develops strong bonds with his family members.\nPremises:\n\u2200x ((are_twins(x) \u2228 are_triplets(x)) \u2192 spend_time_with_siblings(x)) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\n\u2200x ((have_same_age_siblings(x)) \u2192 (are_twins(x) \u2228 are_triplets(x))) ::: If people have siblings who are the same age, then they are twins or triplets.\n\u2200x ((complain_about_siblings(x)) \u2192 have_same_age_siblings(x)) ::: If people complain often about annoying siblings, then they have siblings who are the same age.\n\u2200x ((\u00aclive_at_home_regularly(x)) \u2192 \u00acdevelop_strong_bonds(x)) ::: If people do not live at home regularly, then they do not develop strong bonds with their family members.\n\u2200x ((spend_time_with_siblings(x)) \u2192 \u00aclive_at_home_regularly(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\n((are_twins(\"luke\") \u2228 are_triplets(\"luke\")) \u2227 develop_strong_bonds(\"luke\")) \u2228 (\u00ac(are_twins(\"luke\") \u2228 are_triplets(\"luke\")) \u2227 \u00acdevelop_strong_bonds(\"luke\")) ::: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nQuery:\nspend_time_with_siblings(\"luke\") ::: Luke spends a lot of time hanging out and playing with his siblings.",
            "problem": " If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nLuke spends a lot of time hanging out and playing with his siblings."
        },
        {
            "example": 103,
            "response": [
                "complain_about_siblings(\"luke\")",
                [
                    "all x (((are_twins(x)  |  are_triplets(x))  ->  spend_time_with_siblings(x)) )",
                    "all x (((have_same_age_siblings(x))  ->  (are_twins(x)  |  are_triplets(x))) )",
                    "all x ((complain_about_siblings(x)  ->  have_same_age_siblings(x)) )",
                    "all x (( -live_at_home_regularly(x)  ->   -develops_bonds_with_family(x)) )",
                    "all x ((spend_time_with_siblings(x)  ->   -live_at_home_regularly(x)) )",
                    "((are_twins(\"luke\")  |  are_triplets(\"luke\"))  &  develops_bonds_with_family(\"luke\"))  |  ( -(are_twins(\"luke\")  |  are_triplets(\"luke\"))  &   -develops_bonds_with_family(\"luke\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nluke ::: represents luke\nPredicates:\nare_twins(x) ::: x are twins.\nare_triplets(x) ::: x are triplets.\nspend_time_with_siblings(x) ::: x spends a lot of time hanging out with and playing with their siblings.\nhave_same_age_siblings(x) ::: x has siblings who are the same age.\ncomplain_about_siblings(x) ::: x complains often about annoying siblings.\nlive_at_home_regularly(x) ::: x lives at home regularly.\ndevelops_bonds_with_family(x) ::: x develops strong bonds with his family members.\nPremises:\n\u2200x ((are_twins(x) \u2228 are_triplets(x)) \u2192 spend_time_with_siblings(x)) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\n\u2200x ((have_same_age_siblings(x)) \u2192 (are_twins(x) \u2228 are_triplets(x))) ::: If people have siblings who are the same age, then they are twins or triplets.\n\u2200x (complain_about_siblings(x) \u2192 have_same_age_siblings(x)) ::: If people complain often about annoying siblings, then they have siblings who are the same age.\n\u2200x (\u00aclive_at_home_regularly(x) \u2192 \u00acdevelops_bonds_with_family(x)) ::: If people do not live at home regularly, then they do not develop strong bonds with their family members.\n\u2200x (spend_time_with_siblings(x) \u2192 \u00aclive_at_home_regularly(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\n((are_twins(\"luke\") \u2228 are_triplets(\"luke\")) \u2227 develops_bonds_with_family(\"luke\")) \u2228 (\u00ac(are_twins(\"luke\") \u2228 are_triplets(\"luke\")) \u2227 \u00acdevelops_bonds_with_family(\"luke\")) ::: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nQuery:\ncomplain_about_siblings(\"luke\") ::: Luke complains often about annoying siblings.",
            "problem": " If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nLuke complains often about annoying siblings."
        },
        {
            "example": 104,
            "response": [
                "( -are_twins(\"luke\")  &   -are_triplets(\"luke\")  &   -complain_about_siblings(\"luke\"))",
                [
                    "all x (((are_twins(x)  |  are_triplets(x))  ->  spend_time_with_siblings(x)) )",
                    "all x ((have_same_age_siblings(x)  ->  (are_twins(x)  |  are_triplets(x))) )",
                    "all x ((complain_about_siblings(x)  ->  have_same_age_siblings(x)) )",
                    "all x (( -live_at_home_regularly(x)  ->   -develops_bonds_with_family(x)) )",
                    "all x ((spend_time_with_siblings(x)  ->   -live_at_home_regularly(x)) )",
                    "((are_twins(\"luke\")  &  develops_bonds_with_family(\"luke\"))  |  ( -are_twins(\"luke\")  &   -develops_bonds_with_family(\"luke\")))  |  ( -are_twins(\"luke\")  &   -develops_bonds_with_family(\"luke\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nluke ::: represents luke\nPredicates:\nare_twins(x) ::: x are twins.\nare_triplets(x) ::: x are triplets.\nspend_time_with_siblings(x) ::: x spends a lot of time hanging out with and playing with their siblings.\nhave_same_age_siblings(x) ::: x has siblings who are the same age.\ncomplain_about_siblings(x) ::: x complains often about annoying siblings.\nlive_at_home_regularly(x) ::: x lives at home regularly.\ndevelops_bonds_with_family(x) ::: x develops strong bonds with his family members.\nPremises:\n\u2200x ((are_twins(x) \u2228 are_triplets(x)) \u2192 spend_time_with_siblings(x)) ::: If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.\n\u2200x (have_same_age_siblings(x) \u2192 (are_twins(x) \u2228 are_triplets(x))) ::: If people have siblings who are the same age, then they are twins or triplets.\n\u2200x (complain_about_siblings(x) \u2192 have_same_age_siblings(x)) ::: If people complain often about annoying siblings, then they have siblings who are the same age.\n\u2200x (\u00aclive_at_home_regularly(x) \u2192 \u00acdevelops_bonds_with_family(x)) ::: If people do not live at home regularly, then they do not develop strong bonds with their family members.\n\u2200x (spend_time_with_siblings(x) \u2192 \u00aclive_at_home_regularly(x)) ::: If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.\n((are_twins(\"luke\") \u2227 develops_bonds_with_family(\"luke\")) \u2228 (\u00acare_twins(\"luke\") \u2227 \u00acdevelops_bonds_with_family(\"luke\"))) \u2228 (\u00acare_twins(\"luke\") \u2227 \u00acdevelops_bonds_with_family(\"luke\")) ::: Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.\nQuery:\n(\u00acare_twins(\"luke\") \u2227 \u00acare_triplets(\"luke\") \u2227 \u00accomplain_about_siblings(\"luke\")) ::: Luke is neither a twin nor triplet nor complains often about annoying siblings.",
            "problem": " If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings. If people have siblings who are the same age, then they are twins or triplets. If people complain often about annoying siblings, then they have siblings who are the same age. If people do not live at home regularly, then they do not develop strong bonds with their family members. If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly. Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nLuke is neither a twin nor triplet nor complains often about annoying siblings."
        },
        {
            "example": 105,
            "response": [
                "exists x ((lives_in(\"tom\", single_parent_family)  &  out_of_work(\"dad\", \"more_than_a_year\")  &  provides(ets, \"tom\", economic_hardship)))",
                [
                    "costs(205, \"gre_test\") ",
                    "all x ((provides(ets, x, economic_hardship)  ->  refers_to(economic_hardship, \"difficulty_caused_by_having_too_little_money_or_too_few_resources\")) )",
                    "lives_in(\"tom\", single_parent_family)  &  out_of_work(\"dad\", \"more_than_a_year\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\ntom ::: represents tom\nets ::: represents ets\ngre_test ::: represents the GRE test\neconomic_hardship ::: represents economic hardship\nsingle_parent_family ::: represents a single-parent family\ndad ::: represents dad\nPredicates:\ncosts(x, y) ::: It costs x to take the GRE test.\nprovides(x, y, z) ::: x provides financial aid to y who prove z.\nrefers_to(x, y) ::: x refers to y.\nlives_in(x, y) ::: x lives in y.\nout_of_work(x, y) ::: x has been out of work for y.\nPremises:\ncosts(205, \"gre_test\") ::: It costs US $205 to take the GRE test.\n\u2200x (provides(ets, x, economic_hardship) \u2192 refers_to(economic_hardship, \"difficulty caused by having too little money or too few resources\")) ::: ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources.\nlives_in(\"tom\", single_parent_family) \u2227 out_of_work(\"dad\", \"more than a year\") ::: Tom lives in a single-parent family. His dad has been out of work for more than a year.\nQuery:\n\u2203x (lives_in(\"tom\", single_parent_family) \u2227 out_of_work(\"dad\", \"more than a year\") \u2227 provides(ets, \"tom\", economic_hardship)) ::: Tom can apply for financial aid from ETS to take the GRE test.",
            "problem": " It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTom can apply for financial aid from ETS to take the GRE test."
        },
        {
            "example": 106,
            "response": [
                "cost(\"GRE_test\", x)  &  (x < 300)",
                [
                    "cost(\"GRE_test\", 205) ",
                    "all x ((prove(x, \"economic_hardship\")  ->  provide_aid(\"GRE_applicants\", x)) )",
                    "refer_to(\"economic_hardship\", \"difficulty_caused_by_having_too_little_money_or_too_few_resources\") ",
                    "live_in(\"tom\", \"single_parent_family\")  &  out_of_work(\"dad\")  &  (out_of_work(\"dad\") > 1) "
                ]
            ],
            "label": "True",
            "text": "Constants:\ntom ::: represents tom\ndad ::: represents dad\nPredicates:\ncost(x, y) ::: x costs y.\nprovide_aid(x, y) ::: ETS provides financial aid to y.\nprove(x, y) ::: x proves y.\nrefer_to(x, y) ::: x refers to y.\nlive_in(x, y) ::: x lives in y.\nout_of_work(x) ::: x is out of work.\nPremises:\ncost(\"GRE test\", 205) ::: It costs US $205 to take the GRE test.\n\u2200x (prove(x, \"economic hardship\") \u2192 provide_aid(\"GRE applicants\", x)) ::: ETS provides financial aid to those GRE applicants who prove economic hardship.\nrefer_to(\"economic hardship\", \"difficulty caused by having too little money or too few resources\") ::: Economic hardship refers to difficulty caused by having too little money or too few resources.\nlive_in(\"tom\", \"single-parent family\") \u2227 out_of_work(\"dad\") \u2227 (out_of_work(\"dad\") > 1) ::: Tom lives in a single-parent family. His dad has been out of work for more than a year.\nQuery:\ncost(\"GRE test\", x) \u2227 (x < 300) ::: It cost below US $300 to take the GRE test.",
            "problem": " It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIt cost below US $300 to take the GRE test."
        },
        {
            "example": 107,
            "response": [
                " -provide_aid(\"GRE_test\", \"financial_aid\")",
                [
                    "costs(\"GRE_test\", \"$205\") ",
                    "all x ((prove(x, \"economic_hardship\")  ->  provide_aid(\"GRE_applicants\", x)) )",
                    "refers_to(\"economic_hardship\", \"difficulty_caused_by_having_too_little_money_or_too_few_resources\") ",
                    "live_in(\"tom\", \"single_parent_family\") ",
                    "out_of_work(\"dad\")  &  more_than_a_year(\"dad\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\ntom ::: represents tom\ndad ::: represents dad\nPredicates:\ncosts(x, y) ::: x costs y.\nprovide_aid(x, y) ::: ETS provides financial aid to y.\nprove(x, y) ::: x proves y.\nrefers_to(x, y) ::: x refers to y.\nlive_in(x, y) ::: x lives in y.\nout_of_work(x) ::: x is out of work.\nmore_than_a_year(x) ::: x has been out of work for more than a year.\nPremises:\ncosts(\"GRE test\", \"$205\") ::: It costs US $205 to take the GRE test.\n\u2200x (prove(x, \"economic hardship\") \u2192 provide_aid(\"GRE applicants\", x)) ::: ETS provides financial aid to those GRE applicants who prove economic hardship.\nrefers_to(\"economic hardship\", \"difficulty caused by having too little money or too few resources\") ::: Economic hardship refers to difficulty caused by having too little money or too few resources.\nlive_in(\"tom\", \"single-parent family\") ::: Tom lives in a single-parent family.\nout_of_work(\"dad\") \u2227 more_than_a_year(\"dad\") ::: His dad has been out of work for more than a year.\nQuery:\n\u00acprovide_aid(\"GRE test\", \"financial aid\") ::: There is no financial aid available for the GRE test.",
            "problem": " It costs US $205 to take the GRE test. ETS provides financial aid to those GRE applicants who prove economic hardship. Economic hardship refers to difficulty caused by having too little money or too few resources. Tom lives in a single-parent family. His dad has been out of work for more than a year.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThere is no financial aid available for the GRE test."
        },
        {
            "example": 108,
            "response": [
                "tidy_spaces_consistently(\"peter\")  &  enjoy_cleaning(\"peter\")",
                [
                    "all x ((spill_food_on_clothing(x)  ->  ( -tidy_spaces_consistently(x)  &  enjoy_cleaning(x))) )",
                    "all x (((go_out_frequently(x)  &  find_new_restaurants(x))  ->  spill_food_on_clothing(x)) )",
                    "all x (((is_only_child(x)  &   -has_siblings(x))  ->  (tidy_spaces_consistently(x)  &  enjoy_cleaning(x))) )",
                    "all x (((busy_parents(x)  ->  (is_only_child(x)  &   -has_siblings(x)))) )",
                    "all x ((high_net_income(x)  ->  busy_parents(x)) )",
                    "((spill_food_on_clothing(\"peter\")  &  is_only_child(\"peter\")  &   -has_siblings(\"peter\"))  |  ( -spill_food_on_clothing(\"peter\")  &   -is_only_child(\"peter\")  &  has_siblings(\"peter\"))) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\npeter ::: represents peter\nPredicates:\nspill_food_on_clothing(x) ::: x spills a lot of food on their clothing.\ntidy_spaces_consistently(x) ::: x tidies their spaces consistently.\nenjoy_cleaning(x) ::: x enjoys the process of cleaning.\ngo_out_frequently(x) ::: x goes out frequently.\nfind_new_restaurants(x) ::: x finds new food restaurants to try.\nis_only_child(x) ::: x grew up as an only child with no siblings.\nbusy_parents(x) ::: x has parents who are very busy with their regular jobs.\nhigh_net_income(x) ::: x has a high net income.\nPremises:\n\u2200x (spill_food_on_clothing(x) \u2192 (\u00actidy_spaces_consistently(x) \u2227 enjoy_cleaning(x))) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n\u2200x ((go_out_frequently(x) \u2227 find_new_restaurants(x)) \u2192 spill_food_on_clothing(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n\u2200x ((is_only_child(x) \u2227 \u00achas_siblings(x)) \u2192 (tidy_spaces_consistently(x) \u2227 enjoy_cleaning(x))) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n\u2200x ((busy_parents(x) \u2192 (is_only_child(x) \u2227 \u00achas_siblings(x)))) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n\u2200x (high_net_income(x) \u2192 busy_parents(x)) ::: All households with a high net income have people who have parents who are very busy with their regular jobs.\n((spill_food_on_clothing(\"peter\") \u2227 is_only_child(\"peter\") \u2227 \u00achas_siblings(\"peter\")) \u2228 (\u00acspill_food_on_clothing(\"peter\") \u2227 \u00acis_only_child(\"peter\") \u2227 has_siblings(\"peter\"))) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\nQuery:\ntidy_spaces_consistently(\"peter\") \u2227 enjoy_cleaning(\"peter\") ::: Peter tidies his space consistently and enjoys the process of cleaning.",
            "problem": " If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPeter tidies his space consistently and enjoys the process of cleaning."
        },
        {
            "example": 109,
            "response": [
                "(go_out_frequently(\"peter\")  |  high_net_income(\"peter\"))",
                [
                    "all x ((spill_food_on_clothing(x)  ->   -tidy_spaces_consistently(x)  &  enjoy_cleaning(x)) )",
                    "all x ((go_out_frequently(x)  ->  spill_food_on_clothing(x)) )",
                    "all x ((is_only_child(x)  ->  tidy_spaces_consistently(x)  &  enjoy_cleaning(x)) )",
                    "all x ((busy_parents(x)  ->  is_only_child(x)) )",
                    "all x ((high_net_income(x)  ->  busy_parents(x)) )",
                    "((spill_food_on_clothing(\"peter\")  &  is_only_child(\"peter\"))  |  ( -spill_food_on_clothing(\"peter\")  &   -is_only_child(\"peter\"))) "
                ]
            ],
            "label": "False",
            "text": "Constants:\npeter ::: represents peter\nPredicates:\nspill_food_on_clothing(x) ::: x spills a lot of food on their clothing.\ntidy_spaces_consistently(x) ::: x tidies their spaces consistently.\nenjoy_cleaning(x) ::: x enjoys the process of cleaning.\ngo_out_frequently(x) ::: x goes out frequently to find new food restaurants to try.\nis_only_child(x) ::: x grew up as an only child with no siblings.\nbusy_parents(x) ::: x has parents who are very busy with their regular jobs.\nhigh_net_income(x) ::: x belongs to a household with a high net income.\nPremises:\n\u2200x (spill_food_on_clothing(x) \u2192 \u00actidy_spaces_consistently(x) \u2227 enjoy_cleaning(x)) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n\u2200x (go_out_frequently(x) \u2192 spill_food_on_clothing(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n\u2200x (is_only_child(x) \u2192 tidy_spaces_consistently(x) \u2227 enjoy_cleaning(x)) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n\u2200x (busy_parents(x) \u2192 is_only_child(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n\u2200x (high_net_income(x) \u2192 busy_parents(x)) ::: All households with a high net income have people who have parents who are very busy with their regular jobs.\n((spill_food_on_clothing(\"peter\") \u2227 is_only_child(\"peter\")) \u2228 (\u00acspill_food_on_clothing(\"peter\") \u2227 \u00acis_only_child(\"peter\"))) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\nQuery:\n(go_out_frequently(\"peter\") \u2228 high_net_income(\"peter\")) ::: Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.",
            "problem": " If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPeter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income."
        },
        {
            "example": 110,
            "response": [
                "((is_foodie(\"peter\")  &  go_out_frequently(\"peter\")  &  find_new_restaurants(\"peter\"))  |  ( -is_foodie(\"peter\")  &   -go_out_frequently(\"peter\")  &   -find_new_restaurants(\"peter\")))  &  (high_net_income(\"peter\")  |   -high_net_income(\"peter\"))",
                [
                    "all x ((spill_food_on_clothing(x)  ->   -tidy_spaces_consistently(x)  &  enjoy_cleaning(x)) )",
                    "all x ((is_foodie(x)  &  go_out_frequently(x)  ->  spill_food_on_clothing(x)) )",
                    "all x ((grew_up_as_only_child(x)  ->  tidy_spaces_consistently(x)  &  enjoy_cleaning(x)) )",
                    "all x ((have_busy_parents(x)  ->  grew_up_as_only_child(x)) )",
                    "all x ((high_net_income(x)  ->  have_busy_parents(x)) )",
                    "((spill_food_on_clothing(\"peter\")  &  grew_up_as_only_child(\"peter\"))  |  ( -spill_food_on_clothing(\"peter\")  &   -grew_up_as_only_child(\"peter\"))) "
                ]
            ],
            "label": "True",
            "text": "###\nConstants:\npeter ::: represents peter\nPredicates:\nspill_food_on_clothing(x) ::: x spills a lot of food on their clothing.\ntidy_spaces_consistently(x) ::: x tidies their spaces consistently.\nenjoy_cleaning(x) ::: x enjoys the process of cleaning.\nis_foodie(x) ::: x is a foodie.\ngo_out_frequently(x) ::: x goes out frequently.\nfind_new_restaurants(x) ::: x finds new food restaurants to try.\ngrew_up_as_only_child(x) ::: x grew up as an only child with no siblings.\nhave_busy_parents(x) ::: x has parents who are very busy with their regular jobs.\nhigh_net_income(x) ::: x belongs to a household with a high net income.\nPremises:\n\u2200x (spill_food_on_clothing(x) \u2192 \u00actidy_spaces_consistently(x) \u2227 enjoy_cleaning(x)) ::: If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.\n\u2200x (is_foodie(x) \u2227 go_out_frequently(x) \u2192 spill_food_on_clothing(x)) ::: All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n\u2200x (grew_up_as_only_child(x) \u2192 tidy_spaces_consistently(x) \u2227 enjoy_cleaning(x)) ::: If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.\n\u2200x (have_busy_parents(x) \u2192 grew_up_as_only_child(x)) ::: If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.\n\u2200x (high_net_income(x) \u2192 have_busy_parents(x)) ::: All households with a high net income have people who have parents who are very busy with their regular jobs.\n((spill_food_on_clothing(\"peter\") \u2227 grew_up_as_only_child(\"peter\")) \u2228 (\u00acspill_food_on_clothing(\"peter\") \u2227 \u00acgrew_up_as_only_child(\"peter\"))) ::: Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings.\nQuery:\n((is_foodie(\"peter\") \u2227 go_out_frequently(\"peter\") \u2227 find_new_restaurants(\"peter\")) \u2228 (\u00acis_foodie(\"peter\") \u2227 \u00acgo_out_frequently(\"peter\") \u2227 \u00acfind_new_restaurants(\"peter\"))) \u2227 (high_net_income(\"peter\") \u2228 \u00achigh_net_income(\"peter\")) ::: Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.",
            "problem": " If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning. All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing. If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning. If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings. All households with a high net income have people who have parents who are very busy with their regular jobs. Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPeter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income."
        },
        {
            "example": 111,
            "response": [
                "exists x ((is_evergreen(x)  &   -is_object_of_worship(x)))",
                [
                    "all x ((is_fir_tree(x)  ->  is_evergreen(x)) )",
                    "exists x ((is_object_of_worship(x)  &  is_fir_tree(x)) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nfir_tree ::: represents a fir tree\nevergreen ::: represents an evergreen\nobject_of_worship ::: represents an object of worship\nPredicates:\nis_fir_tree(x) ::: x is a fir tree.\nis_evergreen(x) ::: x is an evergreen.\nis_object_of_worship(x) ::: x is an object of worship.\nPremises:\n\u2200x (is_fir_tree(x) \u2192 is_evergreen(x)) ::: All fir trees are evergreens.\n\u2203x (is_object_of_worship(x) \u2227 is_fir_tree(x)) ::: Some objects of worship are fir trees.\nQuery:\n\u2203x (is_evergreen(x) \u2227 \u00acis_object_of_worship(x)) ::: Some evergreens are not objects of worship.",
            "problem": " All fir trees are evergreens. Some objects of worship are fir trees.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSome evergreens are not objects of worship."
        },
        {
            "example": 112,
            "response": [
                "visited(\"juan_de_onate\", \"new_mexico\")",
                [
                    "is_mountain_range(\"picuris_mountains\")  &  (is_from(\"picuris_mountains\", \"new_mexico\")  |  is_from(\"picuris_mountains\", \"texas\")) ",
                    "visited(\"juan_de_onate\", \"picuris_mountains\") ",
                    "located_in(\"harding_pegmatite_mine\", \"picuris_mountains\")  &  donated(\"harding_pegmatite_mine\") ",
                    "all x ((is_mountain_range(x)  &  is_from(x, \"texas\")  ->  (has_mine(x)  ->   -donated(has_mine(x)))) )"
                ]
            ],
            "label": "True",
            "text": "Constants:\npicuris_mountains ::: represents the Picuris Mountains\njuan_de_onate ::: represents Juan de Onate\nharding_pegmatite_mine ::: represents the Harding Pegmatite Mine\nnew_mexico ::: represents New Mexico\ntexas ::: represents Texas\nPredicates:\nis_mountain_range(x) ::: x is a mountain range.\nvisited(x, y) ::: x visited y.\nlocated_in(x, y) ::: x is located in y.\ndonated(x) ::: x was donated.\nhas_mine(x) ::: x has a mine.\nPremises:\nis_mountain_range(\"picuris_mountains\") \u2227 (is_from(\"picuris_mountains\", \"new_mexico\") \u2228 is_from(\"picuris_mountains\", \"texas\")) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\nvisited(\"juan_de_onate\", \"picuris_mountains\") ::: Juan de Onate visited the Picuris Mountains.\nlocated_in(\"harding_pegmatite_mine\", \"picuris_mountains\") \u2227 donated(\"harding_pegmatite_mine\") ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n\u2200x (is_mountain_range(x) \u2227 is_from(x, \"texas\") \u2192 (has_mine(x) \u2192 \u00acdonated(has_mine(x)))) ::: There are no mountain ranges in Texas that have mines which have been donated.\nQuery:\nvisited(\"juan_de_onate\", \"new_mexico\") ::: Juan de Onate visited a mountain range in New Mexico.",
            "problem": " The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJuan de Onate visited a mountain range in New Mexico."
        },
        {
            "example": 113,
            "response": [
                "visited(\"juan_de_onate\", \"texas\")",
                [
                    "is_mountain_range(\"picuris_mountains\")  &  (located_in(\"picuris_mountains\", \"new_mexico\")  |  located_in(\"picuris_mountains\", \"texas\")) ",
                    "visited(\"juan_de_onate\", \"picuris_mountains\") ",
                    "located_in(\"harding_pegmatite_mine\", \"picuris_mountains\")  &  donated(\"harding_pegmatite_mine\") ",
                    "all x ((is_mountain_range(x)  &  located_in(x, \"texas\")  ->   -(has_mine(x)  &  donated(x))) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\npicuris_mountains ::: represents the Picuris Mountains\njuan_de_onate ::: represents Juan de Onate\nharding_pegmatite_mine ::: represents the Harding Pegmatite Mine\nnew_mexico ::: represents New Mexico\ntexas ::: represents Texas\nPredicates:\nis_mountain_range(x) ::: x is a mountain range.\nvisited(x, y) ::: x visited y.\nlocated_in(x, y) ::: x is located in y.\ndonated(x) ::: x was donated.\nhas_mine(x) ::: x has a mine.\nPremises:\nis_mountain_range(\"picuris_mountains\") \u2227 (located_in(\"picuris_mountains\", \"new_mexico\") \u2228 located_in(\"picuris_mountains\", \"texas\")) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\nvisited(\"juan_de_onate\", \"picuris_mountains\") ::: Juan de Onate visited the Picuris Mountains.\nlocated_in(\"harding_pegmatite_mine\", \"picuris_mountains\") \u2227 donated(\"harding_pegmatite_mine\") ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n\u2200x (is_mountain_range(x) \u2227 located_in(x, \"texas\") \u2192 \u00ac(has_mine(x) \u2227 donated(x))) ::: There are no mountain ranges in Texas that have mines which have been donated.\nQuery:\nvisited(\"juan_de_onate\", \"texas\") ::: Juan de Onate visited a mountain range in Texas.",
            "problem": " The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJuan de Onate visited a mountain range in Texas."
        },
        {
            "example": 114,
            "response": [
                " -located_in(\"harding_pegmatite_mine\", \"new_mexico\")",
                [
                    "is_mountain_range(\"picuris_mountains\")  &  (is_from(\"picuris_mountains\", \"new_mexico\")  |  is_from(\"picuris_mountains\", \"texas\")) ",
                    "visited(\"juan_de_onate\", \"picuris_mountains\") ",
                    "located_in(\"harding_pegmatite_mine\", \"picuris_mountains\")  &  donated(\"harding_pegmatite_mine\") ",
                    "- exists x ((is_mountain_range(x)  &  is_from(x, \"texas\")  &  has_mine(x)  &  donated(x)) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\npicuris_mountains ::: represents the Picuris Mountains\njuan_de_onate ::: represents Juan de Onate\nharding_pegmatite_mine ::: represents the Harding Pegmatite Mine\nnew_mexico ::: represents New Mexico\ntexas ::: represents Texas\nPredicates:\nis_mountain_range(x) ::: x is a mountain range.\nvisited(x, y) ::: x visited y.\nlocated_in(x, y) ::: x is located in y.\ndonated(x) ::: x was donated.\nhas_mine(x) ::: x has a mine.\nPremises:\nis_mountain_range(\"picuris_mountains\") \u2227 (is_from(\"picuris_mountains\", \"new_mexico\") \u2228 is_from(\"picuris_mountains\", \"texas\")) ::: The Picuris Mountains are a mountain range in New Mexico or Texas.\nvisited(\"juan_de_onate\", \"picuris_mountains\") ::: Juan de Onate visited the Picuris Mountains.\nlocated_in(\"harding_pegmatite_mine\", \"picuris_mountains\") \u2227 donated(\"harding_pegmatite_mine\") ::: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n\u00ac\u2203x (is_mountain_range(x) \u2227 is_from(x, \"texas\") \u2227 has_mine(x) \u2227 donated(x)) ::: There are no mountain ranges in Texas that have mines which have been donated.\nQuery:\n\u00aclocated_in(\"harding_pegmatite_mine\", \"new_mexico\") ::: The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
            "problem": " The Picuris Mountains are a mountain range in New Mexico or Texas. Juan de Onate visited the Picuris Mountains. The Harding Pegmatite Mine, located in the Picuris Mountains, was donated. There are no mountain ranges in texas that have mines which have been donated.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThe Harding Pegmatite Mine is not located in a mountain range in New Mexico."
        },
        {
            "example": 115,
            "response": [
                "exists x ((is_man(x)  &  is_in_class(x, \"michael\")  &  is_taller(x, \"peter\")))",
                [
                    " all x  all y ((is_man(x)  &  is_taller(x, y))  ->  can_block(x, y)) ",
                    "is_man(\"michael\")  &   all x (is_man(x)  &  is_in_class(x, \"michael\")  ->  is_taller(\"michael\", x)) ",
                    " all x  all y  all z ((is_man(x)  &  is_taller(x, y)  &  is_taller(y, z))  ->  is_taller(x, z)) ",
                    "is_man(\"peter\")  &  is_taller(\"peter\", \"michael\") ",
                    "all x ((can_jump(x)  ->  is_great_shooter(x)) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\nmichael ::: represents michael\npeter ::: represents peter\nwindy ::: represents windy\nPredicates:\nis_man(x) ::: x is a man.\nis_taller(x, y) ::: x is taller than y.\ncan_block(x, y) ::: x can block y's shooting.\nis_in_class(x, y) ::: x is in class y.\ncan_jump(x) ::: x can jump when shooting.\nis_great_shooter(x) ::: x is a great shooter.\nPremises:\n\u2200x \u2200y ((is_man(x) \u2227 is_taller(x, y)) \u2192 can_block(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.\nis_man(\"michael\") \u2227 \u2200x (is_man(x) \u2227 is_in_class(x, \"michael\") \u2192 is_taller(\"michael\", x)) ::: Michael is a man who is taller than everyone else in his class.\n\u2200x \u2200y \u2200z ((is_man(x) \u2227 is_taller(x, y) \u2227 is_taller(y, z)) \u2192 is_taller(x, z)) ::: If person x is taller than person y, and person y is taller than person z, than x is taller than z.\nis_man(\"peter\") \u2227 is_taller(\"peter\", \"michael\") ::: Peter is a man who is taller than Michael.\n\u2200x (can_jump(x) \u2192 is_great_shooter(x)) ::: Every shooter who can jump when shooting is a great shooter.\nQuery:\n\u2203x (is_man(x) \u2227 is_in_class(x, \"michael\") \u2227 is_taller(x, \"peter\")) ::: Peter is shorter than a man in Michael's class.",
            "problem": " If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPeter is shorter than a man in Michael's class."
        },
        {
            "example": 116,
            "response": [
                "is_great_shooter(\"windy\")",
                [
                    " all x  all y (is_man(x)  &  is_man(y)  &  is_taller_than(x, y)  ->  can_block(x, y)) ",
                    "is_man(\"michael\")  &   all x (is_man(x)  &  is_in_class(x, \"michael\")  &  is_taller_than(\"michael\", x)) ",
                    " all x  all y  all z ((is_man(x)  &  is_man(y)  &  is_man(z)  &  is_taller_than(x, y)  &  is_taller_than(y, z))  ->  is_taller_than(x, z)) ",
                    "is_man(\"peter\")  &  is_taller_than(\"peter\", \"michael\") ",
                    "all x ((shoot(x)  ->  (can_jump(x)  ->  is_great_shooter(x))) )",
                    " -can_block(\"michael\", \"windy\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nmichael ::: represents michael\npeter ::: represents peter\nwindy ::: represents windy\nPredicates:\nis_man(x) ::: x is a man.\nis_taller_than(x, y) ::: x is taller than y.\ncan_block(x, y) ::: x can block y's shooting.\nis_in_class(x, y) ::: x is in class y.\ncan_jump(x) ::: x can jump when shooting.\nis_great_shooter(x) ::: x is a great shooter.\nshoot(x) ::: x shoots.\nPremises:\n\u2200x \u2200y (is_man(x) \u2227 is_man(y) \u2227 is_taller_than(x, y) \u2192 can_block(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.\nis_man(\"michael\") \u2227 \u2200x (is_man(x) \u2227 is_in_class(x, \"michael\") \u2227 is_taller_than(\"michael\", x)) ::: Michael is a man who is taller than everyone else in his class.\n\u2200x \u2200y \u2200z ((is_man(x) \u2227 is_man(y) \u2227 is_man(z) \u2227 is_taller_than(x, y) \u2227 is_taller_than(y, z)) \u2192 is_taller_than(x, z)) ::: If person x is taller than person y, and person y is taller than person z, than x is taller than z.\nis_man(\"peter\") \u2227 is_taller_than(\"peter\", \"michael\") ::: Peter is a man who is taller than Michael.\n\u2200x (shoot(x) \u2192 (can_jump(x) \u2192 is_great_shooter(x))) ::: Every shooter who can jump when shooting is a great shooter.\n\u00accan_block(\"michael\", \"windy\") ::: Michael cannot block Windy's shooting.\nQuery:\nis_great_shooter(\"windy\") ::: Windy is a great shooter.",
            "problem": " If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nWindy is a great shooter."
        },
        {
            "example": 117,
            "response": [
                "can_block(\"peter\", \"windy\")",
                [
                    " all x  all y ((is_man(x)  &  is_taller(x, y))  ->  can_block(x, y)) ",
                    "is_man(\"michael\")  &   all x (is_classmate(x, \"michael\")  ->  is_taller(\"michael\", x)) ",
                    " all x  all y  all z ((is_taller(x, y)  &  is_taller(y, z))  ->  is_taller(x, z)) ",
                    "is_man(\"peter\")  &  is_taller(\"peter\", \"michael\") ",
                    "all x ((can_jump(x)  ->  is_great_shooter(x)) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nmichael ::: represents michael\npeter ::: represents peter\nwindy ::: represents windy\nPredicates:\nis_man(x) ::: x is a man.\nis_taller(x, y) ::: x is taller than y.\ncan_block(x, y) ::: x can block y's shooting.\nis_classmate(x, y) ::: x is a classmate of y.\ncan_jump(x) ::: x can jump when shooting.\nis_great_shooter(x) ::: x is a great shooter.\nPremises:\n\u2200x \u2200y ((is_man(x) \u2227 is_taller(x, y)) \u2192 can_block(x, y)) ::: If a man is taller than another man, the taller one can block the other's shooting.\nis_man(\"michael\") \u2227 \u2200x (is_classmate(x, \"michael\") \u2192 is_taller(\"michael\", x)) ::: Michael is a man who is taller than everyone else in his class.\n\u2200x \u2200y \u2200z ((is_taller(x, y) \u2227 is_taller(y, z)) \u2192 is_taller(x, z)) ::: If person x is taller than person y, and person y is taller than person z, than x is taller than z.\nis_man(\"peter\") \u2227 is_taller(\"peter\", \"michael\") ::: Peter is a man who is taller than Michael.\n\u2200x (can_jump(x) \u2192 is_great_shooter(x)) ::: Every shooter who can jump when shooting is a great shooter.\nQuery:\ncan_block(\"peter\", \"windy\") ::: Peter can block Windy's shooting.",
            "problem": " If a man is taller than another man, the taller one can block the other's shooting. Michael is a man who is taller than everyone else in his class. If person x is taller than person y, and person y is taller than person z, than x is taller than z Peter is a man who is taller than Michael. Michael can block any shooting from a person as long as the person does not jump when shooting. Michael cannot block Windy's shooting. Every shooter who can jump when shooting is a great shooter.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPeter can block Windy's shooting."
        },
        {
            "example": 118,
            "response": [
                "all x ((is_named_after(\"barutin\", x)  ->  is_part_of(x, \"antarctica\")))",
                [
                    "is_named_after(\"barutin_cove\", \"bulgarian_settlement_of_barutin\") ",
                    "is_on(\"barutin_cove\", \"snow_island\") ",
                    "is_part_of(\"snow_island\", \"south_shetland_islands\")  &  is_part_of(\"greenwich_island\", \"south_shetland_islands\")  &  is_part_of(\"deception_island\", \"south_shetland_islands\") ",
                    "is_part_of(\"south_shetland_islands\", \"antarctica\") ",
                    " all x  all y  all z (is_on(x, y)  &  is_part_of(y, z)  ->  is_on(x, z)) "
                ]
            ],
            "label": "Uncertain",
            "text": "###\nConstants:\nbarutin_cove ::: represents Barutin Cove\nbulgarian_settlement_of_barutin ::: represents the Bulgarian settlement of Barutin\nsnow_island ::: represents Snow Island\nsouth_shetland_islands ::: represents the South Shetland Islands\ngreenwich_island ::: represents Greenwich Island\ndeception_island ::: represents Deception Island\nantarctica ::: represents Antarctica\nPredicates:\nis_named_after(x, y) ::: x is named after y.\nis_on(x, y) ::: x is on y.\nis_part_of(x, y) ::: x is part of y.\nPremises:\nis_named_after(\"barutin_cove\", \"bulgarian_settlement_of_barutin\") ::: Barutin Cove is named after the Bulgarian settlement of Barutin.\nis_on(\"barutin_cove\", \"snow_island\") ::: Barutin Cove is on the southwest coast of Snow Island.\nis_part_of(\"snow_island\", \"south_shetland_islands\") \u2227 is_part_of(\"greenwich_island\", \"south_shetland_islands\") \u2227 is_part_of(\"deception_island\", \"south_shetland_islands\") ::: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.\nis_part_of(\"south_shetland_islands\", \"antarctica\") ::: The South Shetland Islands are considered part of Antarctica.\n\u2200x \u2200y \u2200z (is_on(x, y) \u2227 is_part_of(y, z) \u2192 is_on(x, z)) ::: If A is located in B and B is located in C, then A is located in C.\nQuery:\n\u2200x (is_named_after(\"barutin\", x) \u2192 is_part_of(x, \"antarctica\")) ::: Barutin is named after all islands in Antarctica.",
            "problem": " Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBarutin is named after all islands in Antarctica."
        },
        {
            "example": 119,
            "response": [
                " exists x  exists y (is_located_in(x, \"antarctica\")  &  is_named_after(y, \"bulgarian_settlement\")  &  is_named_after(x, y))",
                [
                    "is_named_after(\"barutin_cove\", \"bulgarian_settlement\") ",
                    "is_on(\"barutin_cove\", \"snow_island\") ",
                    "is_part_of(\"snow_island\", \"antarctica\")  &  is_part_of(\"greenwich_island\", \"antarctica\")  &  is_part_of(\"deception_island\", \"antarctica\") ",
                    " all x  all y  all z (is_located_in(x, y)  &  is_located_in(y, z)  ->  is_located_in(x, z)) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nbarutin_cove ::: represents Barutin Cove\nbulgarian_settlement ::: represents the Bulgarian settlement of Barutin\nsnow_island ::: represents Snow Island\ngreenwich_island ::: represents Greenwich Island\ndeception_island ::: represents Deception Island\nantarctica ::: represents Antarctica\nPredicates:\nis_named_after(x, y) ::: x is named after y.\nis_on(x, y) ::: x is on y.\nis_part_of(x, y) ::: x is part of y.\nis_located_in(x, y) ::: x is located in y.\nPremises:\nis_named_after(\"barutin_cove\", \"bulgarian_settlement\") ::: Barutin Cove is named after the Bulgarian settlement of Barutin.\nis_on(\"barutin_cove\", \"snow_island\") ::: Barutin Cove is on the southwest coast of Snow Island.\nis_part_of(\"snow_island\", \"antarctica\") \u2227 is_part_of(\"greenwich_island\", \"antarctica\") \u2227 is_part_of(\"deception_island\", \"antarctica\") ::: The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica.\n\u2200x \u2200y \u2200z (is_located_in(x, y) \u2227 is_located_in(y, z) \u2192 is_located_in(x, z)) ::: If A is located in B and B is located in C, then A is located in C.\nQuery:\n\u2203x \u2203y (is_located_in(x, \"antarctica\") \u2227 is_named_after(y, \"bulgarian_settlement\") \u2227 is_named_after(x, y)) ::: There is at least one cove in Antarctica named after a place in Bulgaria.",
            "problem": " Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThere is at least one cove in Antarctica named after a place in Bulgaria."
        },
        {
            "example": 120,
            "response": [
                " -is_located_in(barutin, antarctica)",
                [
                    "is_named_after(barutin_cove, bulgarian_settlement_of_barutin) ",
                    "is_on(barutin_cove, snow_island) ",
                    "is_part_of(south_shetland_islands, antarctica) ",
                    " all x  all y  all z ((is_located_in(x, y)  &  is_located_in(y, z))  ->  is_located_in(x, z)) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nbarutin_cove ::: represents Barutin Cove\nbulgarian_settlement_of_barutin ::: represents the Bulgarian settlement of Barutin\nsnow_island ::: represents Snow Island\nsouth_shetland_islands ::: represents the South Shetland Islands\ngreenwich_island ::: represents Greenwich Island\ndeception_island ::: represents Deception Island\nantarctica ::: represents Antarctica\nPredicates:\nis_named_after(x, y) ::: x is named after y.\nis_on(x, y) ::: x is on y.\nis_part_of(x, y) ::: x is part of y.\nis_located_in(x, y) ::: x is located in y.\nPremises:\nis_named_after(barutin_cove, bulgarian_settlement_of_barutin) ::: Barutin Cove is named after the Bulgarian settlement of Barutin.\nis_on(barutin_cove, snow_island) ::: Barutin Cove is on the southwest coast of Snow Island.\nis_part_of(south_shetland_islands, antarctica) ::: The South Shetland Islands are considered part of Antarctica.\n\u2200x \u2200y \u2200z ((is_located_in(x, y) \u2227 is_located_in(y, z)) \u2192 is_located_in(x, z)) ::: If A is located in B and B is located in C, then A is located in C.\nQuery:\n\u00acis_located_in(barutin, antarctica) ::: Barutin is not located in Antarctica.",
            "problem": " Barutin Cove is named after the Bulgarian settlement of Barutin. Barutin Cove is on the southwest coast of Snow Island. The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island. The South Shetland Islands are considered part of Antarctica. If A is located in B and B is located in C, then A is located in C.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBarutin is not located in Antarctica."
        },
        {
            "example": 121,
            "response": [
                "exists x ((is_affection(x)  &  is_positive(x)))",
                [
                    "exists x ((is_affection(x)  &  is_love(x)) )",
                    "exists x ((is_love(x)  &  is_positive(x)) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\naffection ::: represents affection\nlove ::: represents love\npositive ::: represents positive\nPredicates:\nis_affection(x) ::: x is affection.\nis_love(x) ::: x is love.\nis_positive(x) ::: x is positive.\nPremises:\n\u2203x (is_affection(x) \u2227 is_love(x)) ::: Some affection is love.\n\u2203x (is_love(x) \u2227 is_positive(x)) ::: Some love is positive.\nQuery:\n\u2203x (is_affection(x) \u2227 is_positive(x)) ::: Some affection is positive.",
            "problem": " Some affection is love. Some love is positive.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSome affection is positive."
        },
        {
            "example": 122,
            "response": [
                "is_airline(\"greyhound\")",
                [
                    "all x ((can_transport(x, \"multiple_passengers\")  ->   -is_empty(x)) )",
                    "all x ((is_airline(x)  ->  can_transport(x, \"multiple_passengers\")) )",
                    "all x ((is_plane(x)  ->  is_empty(x)) )",
                    "all x ((is_boeing_707(x)  ->  is_plane(x)) )",
                    " -is_airline(\"greyhound\")  ->   - exists x (is_plane(x)  &  is_greyhound(x)) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nboeing_707 ::: represents Boeing 707\ngreyhound ::: represents Greyhound\nPredicates:\ncan_transport(x, y) ::: x can transport y.\nis_empty(x) ::: x is empty.\nis_airline(x) ::: x is an airline.\nis_plane(x) ::: x is a plane.\nPremises:\n\u2200x (can_transport(x, \"multiple_passengers\") \u2192 \u00acis_empty(x)) ::: If something can transport multiple passengers, then they are not empty.\n\u2200x (is_airline(x) \u2192 can_transport(x, \"multiple_passengers\")) ::: All airlines can transport multiple passengers.\n\u2200x (is_plane(x) \u2192 is_empty(x)) ::: All planes are empty.\n\u2200x (is_boeing_707(x) \u2192 is_plane(x)) ::: All Boeing 707s are planes.\n\u00acis_airline(\"greyhound\") \u2192 \u00ac\u2203x (is_plane(x) \u2227 is_greyhound(x)) ::: If Greyhound is not an airline, then there are no Greyhound planes.\nQuery:\nis_airline(\"greyhound\") ::: Greyhound is an airline.",
            "problem": " If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nGreyhound is an airline."
        },
        {
            "example": 123,
            "response": [
                "is_boeing_707(\"greyhound\")",
                [
                    "all x ((can_transport(x, \"multiple_passengers\")  ->   -is_empty(x)) )",
                    "all x ((is_airline(x)  ->  can_transport(x, \"multiple_passengers\")) )",
                    "all x ((is_plane(x)  ->  is_empty(x)) )",
                    "all x ((is_boeing_707(x)  ->  is_plane(x)) )",
                    " -is_airline(\"greyhound\")  ->   - exists x (is_boeing_707(x)) "
                ]
            ],
            "label": "False",
            "text": "###\nConstants:\nboeing_707 ::: represents a Boeing 707\ngreyhound ::: represents a Greyhound\nPredicates:\ncan_transport(x, y) ::: x can transport y.\nis_empty(x) ::: x is empty.\nis_airline(x) ::: x is an airline.\nis_plane(x) ::: x is a plane.\nPremises:\n\u2200x (can_transport(x, \"multiple_passengers\") \u2192 \u00acis_empty(x)) ::: If something can transport multiple passengers, then they are not empty.\n\u2200x (is_airline(x) \u2192 can_transport(x, \"multiple_passengers\")) ::: All airlines can transport multiple passengers.\n\u2200x (is_plane(x) \u2192 is_empty(x)) ::: All planes are empty.\n\u2200x (is_boeing_707(x) \u2192 is_plane(x)) ::: All Boeing 707s are planes.\n\u00acis_airline(\"greyhound\") \u2192 \u00ac\u2203x (is_boeing_707(x)) ::: If Greyhound is not an airline, then there are no Greyhound planes.\nQuery:\nis_boeing_707(\"greyhound\") ::: A Greyhound is a Boeing 707.",
            "problem": " If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nA Greyhound is a Boeing 707."
        },
        {
            "example": 124,
            "response": [
                "- exists x ((is_boeing_707(x)  &  is_plane(x)  &  can_transport(\"greyhound\", \"multiple_passengers\")))",
                [
                    "all x ((can_transport(x, \"multiple_passengers\")  ->   -is_empty(x)) )",
                    "all x ((is_airline(x)  ->  can_transport(x, \"multiple_passengers\")) )",
                    "all x ((is_plane(x)  ->  is_empty(x)) )",
                    "all x ((is_boeing_707(x)  ->  is_plane(x)) )",
                    " -is_airline(\"greyhound\")  ->   - exists x (is_boeing_707(x)  &  is_plane(x)  &  can_transport(\"greyhound\", \"multiple_passengers\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nboeing_707 ::: represents a Boeing 707\ngreyhound ::: represents a Greyhound\nPredicates:\ncan_transport(x, y) ::: x can transport y.\nis_empty(x) ::: x is empty.\nis_airline(x) ::: x is an airline.\nis_plane(x) ::: x is a plane.\nPremises:\n\u2200x (can_transport(x, \"multiple_passengers\") \u2192 \u00acis_empty(x)) ::: If something can transport multiple passengers, then they are not empty.\n\u2200x (is_airline(x) \u2192 can_transport(x, \"multiple_passengers\")) ::: All airlines can transport multiple passengers.\n\u2200x (is_plane(x) \u2192 is_empty(x)) ::: All planes are empty.\n\u2200x (is_boeing_707(x) \u2192 is_plane(x)) ::: All Boeing 707s are planes.\n\u00acis_airline(\"greyhound\") \u2192 \u00ac\u2203x (is_boeing_707(x) \u2227 is_plane(x) \u2227 can_transport(\"greyhound\", \"multiple_passengers\")) ::: If Greyhound is not an airline, then there are no Greyhound planes.\nQuery:\n\u00ac\u2203x (is_boeing_707(x) \u2227 is_plane(x) \u2227 can_transport(\"greyhound\", \"multiple_passengers\")) ::: A Greyhound is not a Boeing 707.",
            "problem": " If something can transport multiple passengers, then they are not empty. All airlines can transport multiple passengers. All planes are empty. All Boeing 707s are planes. If Greyhound is not an airline, then there are no Greyhound planes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nA Greyhound is not a Boeing 707."
        },
        {
            "example": 125,
            "response": [
                "is_monkey(\"rock\")",
                [
                    "all x ((is_mammal(x)  ->  is_animal(x)) )",
                    "all x ((is_monkey(x)  ->  is_mammal(x)) )",
                    "all x (((is_animal(x)  &   -is_monkey(x))  |  ( -is_animal(x)  &  is_monkey(x))) )",
                    "all x ((is_bird(x)  ->  fly(x)) )",
                    "all x ((is_animal(x)  ->  breathe(x)) )",
                    "all x ((fly(x)  ->  has_wings(x)) )",
                    " -(is_fly(\"rock\")  |  is_bird(\"rock\"))  ->   -(fly(\"rock\")  |  breathe(\"rock\")) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nrock ::: represents rock\nPredicates:\nis_mammal(x) ::: x is a mammal.\nis_animal(x) ::: x is an animal.\nis_monkey(x) ::: x is a monkey.\nis_bird(x) ::: x is a bird.\nfly(x) ::: x flies.\nbreathe(x) ::: x breathes.\nhas_wings(x) ::: x has wings.\nPremises:\n\u2200x (is_mammal(x) \u2192 is_animal(x)) ::: All mammals are animals.\n\u2200x (is_monkey(x) \u2192 is_mammal(x)) ::: All monkeys are mammals.\n\u2200x ((is_animal(x) \u2227 \u00acis_monkey(x)) \u2228 (\u00acis_animal(x) \u2227 is_monkey(x))) ::: An animal is either a monkey or a bird.\n\u2200x (is_bird(x) \u2192 fly(x)) ::: All birds fly.\n\u2200x (is_animal(x) \u2192 breathe(x)) ::: All animals breathe.\n\u2200x (fly(x) \u2192 has_wings(x)) ::: If something can fly, then it has wings.\n\u00ac(is_fly(\"rock\") \u2228 is_bird(\"rock\")) \u2192 \u00ac(fly(\"rock\") \u2228 breathe(\"rock\")) ::: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nQuery:\nis_monkey(\"rock\") ::: Rock is a monkey.",
            "problem": " All mammals are animals. All monkeys are mammals.  An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRock is a monkey."
        },
        {
            "example": 126,
            "response": [
                "has_wings(\"rock\")",
                [
                    "all x ((is_mammal(x)  ->  is_animal(x)) )",
                    "all x ((is_monkey(x)  ->  is_mammal(x)) )",
                    "all x (((is_animal(x)  &   -is_monkey(x))  |  ( -is_animal(x)  &  is_monkey(x))) )",
                    "all x ((is_bird(x)  ->  fly(x)) )",
                    "all x ((is_animal(x)  ->  breathe(x)) )",
                    "all x ((fly(x)  ->  has_wings(x)) )",
                    " -(fly(\"rock\")  |  is_bird(\"rock\"))  ->   -(fly(\"rock\")  &  breathe(\"rock\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nrock ::: represents rock\nPredicates:\nis_mammal(x) ::: x is a mammal.\nis_animal(x) ::: x is an animal.\nis_monkey(x) ::: x is a monkey.\nis_bird(x) ::: x is a bird.\nfly(x) ::: x flies.\nbreathe(x) ::: x breathes.\nhas_wings(x) ::: x has wings.\nPremises:\n\u2200x (is_mammal(x) \u2192 is_animal(x)) ::: All mammals are animals.\n\u2200x (is_monkey(x) \u2192 is_mammal(x)) ::: All monkeys are mammals.\n\u2200x ((is_animal(x) \u2227 \u00acis_monkey(x)) \u2228 (\u00acis_animal(x) \u2227 is_monkey(x))) ::: An animal is either a monkey or a bird.\n\u2200x (is_bird(x) \u2192 fly(x)) ::: All birds fly.\n\u2200x (is_animal(x) \u2192 breathe(x)) ::: All animals breathe.\n\u2200x (fly(x) \u2192 has_wings(x)) ::: If something can fly, then it has wings.\n\u00ac(fly(\"rock\") \u2228 is_bird(\"rock\")) \u2192 \u00ac(fly(\"rock\") \u2227 breathe(\"rock\")) ::: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nQuery:\nhas_wings(\"rock\") ::: Rock has wings.",
            "problem": " All mammals are animals. All monkeys are mammals.  An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRock has wings."
        },
        {
            "example": 127,
            "response": [
                " -has_wings(\"rock\")",
                [
                    "all x ((is_mammal(x)  ->  is_animal(x)) )",
                    "all x ((is_monkey(x)  ->  is_mammal(x)) )",
                    "all x (((is_animal(x)  &   -is_monkey(x))  |  ( -is_animal(x)  &  is_monkey(x))) )",
                    "all x ((is_bird(x)  ->  fly(x)) )",
                    "all x ((is_animal(x)  ->  breathe(x)) )",
                    "all x ((fly(x)  ->  has_wings(x)) )",
                    " -(fly(\"rock\")  |  is_bird(\"rock\"))  ->   -(fly(\"rock\")  |  breathe(\"rock\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nrock ::: represents rock\nPredicates:\nis_mammal(x) ::: x is a mammal.\nis_animal(x) ::: x is an animal.\nis_monkey(x) ::: x is a monkey.\nis_bird(x) ::: x is a bird.\nfly(x) ::: x flies.\nbreathe(x) ::: x breathes.\nhas_wings(x) ::: x has wings.\nPremises:\n\u2200x (is_mammal(x) \u2192 is_animal(x)) ::: All mammals are animals.\n\u2200x (is_monkey(x) \u2192 is_mammal(x)) ::: All monkeys are mammals.\n\u2200x ((is_animal(x) \u2227 \u00acis_monkey(x)) \u2228 (\u00acis_animal(x) \u2227 is_monkey(x))) ::: An animal is either a monkey or a bird.\n\u2200x (is_bird(x) \u2192 fly(x)) ::: All birds fly.\n\u2200x (is_animal(x) \u2192 breathe(x)) ::: All animals breathe.\n\u2200x (fly(x) \u2192 has_wings(x)) ::: If something can fly, then it has wings.\n\u00ac(fly(\"rock\") \u2228 is_bird(\"rock\")) \u2192 \u00ac(fly(\"rock\") \u2228 breathe(\"rock\")) ::: If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.\nQuery:\n\u00achas_wings(\"rock\") ::: Rock does not have wings.",
            "problem": " All mammals are animals. All monkeys are mammals.  An animal is either a monkey or a bird. All birds fly. All animals breathe. If something can fly, then it has wings. If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRock does not have wings."
        },
        {
            "example": 128,
            "response": [
                "is_well_attended(\"john\")",
                [
                    "all x ((have_wedding(x)  ->  have_child(x)) )",
                    "all x ((travel_to(x, \"paris\")  &  honeymoon_in(x, \"paris\")  ->  have_wedding(x)) )",
                    "all x ((is_in_month(have_wedding(x), \"july\")  ->  (travel_to(x, \"paris\")  &  honeymoon_in(x, \"paris\"))) )",
                    "exists x ((have_wedding(x)  &  is_in_month(x, \"july\")  &  is_well_attended(x)) )",
                    "(have_child(\"john\")  ->   -(travel_to(\"john\", \"paris\")  &  have_wedding(\"john\")))  &  (is_well_attended(\"john\")  ->  (is_in_month(have_wedding(\"john\"), \"july\")  |  ( -is_in_month(have_wedding(\"john\"), \"july\")  &  travel_to(\"john\", \"paris\")))) "
                ]
            ],
            "label": "False",
            "text": "Constants:\njohn ::: represents john\nparis ::: represents paris\nPredicates:\nhave_wedding(x) ::: x has a wedding.\nhave_child(x) ::: x has at least one child.\ntravel_to(x, y) ::: x travels to y.\nhoneymoon_in(x, y) ::: x has a honeymoon in y.\nbelong_to(x, y) ::: x belongs to y.\nis_well_attended(x) ::: x is well-attended.\nis_in_month(x, y) ::: x is in month y.\nPremises:\n\u2200x (have_wedding(x) \u2192 have_child(x)) ::: All people who have a wedding are people who have at least one child.\n\u2200x (travel_to(x, \"paris\") \u2227 honeymoon_in(x, \"paris\") \u2192 have_wedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.\n\u2200x (is_in_month(have_wedding(x), \"july\") \u2192 (travel_to(x, \"paris\") \u2227 honeymoon_in(x, \"paris\"))) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n\u2203x (have_wedding(x) \u2227 is_in_month(x, \"july\") \u2227 is_well_attended(x)) ::: Some weddings in July are well-attended.\n(have_child(\"john\") \u2192 \u00ac(travel_to(\"john\", \"paris\") \u2227 have_wedding(\"john\"))) \u2227 (is_well_attended(\"john\") \u2192 (is_in_month(have_wedding(\"john\"), \"july\") \u2228 (\u00acis_in_month(have_wedding(\"john\"), \"july\") \u2227 travel_to(\"john\", \"paris\")))) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nQuery:\nis_well_attended(\"john\") ::: John has a wedding that is well-attended.",
            "problem": " All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJohn has a wedding that is well-attended."
        },
        {
            "example": 129,
            "response": [
                " -well_attended(\"john\")",
                [
                    "all x ((have_wedding(x)  ->  have_child(x)) )",
                    "all x ((honeymoon_in(x, \"paris\")  ->  have_wedding(x)) )",
                    "all x ((occur_in(have_wedding(x), \"july\")  ->  honeymoon_in(x, \"paris\")) )",
                    "exists x ((have_wedding(x)  &  occur_in(x, \"july\")  &  well_attended(x)) )",
                    "(have_child(\"john\")  ->   -honeymoon_in(\"john\", \"paris\")  &   -have_wedding(\"john\")) ",
                    "(well_attended(\"john\")  ->  (occur_in(have_wedding(\"john\"), \"july\")  |  ( -occur_in(have_wedding(\"john\"), \"july\")  &  honeymoon_in(\"john\", \"paris\")))) "
                ]
            ],
            "label": "True",
            "text": "Constants:\njohn ::: represents john\nparis ::: represents paris\nPredicates:\nhave_wedding(x) ::: x has a wedding.\nhave_child(x) ::: x has at least one child.\ntravel_to(x, y) ::: x travels to y.\nhoneymoon_in(x, y) ::: x has a honeymoon in y.\nwell_attended(x) ::: x has a wedding that is well-attended.\noccur_in(x, y) ::: x occurs in y.\nPremises:\n\u2200x (have_wedding(x) \u2192 have_child(x)) ::: All people who have a wedding are people who have at least one child.\n\u2200x (honeymoon_in(x, \"paris\") \u2192 have_wedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.\n\u2200x (occur_in(have_wedding(x), \"july\") \u2192 honeymoon_in(x, \"paris\")) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n\u2203x (have_wedding(x) \u2227 occur_in(x, \"july\") \u2227 well_attended(x)) ::: Some weddings in July are well-attended.\n(have_child(\"john\") \u2192 \u00achoneymoon_in(\"john\", \"paris\") \u2227 \u00achave_wedding(\"john\")) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\n(well_attended(\"john\") \u2192 (occur_in(have_wedding(\"john\"), \"july\") \u2228 (\u00acoccur_in(have_wedding(\"john\"), \"july\") \u2227 honeymoon_in(\"john\", \"paris\")))) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nQuery:\n\u00acwell_attended(\"john\") ::: John does not have a wedding that is well-attended.",
            "problem": " All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJohn does not have a wedding that is well-attended."
        },
        {
            "example": 130,
            "response": [
                "have_child(\"john\")",
                [
                    "all x ((have_wedding(x)  ->  have_child(x)) )",
                    "all x ((honeymoon_in(x, \"paris\")  ->  have_wedding(x)) )",
                    "all x ((occur_in(have_wedding(x), \"july\")  ->  honeymoon_in(x, \"paris\")) )",
                    "exists x ((occur_in(have_wedding(x), \"july\")  &  well_attended(x)) )",
                    "(have_child(\"john\")  ->   -(honeymoon_in(\"john\", \"paris\")  &  have_wedding(\"john\")))  &  (well_attended(\"john\")  ->  (occur_in(have_wedding(\"john\"), \"july\")  |  ( -occur_in(have_wedding(\"john\"), \"july\")  &  honeymoon_in(\"john\", \"paris\")))) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\njohn ::: represents john\nparis ::: represents paris\nPredicates:\nhave_wedding(x) ::: x has a wedding.\nhave_child(x) ::: x has at least one child.\ntravel_to(x, y) ::: x travels to y.\nhoneymoon_in(x, y) ::: x has a honeymoon in y.\nbelong_to(x, y) ::: x belongs to y.\nwell_attended(x) ::: x is well-attended.\noccur_in(x, y) ::: x occurs in y.\nPremises:\n\u2200x (have_wedding(x) \u2192 have_child(x)) ::: All people who have a wedding are people who have at least one child.\n\u2200x (honeymoon_in(x, \"paris\") \u2192 have_wedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.\n\u2200x (occur_in(have_wedding(x), \"july\") \u2192 honeymoon_in(x, \"paris\")) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n\u2203x (occur_in(have_wedding(x), \"july\") \u2227 well_attended(x)) ::: Some weddings in July are well-attended.\n(have_child(\"john\") \u2192 \u00ac(honeymoon_in(\"john\", \"paris\") \u2227 have_wedding(\"john\"))) \u2227 (well_attended(\"john\") \u2192 (occur_in(have_wedding(\"john\"), \"july\") \u2228 (\u00acoccur_in(have_wedding(\"john\"), \"july\") \u2227 honeymoon_in(\"john\", \"paris\")))) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nQuery:\nhave_child(\"john\") ::: John has at least one child.",
            "problem": " All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJohn has at least one child."
        },
        {
            "example": 131,
            "response": [
                " -(is_well_attended(have_wedding(\"john\"))  |  (travel_to(\"john\", \"paris\")  &  honeymoon_in(\"john\", \"paris\")))",
                [
                    "all x ((have_wedding(x)  ->  have_child(x)) )",
                    "all x ((travel_to(x, \"paris\")  &  honeymoon_in(x, \"paris\")  ->  have_wedding(x)) )",
                    "all x ((occur_in(have_wedding(x), \"july\")  ->  (travel_to(x, \"paris\")  &  honeymoon_in(x, \"paris\"))) )",
                    "exists x ((occur_in(have_wedding(x), \"july\")  &  is_well_attended(have_wedding(x))) )",
                    "(have_child(\"john\")  ->   -(travel_to(\"john\", \"paris\")  &  honeymoon_in(\"john\", \"paris\")  &  have_wedding(\"john\"))) ",
                    "(is_well_attended(have_wedding(\"john\"))  ->  (occur_in(have_wedding(\"john\"), \"july\")  |  ( -occur_in(have_wedding(\"john\"), \"july\")  &  travel_to(\"john\", \"paris\")  &  honeymoon_in(\"john\", \"paris\")))) "
                ]
            ],
            "label": "True",
            "text": "Constants:\njohn ::: represents john\nparis ::: represents paris\nPredicates:\nhave_wedding(x) ::: x has a wedding.\nhave_child(x) ::: x has at least one child.\ntravel_to(x, y) ::: x travels to y.\nhoneymoon_in(x, y) ::: x has a honeymoon in y.\nbelong_to(x, y) ::: x belongs to y.\nis_well_attended(x) ::: x is well-attended.\noccur_in(x, y) ::: x occurs in y.\nPremises:\n\u2200x (have_wedding(x) \u2192 have_child(x)) ::: All people who have a wedding are people who have at least one child.\n\u2200x (travel_to(x, \"paris\") \u2227 honeymoon_in(x, \"paris\") \u2192 have_wedding(x)) ::: All people who travel to Paris for their honeymoon are people who have a wedding.\n\u2200x (occur_in(have_wedding(x), \"july\") \u2192 (travel_to(x, \"paris\") \u2227 honeymoon_in(x, \"paris\"))) ::: All weddings that occur in July belong to people who travel to Paris for their honeymoon.\n\u2203x (occur_in(have_wedding(x), \"july\") \u2227 is_well_attended(have_wedding(x))) ::: Some weddings in July are well-attended.\n(have_child(\"john\") \u2192 \u00ac(travel_to(\"john\", \"paris\") \u2227 honeymoon_in(\"john\", \"paris\") \u2227 have_wedding(\"john\"))) ::: If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.\n(is_well_attended(have_wedding(\"john\")) \u2192 (occur_in(have_wedding(\"john\"), \"july\") \u2228 (\u00acoccur_in(have_wedding(\"john\"), \"july\") \u2227 travel_to(\"john\", \"paris\") \u2227 honeymoon_in(\"john\", \"paris\")))) ::: If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon.\nQuery:\n\u00ac(is_well_attended(have_wedding(\"john\")) \u2228 (travel_to(\"john\", \"paris\") \u2227 honeymoon_in(\"john\", \"paris\"))) ::: John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.",
            "problem": " All people who have a wedding are people who have at least one child. All people who travel to Paris for their honeymoon are people who have a wedding. All weddings that occur in July belong to people who travel to Paris for their honeymoon. Some weddings in July are well-attended. If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding. If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJohn has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon."
        },
        {
            "example": 132,
            "response": [
                "are_mammals(\"platypus\")  &   -have_teeth(\"platypus\")",
                [
                    "exists x ((are_mammals(x)  &  have_teeth(x)) )",
                    " -have_teeth(\"platypus\") ",
                    "are_mammals(\"platypus\") ",
                    "have_teeth(\"humans\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nplatypus ::: represents platypus\nhumans ::: represents humans\nPredicates:\nhave_teeth(x) ::: x has teeth.\nare_mammals(x) ::: x is a mammal.\nPremises:\n\u2203x (are_mammals(x) \u2227 have_teeth(x)) ::: Some mammals have teeth.\n\u00achave_teeth(\"platypus\") ::: Platypus have no teeth.\nare_mammals(\"platypus\") ::: Platypus are mammals.\nhave_teeth(\"humans\") ::: Humans have teeth.\nQuery:\nare_mammals(\"platypus\") \u2227 \u00achave_teeth(\"platypus\") ::: Platypus are mammals with no teeth.",
            "problem": " [BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals.  Humans have teeth.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPlatypus are mammals with no teeth."
        },
        {
            "example": 133,
            "response": [
                "are_reptiles(\"platypus\")",
                [
                    "exists x ((are_mammals(x)  &  have_teeth(x)) )",
                    "all x ( -(have_teeth(\"platypus\")) )",
                    "are_mammals(\"platypus\") ",
                    "have_teeth(\"humans\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nplatypus ::: represents platypus\nhumans ::: represents humans\nPredicates:\nhave_teeth(x) ::: x has teeth.\nare_mammals(x) ::: x is a mammal.\nare_reptiles(x) ::: x is a reptile.\nPremises:\n\u2203x (are_mammals(x) \u2227 have_teeth(x)) ::: Some mammals have teeth.\n\u2200x \u00ac(have_teeth(\"platypus\")) ::: Platypus have no teeth.\nare_mammals(\"platypus\") ::: Platypus are mammals.\nhave_teeth(\"humans\") ::: Humans have teeth.\nQuery:\nare_reptiles(\"platypus\") ::: Platypus are reptiles.",
            "problem": " [BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals.  Humans have teeth.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPlatypus are reptiles."
        },
        {
            "example": 134,
            "response": [
                "are_mammals(\"humans\")",
                [
                    "exists x ((are_mammals(x)  &  have_teeth(x)) )",
                    " -have_teeth(\"platypus\") ",
                    "are_mammals(\"platypus\") ",
                    "have_teeth(\"humans\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nplatypus ::: represents platypus\nhumans ::: represents humans\nPredicates:\nhave_teeth(x) ::: x has teeth.\nare_mammals(x) ::: x is a mammal.\nPremises:\n\u2203x (are_mammals(x) \u2227 have_teeth(x)) ::: Some mammals have teeth.\n\u00achave_teeth(\"platypus\") ::: Platypus have no teeth.\nare_mammals(\"platypus\") ::: Platypus are mammals.\nhave_teeth(\"humans\") ::: Humans have teeth.\nQuery:\nare_mammals(\"humans\") ::: Humans are mammals.",
            "problem": " [BG] Some mammals have teeth. Platypus have no teeth. Platypus are mammals.  Humans have teeth.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nHumans are mammals."
        },
        {
            "example": 135,
            "response": [
                "suck(\"space\")",
                [
                    "suck(\"plungers\") ",
                    "suck(\"vacuums\") ",
                    "suck(\"vampires\") ",
                    "is_vacuum(\"space\") ",
                    "is_household_appliance(\"duster\")  &   -suck(\"duster\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nplungers ::: represents plungers\nvacuums ::: represents vacuums\nvampires ::: represents vampires\nspace ::: represents space\nduster ::: represents duster\nhousehold_appliance ::: represents household appliance\nPredicates:\nsuck(x) ::: x sucks.\nis_vacuum(x) ::: x is a vacuum.\nis_household_appliance(x) ::: x is a household appliance.\nPremises:\nsuck(\"plungers\") ::: Plungers suck.\nsuck(\"vacuums\") ::: Vacuums suck.\nsuck(\"vampires\") ::: Vampires suck.\nis_vacuum(\"space\") ::: Space is a vacuum.\nis_household_appliance(\"duster\") \u2227 \u00acsuck(\"duster\") ::: A duster is a household appliance that doesn't suck.\nQuery:\nsuck(\"space\") ::: Space sucks.",
            "problem": " Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSpace sucks."
        },
        {
            "example": 136,
            "response": [
                "is_vampire(\"space\")",
                [
                    "suck(\"plungers\") ",
                    "suck(\"vacuums\") ",
                    "suck(\"vampires\") ",
                    "is_vacuum(\"space\") ",
                    "is_household_appliance(\"duster\")  &   -suck(\"duster\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nplungers ::: represents plungers\nvacuums ::: represents vacuums\nvampires ::: represents vampires\nspace ::: represents space\nduster ::: represents duster\nhousehold_appliance ::: represents household appliance\nPredicates:\nsuck(x) ::: x sucks.\nis_vacuum(x) ::: x is a vacuum.\nis_vampire(x) ::: x is a vampire.\nis_household_appliance(x) ::: x is a household appliance.\nPremises:\nsuck(\"plungers\") ::: Plungers suck.\nsuck(\"vacuums\") ::: Vacuums suck.\nsuck(\"vampires\") ::: Vampires suck.\nis_vacuum(\"space\") ::: Space is a vacuum.\nis_household_appliance(\"duster\") \u2227 \u00acsuck(\"duster\") ::: A duster is a household appliance that doesn't suck.\nQuery:\nis_vampire(\"space\") ::: Space is a vampire.",
            "problem": " Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSpace is a vampire."
        },
        {
            "example": 137,
            "response": [
                "all x ((is_household_appliance(x)  ->  suck(x)))",
                [
                    "suck(\"plunger\") ",
                    "suck(\"vacuum\") ",
                    "suck(\"vampire\") ",
                    "is_vacuum(\"space\") ",
                    "is_household_appliance(\"duster\")  &   -suck(\"duster\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nplunger ::: represents a plunger\nvacuum ::: represents a vacuum\nvampire ::: represents a vampire\nspace ::: represents space\nduster ::: represents a duster\nhousehold_appliance ::: represents a household appliance\nPredicates:\nsuck(x) ::: x sucks.\nis_vacuum(x) ::: x is a vacuum.\nis_household_appliance(x) ::: x is a household appliance.\nPremises:\nsuck(\"plunger\") ::: Plungers suck.\nsuck(\"vacuum\") ::: Vacuums suck.\nsuck(\"vampire\") ::: Vampires suck.\nis_vacuum(\"space\") ::: Space is a vacuum.\nis_household_appliance(\"duster\") \u2227 \u00acsuck(\"duster\") ::: A duster is a household appliance that doesn't suck.\nQuery:\n\u2200x (is_household_appliance(x) \u2192 suck(x)) ::: If something is a household appliance, it sucks.",
            "problem": " Plungers suck. Vacuums suck. Vampires suck. Space is a vacuum. A duster is a household appliance that doesn't suck.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf something is a household appliance, it sucks."
        },
        {
            "example": 138,
            "response": [
                "is_used_to_train(\"supervised_learning\", \"text_summarization_model\")",
                [
                    "all x ((is_categorized_as(x, \"supervised_learning\")  |  is_categorized_as(x, \"unsupervised_learning\")  |  is_categorized_as(x, \"reinforcement_learning\")) )",
                    " -require(\"unsupervised_learning\", labelled_data) ",
                    "is_trained_with(\"text_summarization_model\", machine_learning_algorithm) ",
                    " -is_used_to_train(\"reinforcement_learning\", \"text_summarization_model\") ",
                    "require(machine_learning_algorithm, labelled_data) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nsupervised_learning ::: represents supervised learning\nunsupervised_learning ::: represents unsupervised learning\nreinforcement_learning ::: represents reinforcement learning\ntext_summarization_model ::: represents the text summarization model\nmachine_learning_algorithm ::: represents the machine learning algorithm\nlabelled_data ::: represents labelled data\n\nPredicates:\nis_categorized_as(x, y) ::: x is categorized as y.\nrequire(x, y) ::: x requires y.\nis_trained_with(x, y) ::: x is trained with y.\nis_used_to_train(x, y) ::: x is used to train y.\n\nPremises:\n\u2200x (is_categorized_as(x, \"supervised learning\") \u2228 is_categorized_as(x, \"unsupervised learning\") \u2228 is_categorized_as(x, \"reinforcement learning\")) ::: Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\n\u00acrequire(\"unsupervised learning\", labelled_data) ::: Unsupervised learning doesn't require labelled data.\nis_trained_with(\"text_summarization_model\", machine_learning_algorithm) ::: The state-of-the-art text summarization model is trained with machine learning algorithms.\n\u00acis_used_to_train(\"reinforcement learning\", \"text_summarization_model\") ::: Reinforcement learning is not used to train the state-of-the-art text summarization model.\nrequire(machine_learning_algorithm, labelled_data) ::: The Machine Learning algorithm for training text summarization model requires labelled data.\n\nQuery:\nis_used_to_train(\"supervised learning\", \"text_summarization_model\") ::: Supervised learning is used to train the state-of-the-art text summarization model.",
            "problem": " Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning. Unsupervised learning doesn't require labelled data. The state-of-the-art text summarization model is trained with machine learning algorithms. Reinforcement learning is not used to train the state-of-the-art text summarization model. The Machine Learning algorithm for training text summarization model requires labelled data.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSupervised learning is used to train the state-of-the-art text summarization model."
        },
        {
            "example": 139,
            "response": [
                "is_used_to_train(unsupervised_learning, text_summarization_model)",
                [
                    "all x ((is_categorized_as(x, supervised_learning)  |  is_categorized_as(x, unsupervised_learning)  |  is_categorized_as(x, reinforcement_learning)) )",
                    " -require(unsupervised_learning, labelled_data) ",
                    "is_trained_with(text_summarization_model, machine_learning_algorithm)  &  is_categorized_as(machine_learning_algorithm, supervised_learning) ",
                    " -is_used_to_train(reinforcement_learning, text_summarization_model) ",
                    "require(machine_learning_algorithm, labelled_data) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nsupervised_learning ::: represents supervised learning\nunsupervised_learning ::: represents unsupervised learning\nreinforcement_learning ::: represents reinforcement learning\ntext_summarization_model ::: represents the text summarization model\nmachine_learning_algorithm ::: represents the machine learning algorithm\nlabelled_data ::: represents labelled data\n\nPredicates:\nis_categorized_as(x, y) ::: x is categorized as y.\nrequire(x, y) ::: x requires y.\nis_trained_with(x, y) ::: x is trained with y.\nis_used_to_train(x, y) ::: x is used to train y.\n\nPremises:\n\u2200x (is_categorized_as(x, supervised_learning) \u2228 is_categorized_as(x, unsupervised_learning) \u2228 is_categorized_as(x, reinforcement_learning)) ::: Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\n\u00acrequire(unsupervised_learning, labelled_data) ::: Unsupervised learning doesn't require labelled data.\nis_trained_with(text_summarization_model, machine_learning_algorithm) \u2227 is_categorized_as(machine_learning_algorithm, supervised_learning) ::: The state-of-the-art text summarization model is trained with machine learning algorithms.\n\u00acis_used_to_train(reinforcement_learning, text_summarization_model) ::: Reinforcement learning is not used to train the state-of-the-art text summarization model.\nrequire(machine_learning_algorithm, labelled_data) ::: The Machine Learning algorithm for training text summarization model requires labelled data.\n\nQuery:\nis_used_to_train(unsupervised_learning, text_summarization_model) ::: Unsupervised learning is used to train the state-of-the-art text summarization model.",
            "problem": " Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning. Unsupervised learning doesn't require labelled data. The state-of-the-art text summarization model is trained with machine learning algorithms. Reinforcement learning is not used to train the state-of-the-art text summarization model. The Machine Learning algorithm for training text summarization model requires labelled data.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nUnsupervised learning is used to train the state-of-the-art text summarization model."
        },
        {
            "example": 140,
            "response": [
                "is_loved_by_children(\"ben\")",
                [
                    "all x ((is_funny(x)  ->  is_popular(x)) )",
                    "all x ((is_ugly(x)  ->   -is_popular(x)) )",
                    "all x ((is_loved_by_children(x)  ->  is_funny(x)) )",
                    "all x ((is_from_the_simpsons(x)  ->  is_loved_by_children(x)) )",
                    "all x ((is_yellow(x)  ->  is_from_the_simpsons(x)) )",
                    "(is_from_the_simpsons(\"ben\")  |  is_funny(\"ben\")) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nben ::: represents ben\nPredicates:\nis_funny(x) ::: x is funny.\nis_popular(x) ::: x is popular.\nis_ugly(x) ::: x is ugly.\nis_loved_by_children(x) ::: x is loved by children.\nis_from_the_simpsons(x) ::: x is from The Simpsons.\nis_yellow(x) ::: x is yellow.\nPremises:\n\u2200x (is_funny(x) \u2192 is_popular(x)) ::: If a cartoon character is funny, then it is popular.\n\u2200x (is_ugly(x) \u2192 \u00acis_popular(x)) ::: If a cartoon character is ugly, then it is not popular.\n\u2200x (is_loved_by_children(x) \u2192 is_funny(x)) ::: If a cartoon character is loved by children, then it is funny.\n\u2200x (is_from_the_simpsons(x) \u2192 is_loved_by_children(x)) ::: If a cartoon character is from The Simpsons, then it is loved by children.\n\u2200x (is_yellow(x) \u2192 is_from_the_simpsons(x)) ::: If a cartoon character is yellow, then it is from The Simpsons.\n(is_from_the_simpsons(\"ben\") \u2228 is_funny(\"ben\")) ::: Ben is either from The Simpsons or funny.\nQuery:\nis_loved_by_children(\"ben\") ::: Ben is loved by children.",
            "problem": " If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBen is loved by children."
        },
        {
            "example": 141,
            "response": [
                "(is_ugly(\"ben\")  |  is_yellow(\"ben\"))",
                [
                    "all x ((is_funny(x)  ->  is_popular(x)) )",
                    "all x ((is_ugly(x)  ->   -is_popular(x)) )",
                    "all x ((loved_by_children(x)  ->  is_funny(x)) )",
                    "all x ((is_from_the_simpsons(x)  ->  loved_by_children(x)) )",
                    "all x ((is_yellow(x)  ->  is_from_the_simpsons(x)) )",
                    "(is_from_the_simpsons(\"ben\")  |  is_funny(\"ben\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nben ::: represents ben\nPredicates:\nis_funny(x) ::: x is funny.\nis_popular(x) ::: x is popular.\nis_ugly(x) ::: x is ugly.\nloved_by_children(x) ::: x is loved by children.\nis_from_the_simpsons(x) ::: x is from The Simpsons.\nis_yellow(x) ::: x is yellow.\nPremises:\n\u2200x (is_funny(x) \u2192 is_popular(x)) ::: If a cartoon character is funny, then it is popular.\n\u2200x (is_ugly(x) \u2192 \u00acis_popular(x)) ::: If a cartoon character is ugly, then it is not popular.\n\u2200x (loved_by_children(x) \u2192 is_funny(x)) ::: If a cartoon character is loved by children, then it is funny.\n\u2200x (is_from_the_simpsons(x) \u2192 loved_by_children(x)) ::: If a cartoon character is from The Simpsons, then it is loved by children.\n\u2200x (is_yellow(x) \u2192 is_from_the_simpsons(x)) ::: If a cartoon character is yellow, then it is from The Simpsons.\n(is_from_the_simpsons(\"ben\") \u2228 is_funny(\"ben\")) ::: Ben is either from The Simpsons or funny.\nQuery:\n(is_ugly(\"ben\") \u2228 is_yellow(\"ben\")) ::: Ben is ugly or yellow.",
            "problem": " If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBen is ugly or yellow."
        },
        {
            "example": 142,
            "response": [
                "(is_yellow(\"ben\")  &  is_ugly(\"ben\"))  |  ( -is_yellow(\"ben\")  &   -is_ugly(\"ben\"))",
                [
                    "all x ((is_funny(x)  ->  is_popular(x)) )",
                    "all x ((is_ugly(x)  ->   -is_popular(x)) )",
                    "all x ((is_loved_by_children(x)  ->  is_funny(x)) )",
                    "all x ((is_from_the_simpsons(x)  ->  is_loved_by_children(x)) )",
                    "all x ((is_yellow(x)  ->  is_from_the_simpsons(x)) )",
                    "(is_from_the_simpsons(\"ben\")  |  is_funny(\"ben\"))  &  ( -is_from_the_simpsons(\"ben\")  |   -is_funny(\"ben\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nben ::: represents ben\nPredicates:\nis_funny(x) ::: x is funny.\nis_popular(x) ::: x is popular.\nis_ugly(x) ::: x is ugly.\nis_loved_by_children(x) ::: x is loved by children.\nis_from_the_simpsons(x) ::: x is from The Simpsons.\nis_yellow(x) ::: x is yellow.\nPremises:\n\u2200x (is_funny(x) \u2192 is_popular(x)) ::: If a cartoon character is funny, then it is popular.\n\u2200x (is_ugly(x) \u2192 \u00acis_popular(x)) ::: If a cartoon character is ugly, then it is not popular.\n\u2200x (is_loved_by_children(x) \u2192 is_funny(x)) ::: If a cartoon character is loved by children, then it is funny.\n\u2200x (is_from_the_simpsons(x) \u2192 is_loved_by_children(x)) ::: If a cartoon character is from The Simpsons, then it is loved by children.\n\u2200x (is_yellow(x) \u2192 is_from_the_simpsons(x)) ::: If a cartoon character is yellow, then it is from The Simpsons.\n(is_from_the_simpsons(\"ben\") \u2228 is_funny(\"ben\")) \u2227 (\u00acis_from_the_simpsons(\"ben\") \u2228 \u00acis_funny(\"ben\")) ::: Ben is either from The Simpsons or funny.\nQuery:\n(is_yellow(\"ben\") \u2227 is_ugly(\"ben\")) \u2228 (\u00acis_yellow(\"ben\") \u2227 \u00acis_ugly(\"ben\")) ::: Ben is either yellow and ugly or neither yellow nor ugly.",
            "problem": " If a cartoon character is funny, then it is popular. If a cartoon character is ugly, then it is not popular. If a cartoon character is loved by children, then it is funny. If a cartoon character is from The Simpsons, then it is loved by children. If a cartoon character is yellow, then it is from The Simpsons. Ben is either from The Simpsons or funny.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBen is either yellow and ugly or neither yellow nor ugly."
        },
        {
            "example": 143,
            "response": [
                "exists x ((is_bred_back(x)  &  is_domestic_animal(x)))",
                [
                    "is_form_of(\"breeding_back\", \"artificial_selection\")  &  is_selective_breeding(\"breeding_back\")  &  is_deliberate(\"breeding_back\")  &  is_selective_breeding(\"breeding_back\")  &  is_domestic_animal(\"breeding_back\") ",
                    "is_bred_back(\"heck_cattle\")  &  resemble(\"heck_cattle\", \"aurochs\")  &  is_extinct(\"aurochs\")  &  is_extinct(\"heck_cattle\") ",
                    "is_animal(\"heck_cattle\") ",
                    "is_animal(\"aurochs\") ",
                    " exists x  exists y (is_animal(x)  &  is_bred_back(y)  &  resemble(x, y)  &  is_extinct(x)) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nheck_cattle ::: represents heck cattle\naurochs ::: represents aurochs\nPredicates:\nis_form_of(x, y) ::: x is a form of y.\nis_artificial_selection(x) ::: x is artificial selection.\nis_selective_breeding(x) ::: x is selective breeding.\nis_domestic_animal(x) ::: x is a domestic animal.\nis_bred_back(x) ::: x is bred-back.\nresemble(x, y) ::: x resembles y.\nis_extinct(x) ::: x is extinct.\nPremises:\nis_form_of(\"breeding back\", \"artificial selection\") \u2227 is_selective_breeding(\"breeding back\") \u2227 is_deliberate(\"breeding back\") \u2227 is_selective_breeding(\"breeding back\") \u2227 is_domestic_animal(\"breeding back\") ::: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nis_bred_back(\"heck_cattle\") \u2227 resemble(\"heck_cattle\", \"aurochs\") \u2227 is_extinct(\"aurochs\") \u2227 is_extinct(\"heck_cattle\") ::: Heck cattle were bred-back in the 1920s to resemble the aurochs.\nis_animal(\"heck_cattle\") ::: Heck cattle are animals.\nis_animal(\"aurochs\") ::: Aurochs are animals.\n\u2203x \u2203y (is_animal(x) \u2227 is_bred_back(y) \u2227 resemble(x, y) \u2227 is_extinct(x)) ::: Some animals to be bred-back resemble animals that are extinct.\nQuery:\n\u2203x (is_bred_back(x) \u2227 is_domestic_animal(x)) ::: Some Heck cattle are artificially selected.",
            "problem": " Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals. Heck cattle were bred-back in the 1920s to resemble the aurochs. [BG] Heck cattle are animals. [BG] Aurochs are animals. Some animals to be bred-back resemble animals that are extinct.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSome Heck cattle are artificially selected."
        },
        {
            "example": 144,
            "response": [
                "is_extinct(\"aurochs\")",
                [
                    "is_breeding_back(\"breeding_back\")  &  is_artificial_selection(\"breeding_back\")  &  is_deliberate_selective_breeding(\"breeding_back\")  &  is_domestic_animal(\"breeding_back\") ",
                    "is_bred_back(\"heck_cattle\")  &  resemble(\"heck_cattle\", \"aurochs\")  &  is_extinct(\"aurochs\")  &  is_extinct(\"heck_cattle\")  &  is_animal(\"heck_cattle\")  &  is_animal(\"aurochs\") ",
                    " exists x  exists y (is_animal(x)  &  is_bred_back(x)  &  resemble(x, y)  &  is_extinct(y)) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nheck_cattle ::: represents heck cattle\naurochs ::: represents aurochs\nPredicates:\nis_breeding_back(x) ::: x is breeding back.\nis_artificial_selection(x) ::: x is artificial selection.\nis_deliberate_selective_breeding(x) ::: x is deliberate selective breeding.\nis_domestic_animal(x) ::: x is a domestic animal.\nresemble(x, y) ::: x resembles y.\nis_extinct(x) ::: x is extinct.\nPremises:\nis_breeding_back(\"breeding back\") \u2227 is_artificial_selection(\"breeding back\") \u2227 is_deliberate_selective_breeding(\"breeding back\") \u2227 is_domestic_animal(\"breeding back\") ::: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nis_bred_back(\"heck_cattle\") \u2227 resemble(\"heck_cattle\", \"aurochs\") \u2227 is_extinct(\"aurochs\") \u2227 is_extinct(\"heck_cattle\") \u2227 is_animal(\"heck_cattle\") \u2227 is_animal(\"aurochs\") ::: Heck cattle were bred-back in the 1920s to resemble the aurochs. [BG] Heck cattle are animals. [BG] Aurochs are animals.\n\u2203x \u2203y (is_animal(x) \u2227 is_bred_back(x) \u2227 resemble(x, y) \u2227 is_extinct(y)) ::: Some animals to be bred-back resemble animals that are extinct.\nQuery:\nis_extinct(\"aurochs\") ::: Aurochs are extinct.",
            "problem": " Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals. Heck cattle were bred-back in the 1920s to resemble the aurochs. [BG] Heck cattle are animals. [BG] Aurochs are animals. Some animals to be bred-back resemble animals that are extinct.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nAurochs are extinct."
        },
        {
            "example": 145,
            "response": [
                "is_young(\"jerry\")",
                [
                    "all x ((is_student(x)  ->  is_human(x)) )",
                    "all x ((studies(x)  ->  is_student(x)) )",
                    "all x (((studies(x)  |  teaches(x))) )",
                    "all x ((is_young(x)  ->   -teaches(x)) )",
                    " -(teaches(\"jerry\")  |  is_manager(\"jerry\")) ",
                    "(is_young(\"rose\")  |  is_student(\"rose\")) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\njerry ::: represents jerry\nrose ::: represents rose\nPredicates:\nis_student(x) ::: x is a student.\nis_human(x) ::: x is a human.\nstudies(x) ::: x studies.\nteaches(x) ::: x teaches.\nis_young(x) ::: x is young.\nis_manager(x) ::: x is a manager.\nPremises:\n\u2200x (is_student(x) \u2192 is_human(x)) ::: All students are humans.\n\u2200x (studies(x) \u2192 is_student(x)) ::: If someone studies, then they are a student.\n\u2200x ((studies(x) \u2228 teaches(x))) ::: A person either studies or teaches.\n\u2200x (is_young(x) \u2192 \u00acteaches(x)) ::: No young person teaches.\n\u00ac(teaches(\"jerry\") \u2228 is_manager(\"jerry\")) ::: Jerry neither teaches nor is a manager.\n(is_young(\"rose\") \u2228 is_student(\"rose\")) ::: Rose is young or a student.\nQuery:\nis_young(\"jerry\") ::: Jerry is young.",
            "problem": " All students are humans.  If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJerry is young."
        },
        {
            "example": 146,
            "response": [
                " -is_young(\"jerry\")",
                [
                    "all x ((is_student(x)  ->  is_human(x)) )",
                    "all x ((studies(x)  ->  is_student(x)) )",
                    "all x (((studies(x)  |  teaches(x))) )",
                    "all x ((is_young(x)  ->   -teaches(x)) )",
                    " -(teaches(\"jerry\")  |  is_manager(\"jerry\")) ",
                    "(is_young(\"rose\")  |  is_student(\"rose\")) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\njerry ::: represents jerry\nrose ::: represents rose\nPredicates:\nis_student(x) ::: x is a student.\nis_human(x) ::: x is a human.\nstudies(x) ::: x studies.\nteaches(x) ::: x teaches.\nis_young(x) ::: x is young.\nis_manager(x) ::: x is a manager.\nPremises:\n\u2200x (is_student(x) \u2192 is_human(x)) ::: All students are humans.\n\u2200x (studies(x) \u2192 is_student(x)) ::: If someone studies, then they are a student.\n\u2200x ((studies(x) \u2228 teaches(x))) ::: A person either studies or teaches.\n\u2200x (is_young(x) \u2192 \u00acteaches(x)) ::: No young person teaches.\n\u00ac(teaches(\"jerry\") \u2228 is_manager(\"jerry\")) ::: Jerry neither teaches nor is a manager.\n(is_young(\"rose\") \u2228 is_student(\"rose\")) ::: Rose is young or a student.\nQuery:\n\u00acis_young(\"jerry\") ::: Jerry is not young.",
            "problem": " All students are humans.  If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJerry is not young."
        },
        {
            "example": 147,
            "response": [
                "(is_human(\"rose\")  |  is_manager(\"rose\"))",
                [
                    "all x ((is_student(x)  ->  is_human(x)) )",
                    "all x ((studies(x)  ->  is_student(x)) )",
                    "all x (((studies(x)  |  teaches(x))  &  ( -studies(x)  |   -teaches(x))) )",
                    "all x ((is_young(x)  ->   -teaches(x)) )",
                    " -(teaches(\"jerry\")  |  is_manager(\"jerry\"))  &   -(is_student(\"jerry\")  |  is_manager(\"jerry\")) ",
                    "(is_young(\"rose\")  |  is_student(\"rose\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\njerry ::: represents jerry\nrose ::: represents rose\nPredicates:\nis_student(x) ::: x is a student.\nis_human(x) ::: x is a human.\nstudies(x) ::: x studies.\nteaches(x) ::: x teaches.\nis_young(x) ::: x is young.\nis_manager(x) ::: x is a manager.\nPremises:\n\u2200x (is_student(x) \u2192 is_human(x)) ::: All students are humans.\n\u2200x (studies(x) \u2192 is_student(x)) ::: If someone studies, then they are a student.\n\u2200x ((studies(x) \u2228 teaches(x)) \u2227 (\u00acstudies(x) \u2228 \u00acteaches(x))) ::: A person either studies or teaches.\n\u2200x (is_young(x) \u2192 \u00acteaches(x)) ::: No young person teaches.\n\u00ac(teaches(\"jerry\") \u2228 is_manager(\"jerry\")) \u2227 \u00ac(is_student(\"jerry\") \u2228 is_manager(\"jerry\")) ::: Jerry neither teaches nor is a manager.\n(is_young(\"rose\") \u2228 is_student(\"rose\")) ::: Rose is young or a student.\nQuery:\n(is_human(\"rose\") \u2228 is_manager(\"rose\")) ::: Rose is a human or a manager.",
            "problem": " All students are humans.  If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRose is a human or a manager."
        },
        {
            "example": 148,
            "response": [
                "(is_human(\"rose\")  |  is_manager(\"jerry\"))",
                [
                    "all x ((is_student(x)  ->  is_human(x)) )",
                    "all x ((studies(x)  ->  is_student(x)) )",
                    "all x (((studies(x)  |  teaches(x))) )",
                    "all x ((is_young(x)  ->   -teaches(x)) )",
                    " -(teaches(\"jerry\")  |  is_manager(\"jerry\")) ",
                    "(is_young(\"rose\")  |  is_student(\"rose\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\njerry ::: represents jerry\nrose ::: represents rose\nPredicates:\nis_student(x) ::: x is a student.\nis_human(x) ::: x is a human.\nstudies(x) ::: x studies.\nteaches(x) ::: x teaches.\nis_young(x) ::: x is young.\nis_manager(x) ::: x is a manager.\nPremises:\n\u2200x (is_student(x) \u2192 is_human(x)) ::: All students are humans.\n\u2200x (studies(x) \u2192 is_student(x)) ::: If someone studies, then they are a student.\n\u2200x ((studies(x) \u2228 teaches(x))) ::: A person either studies or teaches.\n\u2200x (is_young(x) \u2192 \u00acteaches(x)) ::: No young person teaches.\n\u00ac(teaches(\"jerry\") \u2228 is_manager(\"jerry\")) ::: Jerry neither teaches nor is a manager.\n(is_young(\"rose\") \u2228 is_student(\"rose\")) ::: Rose is young or a student.\nQuery:\n(is_human(\"rose\") \u2228 is_manager(\"jerry\")) ::: Rose is a human or Jerry is a manager.",
            "problem": " All students are humans.  If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRose is a human or Jerry is a manager."
        },
        {
            "example": 149,
            "response": [
                " -(is_student(\"rose\")  &  is_human(\"jerry\"))",
                [
                    "all x ((is_student(x)  ->  is_human(x)) )",
                    "all x ((studies(x)  ->  is_student(x)) )",
                    "all x (((studies(x)  |  teaches(x))) )",
                    "all x ((is_young(x)  ->   -teaches(x)) )",
                    " -(teaches(\"jerry\")  |  is_manager(\"jerry\")) ",
                    "(is_young(\"rose\")  |  is_student(\"rose\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\njerry ::: represents jerry\nrose ::: represents rose\nPredicates:\nis_student(x) ::: x is a student.\nis_human(x) ::: x is a human.\nstudies(x) ::: x studies.\nteaches(x) ::: x teaches.\nis_young(x) ::: x is young.\nis_manager(x) ::: x is a manager.\nPremises:\n\u2200x (is_student(x) \u2192 is_human(x)) ::: All students are humans.\n\u2200x (studies(x) \u2192 is_student(x)) ::: If someone studies, then they are a student.\n\u2200x ((studies(x) \u2228 teaches(x))) ::: A person either studies or teaches.\n\u2200x (is_young(x) \u2192 \u00acteaches(x)) ::: No young person teaches.\n\u00ac(teaches(\"jerry\") \u2228 is_manager(\"jerry\")) ::: Jerry neither teaches nor is a manager.\n(is_young(\"rose\") \u2228 is_student(\"rose\")) ::: Rose is young or a student.\nQuery:\n\u00ac(is_student(\"rose\") \u2227 is_human(\"jerry\")) ::: It is not true that Rose is a student and Jerry is a human.",
            "problem": " All students are humans.  If someone studies, then they are a student. A person either studys or teaches. No young person teaches. Jerry neither teaches nor is a manager. Rose is young or a student.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIt is not true that Rose is a student and Jerry is a human."
        },
        {
            "example": 150,
            "response": [
                "is_in(\"neapolitan_chronicles\", \"english\")",
                [
                    "is_publishing_house(\"new_vessel_press\")  &  specializes_in(\"new_vessel_press\", \"translating_foreign_literature_into_English\") ",
                    "all x ((is_published_by(x, \"new_vessel_press\")  ->  is_in(x, \"english\")) )",
                    "is_published_by(\"neapolitan_chronicles\", \"new_vessel_press\") ",
                    "is_translating(\"neapolitan_chronicles\", \"italian\", \"english\") ",
                    "is_published_by(\"palace_of_flies\", \"new_vessel_press\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nnew_vessel_press ::: represents New Vessel Press\nneapolitan_chronicles ::: represents Neapolitan Chronicles\npalace_of_flies ::: represents Palace of Flies\nitalian ::: represents Italian\nenglish ::: represents English\nPredicates:\nis_publishing_house(x) ::: x is a publishing house.\nspecializes_in(x, y) ::: x specializes in y.\nis_translating(x, y, z) ::: x is translating y from z.\nis_published_by(x, y) ::: x is published by y.\nis_in(x, y) ::: x is in y.\nPremises:\nis_publishing_house(\"new_vessel_press\") \u2227 specializes_in(\"new_vessel_press\", \"translating foreign literature into English\") ::: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\n\u2200x (is_published_by(x, \"new_vessel_press\") \u2192 is_in(x, \"english\")) ::: All of New Vessel Press's published books are in English.\nis_published_by(\"neapolitan_chronicles\", \"new_vessel_press\") ::: Neapolitan Chronicles is a book published by New Vessel Press.\nis_translating(\"neapolitan_chronicles\", \"italian\", \"english\") ::: Neapolitan Chronicles was translated from Italian.\nis_published_by(\"palace_of_flies\", \"new_vessel_press\") ::: Palace of Flies is a book published by New Vessel Press.\nQuery:\nis_in(\"neapolitan_chronicles\", \"english\") ::: Neapolitan Chronicles is an English book.",
            "problem": " New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nNeapolitan Chronicles is an English book."
        },
        {
            "example": 151,
            "response": [
                "is_published_by(\"harry_potter\", \"new_vessel_press\")",
                [
                    "is_publishing_house(\"new_vessel_press\")  &  specializes_in(\"new_vessel_press\", \"translating_foreign_literature_into_English\") ",
                    "all x ((is_published_by(\"new_vessel_press\", x)  ->  is_in(x, \"english\")) )",
                    "is_book(\"neapolitan_chronicles\")  &  is_published_by(\"neapolitan_chronicles\", \"new_vessel_press\") ",
                    "is_translating(\"neapolitan_chronicles\", \"italian\", \"english\") ",
                    "is_book(\"palace_of_flies\")  &  is_published_by(\"palace_of_flies\", \"new_vessel_press\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nnew_vessel_press ::: represents New Vessel Press\nneapolitan_chronicles ::: represents Neapolitan Chronicles\npalace_of_flies ::: represents Palace of Flies\nharry_potter ::: represents Harry Potter\nitalian ::: represents Italian\nenglish ::: represents English\nPredicates:\nis_publishing_house(x) ::: x is a publishing house.\nspecializes_in(x, y) ::: x specializes in y.\nis_translating(x, y, z) ::: x is translating y from z.\nis_published_by(x, y) ::: x is published by y.\nis_in(x, y) ::: x is in y.\nPremises:\nis_publishing_house(\"new_vessel_press\") \u2227 specializes_in(\"new_vessel_press\", \"translating foreign literature into English\") ::: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\n\u2200x (is_published_by(\"new_vessel_press\", x) \u2192 is_in(x, \"english\")) ::: All of New Vessel Press's published books are in English.\nis_book(\"neapolitan_chronicles\") \u2227 is_published_by(\"neapolitan_chronicles\", \"new_vessel_press\") ::: Neapolitan Chronicles is a book published by New Vessel Press.\nis_translating(\"neapolitan_chronicles\", \"italian\", \"english\") ::: Neapolitan Chronicles was translated from Italian.\nis_book(\"palace_of_flies\") \u2227 is_published_by(\"palace_of_flies\", \"new_vessel_press\") ::: Palace of Flies is a book published by New Vessel Press.\nQuery:\nis_published_by(\"harry_potter\", \"new_vessel_press\") ::: Harry Potter was published by New Vessel Press.",
            "problem": " New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nHarry Potter was published by New Vessel Press."
        },
        {
            "example": 152,
            "response": [
                "is_translating(\"palace_of_flies\", \"italian\", \"english\")",
                [
                    "is_publishing_house(\"new_vessel_press\")  &  specializes_in(\"new_vessel_press\", \"translating_foreign_literature_into_English\") ",
                    "all x ((is_published_by(x, \"new_vessel_press\")  ->  is_in(x, \"english\")) )",
                    "is_book(\"neapolitan_chronicles\")  &  is_published_by(\"neapolitan_chronicles\", \"new_vessel_press\") ",
                    "is_translating(\"neapolitan_chronicles\", \"italian\", \"english\") ",
                    "is_book(\"palace_of_flies\")  &  is_published_by(\"palace_of_flies\", \"new_vessel_press\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nnew_vessel_press ::: represents New Vessel Press\nneapolitan_chronicles ::: represents Neapolitan Chronicles\npalace_of_flies ::: represents Palace of Flies\nitalian ::: represents Italian\nenglish ::: represents English\nPredicates:\nis_publishing_house(x) ::: x is a publishing house.\nspecializes_in(x, y) ::: x specializes in y.\nis_translating(x, y, z) ::: x is translating y from z.\nis_published_by(x, y) ::: x is published by y.\nis_in(x, y) ::: x is in y.\nis_book(x) ::: x is a book.\nPremises:\nis_publishing_house(\"new_vessel_press\") \u2227 specializes_in(\"new_vessel_press\", \"translating foreign literature into English\") ::: New Vessel Press is a publishing house which specializes in translating foreign literature into English.\n\u2200x (is_published_by(x, \"new_vessel_press\") \u2192 is_in(x, \"english\")) ::: All of New Vessel Press's published books are in English.\nis_book(\"neapolitan_chronicles\") \u2227 is_published_by(\"neapolitan_chronicles\", \"new_vessel_press\") ::: Neapolitan Chronicles is a book published by New Vessel Press.\nis_translating(\"neapolitan_chronicles\", \"italian\", \"english\") ::: Neapolitan Chronicles was translated from Italian.\nis_book(\"palace_of_flies\") \u2227 is_published_by(\"palace_of_flies\", \"new_vessel_press\") ::: Palace of Flies is a book published by New Vessel Press.\nQuery:\nis_translating(\"palace_of_flies\", \"italian\", \"english\") ::: Palace of Flies was translated from Italian.",
            "problem": " New Vessel Press is a publishing house which specializes in translating foreign literature into English. All of New Vessel Press's published books are in English. Neapolitan Chronicles is a book published by New Vessel Press. Neapolitan Chronicles was translated from Italian. Palace of Flies is a book published by New Vessel Press.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nPalace of Flies was translated from Italian."
        },
        {
            "example": 153,
            "response": [
                "visit_store(\"remy\")",
                [
                    "all x ((own_monitor(x)  ->  (work_regularly(x)  &  often(x))) )",
                    "all x ((have_home_office(x)  ->  own_monitor(x)) )",
                    "all x ((work_regularly(x)  &  often(x)  ->  spend_free_time(x)) )",
                    "all x ((work_regularly(x)  &  often(x)  ->  visit_store(x)) )",
                    "all x ((spend_free_time(x)  ->  ( -go_to_bed_late(x)  &   -wake_up_late(x))) )",
                    "(go_to_bed_late(\"remy\")  &  wake_up_late(\"remy\")  &  spend_free_time(\"remy\"))  |  ( -go_to_bed_late(\"remy\")  &   -wake_up_late(\"remy\")  &   -spend_free_time(\"remy\")) "
                ]
            ],
            "label": "Uncertain",
            "text": "###\nConstants:\nremy ::: represents remy\nPredicates:\nown_monitor(x) ::: x owns a large desktop monitor at their home.\nwork_regularly(x) ::: x works regularly and often at home.\nhave_home_office(x) ::: x has a fully stocked and impressive home office.\nspend_free_time(x) ::: x spends their free time tidying and organizing the spaces in their home.\nvisit_store(x) ::: x visits the office supply store regularly.\ngo_to_bed_late(x) ::: x goes to bed late.\nwake_up_late(x) ::: x wakes up every day after noon.\nPremises:\n\u2200x (own_monitor(x) \u2192 (work_regularly(x) \u2227 often(x))) ::: If people own a large desktop monitor at their home, then they work regularly and often at home.\n\u2200x (have_home_office(x) \u2192 own_monitor(x)) ::: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\n\u2200x (work_regularly(x) \u2227 often(x) \u2192 spend_free_time(x)) ::: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\n\u2200x (work_regularly(x) \u2227 often(x) \u2192 visit_store(x)) ::: All people who work regularly and often at home visit the office supply store regularly.\n\u2200x (spend_free_time(x) \u2192 (\u00acgo_to_bed_late(x) \u2227 \u00acwake_up_late(x))) ::: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\n(go_to_bed_late(\"remy\") \u2227 wake_up_late(\"remy\") \u2227 spend_free_time(\"remy\")) \u2228 (\u00acgo_to_bed_late(\"remy\") \u2227 \u00acwake_up_late(\"remy\") \u2227 \u00acspend_free_time(\"remy\")) ::: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nQuery:\nvisit_store(\"remy\") ::: Remy visits the office supply store regularly.\n---",
            "problem": " If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.  Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRemy visits the office supply store regularly."
        },
        {
            "example": 154,
            "response": [
                "have_home_office(\"remy\")  &  visit_store(\"remy\")",
                [
                    "all x ((own_monitor(x)  ->  (work_regularly(x)  &  often(x))) )",
                    "all x ((have_home_office(x)  ->  own_monitor(x)) )",
                    "all x ((work_regularly(x)  &  often(x)  ->  spend_free_time(x)) )",
                    "all x ((work_regularly(x)  &  often(x)  ->  visit_store(x)) )",
                    "all x ((spend_free_time(x)  ->  ( -go_to_bed_late(x)  &   -wake_up_late(x))) )",
                    "(go_to_bed_late(\"remy\")  &  wake_up_late(\"remy\")  &  spend_free_time(\"remy\"))  |  ( -go_to_bed_late(\"remy\")  &   -wake_up_late(\"remy\")  &   -spend_free_time(\"remy\")) "
                ]
            ],
            "label": "False",
            "text": "###\nConstants:\nremy ::: represents remy\nPredicates:\nown_monitor(x) ::: x owns a large desktop monitor at their home.\nwork_regularly(x) ::: x works regularly and often at home.\nhave_home_office(x) ::: x has a fully stocked and impressive home office.\nspend_free_time(x) ::: x spends their free time tidying and organizing the spaces in their home.\nvisit_store(x) ::: x visits the office supply store regularly.\ngo_to_bed_late(x) ::: x goes to bed late.\nwake_up_late(x) ::: x wakes up every day after noon.\nPremises:\n\u2200x (own_monitor(x) \u2192 (work_regularly(x) \u2227 often(x))) ::: If people own a large desktop monitor at their home, then they work regularly and often at home.\n\u2200x (have_home_office(x) \u2192 own_monitor(x)) ::: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\n\u2200x (work_regularly(x) \u2227 often(x) \u2192 spend_free_time(x)) ::: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\n\u2200x (work_regularly(x) \u2227 often(x) \u2192 visit_store(x)) ::: All people who work regularly and often at home visit the office supply store regularly.\n\u2200x (spend_free_time(x) \u2192 (\u00acgo_to_bed_late(x) \u2227 \u00acwake_up_late(x))) ::: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\n(go_to_bed_late(\"remy\") \u2227 wake_up_late(\"remy\") \u2227 spend_free_time(\"remy\")) \u2228 (\u00acgo_to_bed_late(\"remy\") \u2227 \u00acwake_up_late(\"remy\") \u2227 \u00acspend_free_time(\"remy\")) ::: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nQuery:\nhave_home_office(\"remy\") \u2227 visit_store(\"remy\") ::: Remy has a fully stocked and impressive home office and also visits the office supply store regularly.\n---",
            "problem": " If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.  Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nRemy has a fully stocked and impressive home office and also visits the office supply store regularly."
        },
        {
            "example": 155,
            "response": [
                "((go_to_bed_late(\"remy\")  &  wake_up_late(\"remy\"))  |  visit_store(\"remy\"))  ->  ( -spend_free_time(\"remy\")  &   -have_home_office(\"remy\"))",
                [
                    "all x ((own_monitor(x)  ->  (work_regularly(x)  &  often(x))) )",
                    "all x ((have_home_office(x)  ->  own_monitor(x)) )",
                    "all x ((work_regularly(x)  &  often(x)  ->  spend_free_time(x)) )",
                    "all x ((work_regularly(x)  &  often(x)  ->  visit_store(x)) )",
                    "all x ((spend_free_time(x)  ->  ( -go_to_bed_late(x)  &   -wake_up_late(x))) )",
                    "((go_to_bed_late(\"remy\")  &  wake_up_late(\"remy\")  &  spend_free_time(\"remy\"))  |  ( -go_to_bed_late(\"remy\")  &   -wake_up_late(\"remy\")  &   -spend_free_time(\"remy\"))) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nremy ::: represents remy\nPredicates:\nown_monitor(x) ::: x owns a large desktop monitor at their home.\nwork_regularly(x) ::: x works regularly and often at home.\nhave_home_office(x) ::: x has a fully stocked and impressive home office.\nspend_free_time(x) ::: x spends their free time tidying and organizing the spaces in their home.\nvisit_store(x) ::: x visits the office supply store regularly.\ngo_to_bed_late(x) ::: x goes to bed late.\nwake_up_late(x) ::: x wakes up every day after noon.\nPremises:\n\u2200x (own_monitor(x) \u2192 (work_regularly(x) \u2227 often(x))) ::: If people own a large desktop monitor at their home, then they work regularly and often at home.\n\u2200x (have_home_office(x) \u2192 own_monitor(x)) ::: All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.\n\u2200x (work_regularly(x) \u2227 often(x) \u2192 spend_free_time(x)) ::: All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.\n\u2200x (work_regularly(x) \u2227 often(x) \u2192 visit_store(x)) ::: All people who work regularly and often at home visit the office supply store regularly.\n\u2200x (spend_free_time(x) \u2192 (\u00acgo_to_bed_late(x) \u2227 \u00acwake_up_late(x))) ::: If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.\n((go_to_bed_late(\"remy\") \u2227 wake_up_late(\"remy\") \u2227 spend_free_time(\"remy\")) \u2228 (\u00acgo_to_bed_late(\"remy\") \u2227 \u00acwake_up_late(\"remy\") \u2227 \u00acspend_free_time(\"remy\"))) ::: Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home.\nQuery:\n((go_to_bed_late(\"remy\") \u2227 wake_up_late(\"remy\")) \u2228 visit_store(\"remy\")) \u2192 (\u00acspend_free_time(\"remy\") \u2227 \u00achave_home_office(\"remy\")) ::: If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.",
            "problem": " If people own a large desktop monitor at their home, then they work regularly and often at home. All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home. All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes. All people who work regularly and often at home visit the office supply store regularly. If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon.  Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office."
        },
        {
            "example": 156,
            "response": [
                "exists x ((is_greek(x)  &  is_mortal(x)))",
                [
                    "all x ((is_human(x)  ->  is_mortal(x)) )",
                    "all x ((is_greek(x)  ->  is_human(x)) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nhumans ::: represents humans\ngreeks ::: represents greeks\nPredicates:\nis_mortal(x) ::: x is mortal.\nis_human(x) ::: x is human.\nis_greek(x) ::: x is greek.\nPremises:\n\u2200x (is_human(x) \u2192 is_mortal(x)) ::: All humans are mortal.\n\u2200x (is_greek(x) \u2192 is_human(x)) ::: All Greeks are humans.\nQuery:\n\u2203x (is_greek(x) \u2227 is_mortal(x)) ::: Some Greeks are mortal.",
            "problem": " All humans are mortal. All Greeks are humans.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSome Greeks are mortal."
        },
        {
            "example": 157,
            "response": [
                "have_part_time_job(\"james\")",
                [
                    "all x ((work_in_library(x)  ->   -is_from(x, \"computer_science_department\")) )",
                    "all x (((have_part_time_job(x)  &  offered_by_university(x))  ->  work_in_library(x)) )",
                    "all x ((take_course(x, \"database_course\")  ->  is_from(x, \"computer_science_department\")) )",
                    "all x ((instructed_by(x, \"professor_david\")  ->  take_course(x, \"database_course\")) )",
                    "all x ((working_in_lab(x)  ->  instructed_by(x, \"professor_david\")) )",
                    "working_in_lab(\"james\") ",
                    " -(have_part_time_job(\"jack\")  &  offered_by_university(\"jack\"))  &   -work_in_library(\"jack\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\njames ::: represents james\njack ::: represents jack\nprofessor_david ::: represents professor david\nPredicates:\nwork_in_library(x) ::: x works in the library.\nis_from(x, y) ::: x is from y.\nhave_part_time_job(x) ::: x has a part-time job.\noffered_by_university(x) ::: x is offered by the university.\ntake_course(x, y) ::: x takes course y.\ninstructed_by(x, y) ::: x is instructed by y.\nworking_in_lab(x) ::: x is working in the lab.\nPremises:\n\u2200x (work_in_library(x) \u2192 \u00acis_from(x, \"computer_science_department\")) ::: No students who work in the library are from the computer science department.\n\u2200x ((have_part_time_job(x) \u2227 offered_by_university(x)) \u2192 work_in_library(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n\u2200x (take_course(x, \"database_course\") \u2192 is_from(x, \"computer_science_department\")) ::: All students who take the database course are from the computer science department.\n\u2200x (instructed_by(x, \"professor_david\") \u2192 take_course(x, \"database_course\")) ::: All students instructed by professor David are taking the database course.\n\u2200x (working_in_lab(x) \u2192 instructed_by(x, \"professor_david\")) ::: All students working in the lab are instructed by professor David.\nworking_in_lab(\"james\") ::: James is a student working in the lab.\n\u00ac(have_part_time_job(\"jack\") \u2227 offered_by_university(\"jack\")) \u2227 \u00acwork_in_library(\"jack\") ::: Jack neither has a part-time job offered by the university nor works in the lab.\nQuery:\nhave_part_time_job(\"james\") ::: James has a part-time job offered by the university.",
            "problem": " No students who work in the library are from the computer science department.  All students who have part-time jobs offered by the university are students who work in the library.  All students who take the database course are from the computer science department.  All students instructed by professor David are taking the database course.  All students working in the lab are instructed by professor David.  James is a student working in the lab.  Jack neither has a part-time job offered by the university nor works in the lab. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJames has a part-time job offered by the university."
        },
        {
            "example": 158,
            "response": [
                " -have_part_time_job(\"james\")",
                [
                    "all x ((work_in_library(x)  ->   -is_from(x, \"computer_science_department\")) )",
                    "all x (((have_part_time_job(x)  &  offered_by_university(x))  ->  work_in_library(x)) )",
                    "all x ((take_course(x, \"database_course\")  ->  is_from(x, \"computer_science_department\")) )",
                    "all x ((instructed_by(x, \"david\")  ->  take_course(x, \"database_course\")) )",
                    "all x ((working_in_lab(x)  ->  instructed_by(x, \"david\")) )",
                    "working_in_lab(\"james\") ",
                    " -(have_part_time_job(\"jack\")  &  offered_by_university(\"jack\"))  &   -working_in_lab(\"jack\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\njames ::: represents james\njack ::: represents jack\ndavid ::: represents david\nPredicates:\nwork_in_library(x) ::: x works in the library.\nis_from(x, y) ::: x is from y.\nhave_part_time_job(x) ::: x has a part-time job.\noffered_by_university(x) ::: x is offered by the university.\ntake_course(x, y) ::: x takes course y.\ninstructed_by(x, y) ::: x is instructed by y.\nworking_in_lab(x) ::: x is working in the lab.\nPremises:\n\u2200x (work_in_library(x) \u2192 \u00acis_from(x, \"computer_science_department\")) ::: No students who work in the library are from the computer science department.\n\u2200x ((have_part_time_job(x) \u2227 offered_by_university(x)) \u2192 work_in_library(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n\u2200x (take_course(x, \"database_course\") \u2192 is_from(x, \"computer_science_department\")) ::: All students who take the database course are from the computer science department.\n\u2200x (instructed_by(x, \"david\") \u2192 take_course(x, \"database_course\")) ::: All students instructed by professor David are taking the database course.\n\u2200x (working_in_lab(x) \u2192 instructed_by(x, \"david\")) ::: All students working in the lab are instructed by professor David.\nworking_in_lab(\"james\") ::: James is a student working in the lab.\n\u00ac(have_part_time_job(\"jack\") \u2227 offered_by_university(\"jack\")) \u2227 \u00acworking_in_lab(\"jack\") ::: Jack neither has a part-time job offered by the university nor works in the lab.\nQuery:\n\u00achave_part_time_job(\"james\") ::: James does not have a part-time job offered by the university.",
            "problem": " No students who work in the library are from the computer science department.  All students who have part-time jobs offered by the university are students who work in the library.  All students who take the database course are from the computer science department.  All students instructed by professor David are taking the database course.  All students working in the lab are instructed by professor David.  James is a student working in the lab.  Jack neither has a part-time job offered by the university nor works in the lab. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJames does not have a part-time job offered by the university."
        },
        {
            "example": 159,
            "response": [
                "(take_course(\"james\", \"database_course\"))  |  (have_part_time_job(\"james\"))",
                [
                    "all x ((work_in_library(x)  ->   -is_from(x, \"computer_science_department\")) )",
                    "all x (((have_part_time_job(x)  &   -work_in_library(x))  ->  have_part_time_job(x)) )",
                    "all x (((take_course(x, \"database_course\")  ->  is_from(x, \"computer_science_department\"))) )",
                    "all x ((instructed_by(x, \"david\")  ->  take_course(x, \"database_course\")) )",
                    "all x ((work_in_lab(x)  ->  instructed_by(x, \"david\")) )",
                    "work_in_lab(\"james\")  &  is_student(\"james\") ",
                    " -(have_part_time_job(\"jack\")  |  work_in_lab(\"jack\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\njames ::: represents james\njack ::: represents jack\ndavid ::: represents david\nPredicates:\nwork_in_library(x) ::: x works in the library.\nis_from(x, y) ::: x is from y.\nhave_part_time_job(x) ::: x has a part-time job.\ntake_course(x, y) ::: x takes course y.\ninstructed_by(x, y) ::: x is instructed by y.\nwork_in_lab(x) ::: x works in the lab.\nPremises:\n\u2200x (work_in_library(x) \u2192 \u00acis_from(x, \"computer_science_department\")) ::: No students who work in the library are from the computer science department.\n\u2200x ((have_part_time_job(x) \u2227 \u00acwork_in_library(x)) \u2192 have_part_time_job(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n\u2200x ((take_course(x, \"database_course\") \u2192 is_from(x, \"computer_science_department\"))) ::: All students who take the database course are from the computer science department.\n\u2200x (instructed_by(x, \"david\") \u2192 take_course(x, \"database_course\")) ::: All students instructed by professor David are taking the database course.\n\u2200x (work_in_lab(x) \u2192 instructed_by(x, \"david\")) ::: All students working in the lab are instructed by professor David.\nwork_in_lab(\"james\") \u2227 is_student(\"james\") ::: James is a student working in the lab.\n\u00ac(have_part_time_job(\"jack\") \u2228 work_in_lab(\"jack\")) ::: Jack neither has a part-time job offered by the university nor works in the lab.\nQuery:\n(take_course(\"james\", \"database_course\")) \u2228 (have_part_time_job(\"james\")) ::: James either takes the database course or has a part-time job offered by the university.",
            "problem": " No students who work in the library are from the computer science department.  All students who have part-time jobs offered by the university are students who work in the library.  All students who take the database course are from the computer science department.  All students instructed by professor David are taking the database course.  All students working in the lab are instructed by professor David.  James is a student working in the lab.  Jack neither has a part-time job offered by the university nor works in the lab. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJames either takes the database course or has a part-time job offered by the university."
        },
        {
            "example": 160,
            "response": [
                "take_course(\"jack\", \"database_course\")",
                [
                    "all x ((work_in_library(x)  ->   -from_department(x, \"computer_science\")) )",
                    "all x (((have_part_time_job(x)  &  offered_by_university(x))  ->  work_in_library(x)) )",
                    "all x ((take_course(x, \"database_course\")  ->  from_department(x, \"computer_science\")) )",
                    "all x ((instructed_by(x, \"david\")  ->  take_course(x, \"database_course\")) )",
                    "all x ((work_in_lab(x)  ->  instructed_by(x, \"david\")) )",
                    "work_in_lab(\"james\") ",
                    " -(have_part_time_job(\"jack\")  &  offered_by_university(\"jack\"))  &   -work_in_lab(\"jack\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\njames ::: represents james\njack ::: represents jack\ndavid ::: represents david\nPredicates:\nwork_in_library(x) ::: x works in the library.\nfrom_department(x, y) ::: x is from department y.\nhave_part_time_job(x) ::: x has a part-time job.\noffered_by_university(x) ::: x is offered by the university.\ntake_course(x, y) ::: x takes course y.\ninstructed_by(x, y) ::: x is instructed by y.\nwork_in_lab(x) ::: x works in the lab.\nPremises:\n\u2200x (work_in_library(x) \u2192 \u00acfrom_department(x, \"computer_science\")) ::: No students who work in the library are from the computer science department.\n\u2200x ((have_part_time_job(x) \u2227 offered_by_university(x)) \u2192 work_in_library(x)) ::: All students who have part-time jobs offered by the university are students who work in the library.\n\u2200x (take_course(x, \"database_course\") \u2192 from_department(x, \"computer_science\")) ::: All students who take the database course are from the computer science department.\n\u2200x (instructed_by(x, \"david\") \u2192 take_course(x, \"database_course\")) ::: All students instructed by professor David are taking the database course.\n\u2200x (work_in_lab(x) \u2192 instructed_by(x, \"david\")) ::: All students working in the lab are instructed by professor David.\nwork_in_lab(\"james\") ::: James is a student working in the lab.\n\u00ac(have_part_time_job(\"jack\") \u2227 offered_by_university(\"jack\")) \u2227 \u00acwork_in_lab(\"jack\") ::: Jack neither has a part-time job offered by the university nor works in the lab.\nQuery:\ntake_course(\"jack\", \"database_course\") ::: Jack takes the database course.",
            "problem": " No students who work in the library are from the computer science department.  All students who have part-time jobs offered by the university are students who work in the library.  All students who take the database course are from the computer science department.  All students instructed by professor David are taking the database course.  All students working in the lab are instructed by professor David.  James is a student working in the lab.  Jack neither has a part-time job offered by the university nor works in the lab. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJack takes the database course."
        },
        {
            "example": 161,
            "response": [
                "(likes(\"george\", \"music\")  &  has_access_to(\"george\", \"program\"))  ->  will_compose(\"george\")",
                [
                    "(likes(\"george\", \"music\")  ->  wants_to_compose(\"george\")) ",
                    "(has_access_to(\"george\", \"program\")  ->  can_compose(\"george\")) ",
                    "(can_compose(\"george\")  &  wants_to_compose(\"george\")  ->  will_compose(\"george\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\ngeorge ::: represents george\nPredicates:\nlikes(x, y) ::: x likes y.\nwants_to_compose(x) ::: x wants to compose.\nhas_access_to(x, y) ::: x has access to y.\ncan_compose(x) ::: x can compose.\nwill_compose(x) ::: x will compose.\nPremises:\n(likes(\"george\", \"music\") \u2192 wants_to_compose(\"george\")) ::: If George likes music, he wants to compose.\n(has_access_to(\"george\", \"program\") \u2192 can_compose(\"george\")) ::: If George has access to a program, he can compose.\n(can_compose(\"george\") \u2227 wants_to_compose(\"george\") \u2192 will_compose(\"george\")) ::: If George can compose and wants to compose, he will compose.\nQuery:\n(likes(\"george\", \"music\") \u2227 has_access_to(\"george\", \"program\")) \u2192 will_compose(\"george\") ::: If George likes music and has access to a program, he will compose.",
            "problem": " If George likes music, he wants to compose. If George has access to a program, he can compose. If George can compose and wants to compose, he will compose.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf George likes music and has access to a program, he will compose."
        },
        {
            "example": 162,
            "response": [
                " -will_compose(\"george\")  ->   -can_compose(\"george\")",
                [
                    "(likes(\"george\", \"music\")  ->  wants_to_compose(\"george\")) ",
                    "(has_access_to(\"george\", \"program\")  ->  can_compose(\"george\")) ",
                    "(can_compose(\"george\")  &  wants_to_compose(\"george\")  ->  will_compose(\"george\")) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\ngeorge ::: represents george\nPredicates:\nlikes(x, y) ::: x likes y.\nwants_to_compose(x) ::: x wants to compose.\nhas_access_to(x, y) ::: x has access to y.\ncan_compose(x) ::: x can compose.\nwill_compose(x) ::: x will compose.\nPremises:\n(likes(\"george\", \"music\") \u2192 wants_to_compose(\"george\")) ::: If George likes music, he wants to compose.\n(has_access_to(\"george\", \"program\") \u2192 can_compose(\"george\")) ::: If George has access to a program, he can compose.\n(can_compose(\"george\") \u2227 wants_to_compose(\"george\") \u2192 will_compose(\"george\")) ::: If George can compose and wants to compose, he will compose.\nQuery:\n\u00acwill_compose(\"george\") \u2192 \u00accan_compose(\"george\") ::: If George will not compose, George can not compose.",
            "problem": " If George likes music, he wants to compose. If George has access to a program, he can compose. If George can compose and wants to compose, he will compose.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf George will not compose, George can not compose."
        },
        {
            "example": 163,
            "response": [
                "all x ((is_bird(x)  ->   -never_lands(x)))",
                [
                    "all x ((is_hawk(x)  ->  never_lands(x)) )",
                    "exists x ((is_bird(x)  &  is_hawk(x)) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\nhawk ::: represents a hawk\nPredicates:\nnever_lands(x) ::: x never lands.\nis_bird(x) ::: x is a bird.\nis_hawk(x) ::: x is a hawk.\nPremises:\n\u2200x (is_hawk(x) \u2192 never_lands(x)) ::: A hawk never lands.\n\u2203x (is_bird(x) \u2227 is_hawk(x)) ::: Some birds are hawks.\nQuery:\n\u2200x (is_bird(x) \u2192 \u00acnever_lands(x)) ::: All birds land.",
            "problem": " A hawk never lands.  Some birds are hawks.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nAll birds land"
        },
        {
            "example": 164,
            "response": [
                "given_out(\"breaking_bad\", \"tv\", \"monday_8pm\")",
                [
                    " exists x  exists y (given_out(roses, \"tv\", \"monday_8pm\")) ",
                    "all x ((on_tv(x)  ->  on_tv(x, \"the_bachelor\")) )",
                    "all x ((portrays(x, \"real_people\")  ->  portrays(x, \"real_people\")) )",
                    "all x ((portrays(x, \"real_people\")  ->  is_reality_tv_show(x)) )",
                    " -is_reality_tv_show(\"breaking_bad\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nroses ::: represents roses\ntv ::: represents TV\nthe_bachelor ::: represents the Bachelor\nbreaking_bad ::: represents Breaking Bad\nPredicates:\ngiven_out(x, y, z) ::: x is given out on y at z.\non_tv(x) ::: x is on TV.\nportrays(x, y) ::: x portrays the lives of y.\nis_reality_tv_show(x) ::: x is a reality TV show.\nPremises:\n\u2203x \u2203y (given_out(roses, \"tv\", \"monday_8pm\")) ::: On some Mondays at 8 pm, roses are given out on TV.\n\u2200x (on_tv(x) \u2192 on_tv(x, \"the_bachelor\")) ::: Every rose given out on TV is on the Bachelor.\n\u2200x (portrays(x, \"real_people\") \u2192 portrays(x, \"real_people\")) ::: Everything on the Bachelor portrays the lives of real people.\n\u2200x (portrays(x, \"real_people\") \u2192 is_reality_tv_show(x)) ::: All shows portraying the lives of real people are reality TV shows.\n\u00acis_reality_tv_show(\"breaking_bad\") ::: Breaking Bad is not a reality TV show.\nQuery:\ngiven_out(\"breaking_bad\", \"tv\", \"monday_8pm\") ::: Breaking Bad is on Monday at 8 pm.",
            "problem": " On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBreaking Bad is on Monday at 8 pm."
        },
        {
            "example": 165,
            "response": [
                " exists x  exists y (is_on(\"breaking_bad\", y)  &  given_out_on(\"roses\", y, \"monday_8pm\"))",
                [
                    " exists x  exists y (given_out_on(\"roses\", \"tv\", \"monday_8pm\")) ",
                    "all x ((given_out_on(x, \"tv\", \"the_bachelor\")) )",
                    "all x ((is_on(x, \"the_bachelor\")  ->  portrays(x, \"real_people\")) )",
                    "all x ((portrays(x, \"real_people\")  ->  is_reality_tv_show(x)) )",
                    " -is_reality_tv_show(\"breaking_bad\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nroses ::: represents roses\ntv ::: represents TV\nmonday_8pm ::: represents Monday at 8 pm\nthe_bachelor ::: represents The Bachelor\nbreaking_bad ::: represents Breaking Bad\nPredicates:\ngiven_out_on(x, y, z) ::: x is given out on y at z.\nis_on(x, y) ::: x is on y.\nportrays(x, y) ::: x portrays the lives of y.\nis_reality_tv_show(x) ::: x is a reality TV show.\nPremises:\n\u2203x \u2203y (given_out_on(\"roses\", \"tv\", \"monday_8pm\")) ::: On some Mondays at 8 pm, roses are given out on TV.\n\u2200x (given_out_on(x, \"tv\", \"the_bachelor\")) ::: Every rose given out on TV is on the Bachelor.\n\u2200x (is_on(x, \"the_bachelor\") \u2192 portrays(x, \"real_people\")) ::: Everything on the Bachelor portrays the lives of real people.\n\u2200x (portrays(x, \"real_people\") \u2192 is_reality_tv_show(x)) ::: All shows portraying the lives of real people are reality TV shows.\n\u00acis_reality_tv_show(\"breaking_bad\") ::: Breaking Bad is not a reality TV show.\nQuery:\n\u2203x \u2203y (is_on(\"breaking_bad\", y) \u2227 given_out_on(\"roses\", y, \"monday_8pm\")) ::: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
            "problem": " On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm."
        },
        {
            "example": 166,
            "response": [
                "given_out(\"roses\", \"breaking_bad\")  ->  on_tv(\"tv\")  &  on_tv(\"monday_8pm\")",
                [
                    " exists x  exists y (given_out(\"roses\", \"monday_8pm\")  &  on_tv(\"tv\")) ",
                    "all x ((given_out(x, \"tv\")  ->  on_tv(\"the_bachelor\")) )",
                    "all x ((portrays(x, \"real_people\")) )",
                    "all x ((portrays(x, \"real_people\")  ->  is_reality_tv_show(x)) )",
                    " -is_reality_tv_show(\"breaking_bad\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nroses ::: represents roses\ntv ::: represents TV\nmonday_8pm ::: represents Monday at 8 pm\nthe_bachelor ::: represents The Bachelor\nbreaking_bad ::: represents Breaking Bad\nPredicates:\ngiven_out(x, y) ::: x is given out on y.\non_tv(x) ::: x is on TV.\nportrays(x, y) ::: x portrays the lives of y.\nis_reality_tv_show(x) ::: x is a reality TV show.\nPremises:\n\u2203x \u2203y (given_out(\"roses\", \"monday_8pm\") \u2227 on_tv(\"tv\")) ::: On some Mondays at 8 pm, roses are given out on TV.\n\u2200x (given_out(x, \"tv\") \u2192 on_tv(\"the_bachelor\")) ::: Every rose given out on TV is on the Bachelor.\n\u2200x (portrays(x, \"real_people\")) ::: Everything on the Bachelor portrays the lives of real people.\n\u2200x (portrays(x, \"real_people\") \u2192 is_reality_tv_show(x)) ::: All shows portraying the lives of real people are reality TV shows.\n\u00acis_reality_tv_show(\"breaking_bad\") ::: Breaking Bad is not a reality TV show.\nQuery:\ngiven_out(\"roses\", \"breaking_bad\") \u2192 on_tv(\"tv\") \u2227 on_tv(\"monday_8pm\") ::: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
            "problem": " On some Mondays at 8 pm, roses are given out on TV. Every rose given out on TV is on the Bachelor. Everything on the Bachelor portrays the lives of real people. All shows portraying the lives of real people are reality TV shows. Breaking Bad is not a reality TV show.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm."
        },
        {
            "example": 167,
            "response": [
                "(is_german(\"heinrich_schmidt\")  |  is_russian(\"heinrich_schmidt\"))",
                [
                    "is_politician(\"heinrich_schmidt\")  &  is_member_of(\"heinrich_schmidt\", \"nazi_german\")  &  is_member_of(\"heinrich_schmidt\", \"prussian_state_parliament\")  &  is_member_of(\"heinrich_schmidt\", \"nazi_reichstag\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nheinrich_schmidt ::: represents heinrich schmidt\nnazi_german ::: represents nazi german\nprussian_state_parliament ::: represents the prussian state parliament\nnazi_reichstag ::: represents the nazi reichstag\nPredicates:\nis_politician(x) ::: x is a politician.\nis_member_of(x, y) ::: x is a member of y.\nPremises:\nis_politician(\"heinrich_schmidt\") \u2227 is_member_of(\"heinrich_schmidt\", \"nazi_german\") \u2227 is_member_of(\"heinrich_schmidt\", \"prussian_state_parliament\") \u2227 is_member_of(\"heinrich_schmidt\", \"nazi_reichstag\") ::: Heinrich Scmidt was a Nazi German politician. Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nQuery:\n(is_german(\"heinrich_schmidt\") \u2228 is_russian(\"heinrich_schmidt\")) ::: Heinrich Schmidt was either German or Russian.",
            "problem": " Heinrich Scmidt was a Nazi German politician.  Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nHeinrich Schmidt was either German or Russian."
        },
        {
            "example": 168,
            "response": [
                "exists x ((is_politician(x)  &  is_member_of(x, \"prussian_state_parliament\")  &  is_member_of(x, \"nazi_reichstag\")))",
                [
                    "is_politician(\"heinrich_schmidt\")  &  is_member_of(\"heinrich_schmidt\", \"nazi_german\") ",
                    "is_member_of(\"heinrich_schmidt\", \"prussian_state_parliament\")  &  is_member_of(\"heinrich_schmidt\", \"nazi_reichstag\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nheinrich_schmidt ::: represents heinrich schmidt\nnazi_german ::: represents nazi german\nprussian_state_parliament ::: represents the prussian state parliament\nnazi_reichstag ::: represents the nazi reichstag\nPredicates:\nis_politician(x) ::: x is a politician.\nis_member_of(x, y) ::: x is a member of y.\nPremises:\nis_politician(\"heinrich_schmidt\") \u2227 is_member_of(\"heinrich_schmidt\", \"nazi_german\") ::: Heinrich Scmidt was a Nazi German politician.\nis_member_of(\"heinrich_schmidt\", \"prussian_state_parliament\") \u2227 is_member_of(\"heinrich_schmidt\", \"nazi_reichstag\") ::: Heinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nQuery:\n\u2203x (is_politician(x) \u2227 is_member_of(x, \"prussian_state_parliament\") \u2227 is_member_of(x, \"nazi_reichstag\")) ::: Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
            "problem": " Heinrich Scmidt was a Nazi German politician.  Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSome Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag."
        },
        {
            "example": 169,
            "response": [
                "all x ((is_politician(x)  ->   -is_member_of(x, \"nazi_reichstag\")))",
                [
                    "is_politician(\"heinrich_schmidt\") ",
                    "is_member_of(\"heinrich_schmidt\", \"prussian_state_parliament\")  &  is_member_of(\"heinrich_schmidt\", \"nazi_reichstag\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nheinrich_schmidt ::: represents Heinrich Schmidt\nnazi_german ::: represents Nazi German\nprussian_state_parliament ::: represents the Prussian State Parliament\nnazi_reichstag ::: represents the Nazi Reichstag\nPredicates:\nis_politician(x) ::: x is a politician.\nis_member_of(x, y) ::: x is a member of y.\nPremises:\nis_politician(\"heinrich_schmidt\") ::: Heinrich Scmidt was a Nazi German politician.\nis_member_of(\"heinrich_schmidt\", \"prussian_state_parliament\") \u2227 is_member_of(\"heinrich_schmidt\", \"nazi_reichstag\") ::: Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\nQuery:\n\u2200x (is_politician(x) \u2192 \u00acis_member_of(x, \"nazi_reichstag\")) ::: No politicans are part of the Nazi Reichstag.",
            "problem": " Heinrich Scmidt was a Nazi German politician.  Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nNo politicans are part of the Nazi Reichstag."
        },
        {
            "example": 170,
            "response": [
                "is_severe_cancer(\"colorectal_cancer\")",
                [
                    "all x ((is_deadly_disease(x)  ->  has_low_survival_rate(x)) )",
                    "all x ((is_severe_cancer(x)  ->  is_deadly_disease(x)) )",
                    "is_severe_cancer(\"bile_duct_cancer\") ",
                    "all x ((is_cholangiocarcinoma(x)  ->  is_bile_duct_cancer(x)) )",
                    "all x ((has_mild_flu(x)  ->   -has_low_survival_rate(x)) )",
                    "((is_colorectal_cancer(\"colorectal_cancer\")  &  is_bile_duct_cancer(\"colorectal_cancer\"))  &  has_low_survival_rate(\"colorectal_cancer\"))  ->   -is_bile_duct_cancer(\"colorectal_cancer\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nbile_duct_cancer ::: represents bile duct cancer\ncholangiocarcinoma ::: represents cholangiocarcinoma\ncolorectal_cancer ::: represents colorectal cancer\nsevere_cancer ::: represents severe cancer\nmild_flu ::: represents mild flu\nPredicates:\nis_deadly_disease(x) ::: x is a deadly disease.\nhas_low_survival_rate(x) ::: x has a low survival rate.\nis_severe_cancer(x) ::: x is a severe cancer.\nis_bile_duct_cancer(x) ::: x is a bile duct cancer.\nis_cholangiocarcinoma(x) ::: x is cholangiocarcinoma.\nis_colorectal_cancer(x) ::: x is colorectal cancer.\nhas_mild_flu(x) ::: x has mild flu.\nPremises:\n\u2200x (is_deadly_disease(x) \u2192 has_low_survival_rate(x)) ::: If something is a deadly disease, then its survival rate is low.\n\u2200x (is_severe_cancer(x) \u2192 is_deadly_disease(x)) ::: All severe cancers are deadly diseases.\nis_severe_cancer(\"bile_duct_cancer\") ::: Bile duct cancer is a severe cancer.\n\u2200x (is_cholangiocarcinoma(x) \u2192 is_bile_duct_cancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.\n\u2200x (has_mild_flu(x) \u2192 \u00achas_low_survival_rate(x)) ::: No one with mild flu has a low survival rate.\n((is_colorectal_cancer(\"colorectal_cancer\") \u2227 is_bile_duct_cancer(\"colorectal_cancer\")) \u2227 has_low_survival_rate(\"colorectal_cancer\")) \u2192 \u00acis_bile_duct_cancer(\"colorectal_cancer\") ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nQuery:\nis_severe_cancer(\"colorectal_cancer\") ::: Colorectal cancer is a severe cancer.",
            "problem": " If something is a deadly disease, then its survival rate is low.  All severe cancers are deadly diseases. Bile duct cancer is a severe cancer.  All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nColorectal cancer is a severe cancer"
        },
        {
            "example": 171,
            "response": [
                "(is_bile_duct_cancer(\"colorectal_cancer\")  |  is_cholangiocarcinoma(\"colorectal_cancer\"))  ->  (is_bile_duct_cancer(\"colorectal_cancer\")  &  has_mild_flu(\"colorectal_cancer\"))",
                [
                    "all x ((is_deadly_disease(x)  ->  has_low_survival_rate(x)) )",
                    "all x ((is_severe_cancer(x)  ->  is_deadly_disease(x)) )",
                    "is_severe_cancer(\"bile_duct_cancer\") ",
                    "all x ((is_cholangiocarcinoma(x)  ->  is_bile_duct_cancer(x)) )",
                    "all x ((has_mild_flu(x)  ->   -has_low_survival_rate(x)) )",
                    "((is_bile_duct_cancer(\"colorectal_cancer\")  &  has_low_survival_rate(\"colorectal_cancer\"))  ->   -is_bile_duct_cancer(\"colorectal_cancer\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nbile_duct_cancer ::: represents bile duct cancer\ncolorectal_cancer ::: represents colorectal cancer\ncholangiocarcinoma ::: represents cholangiocarcinoma\nmild_flu ::: represents mild flu\nPredicates:\nis_deadly_disease(x) ::: x is a deadly disease.\nhas_low_survival_rate(x) ::: x has a low survival rate.\nis_severe_cancer(x) ::: x is a severe cancer.\nis_bile_duct_cancer(x) ::: x is a bile duct cancer.\nis_cholangiocarcinoma(x) ::: x is cholangiocarcinoma.\nhas_mild_flu(x) ::: x has mild flu.\nPremises:\n\u2200x (is_deadly_disease(x) \u2192 has_low_survival_rate(x)) ::: If something is a deadly disease, then its survival rate is low.\n\u2200x (is_severe_cancer(x) \u2192 is_deadly_disease(x)) ::: All severe cancers are deadly diseases.\nis_severe_cancer(\"bile_duct_cancer\") ::: Bile duct cancer is a severe cancer.\n\u2200x (is_cholangiocarcinoma(x) \u2192 is_bile_duct_cancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.\n\u2200x (has_mild_flu(x) \u2192 \u00achas_low_survival_rate(x)) ::: No one with mild flu has a low survival rate.\n((is_bile_duct_cancer(\"colorectal_cancer\") \u2227 has_low_survival_rate(\"colorectal_cancer\")) \u2192 \u00acis_bile_duct_cancer(\"colorectal_cancer\")) ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nQuery:\n(is_bile_duct_cancer(\"colorectal_cancer\") \u2228 is_cholangiocarcinoma(\"colorectal_cancer\")) \u2192 (is_bile_duct_cancer(\"colorectal_cancer\") \u2227 has_mild_flu(\"colorectal_cancer\")) ::: If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.",
            "problem": " If something is a deadly disease, then its survival rate is low.  All severe cancers are deadly diseases. Bile duct cancer is a severe cancer.  All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu."
        },
        {
            "example": 172,
            "response": [
                "( -is_mild_flu(\"colorectal_cancer\")  &   -is_cholangiocarcinoma(\"colorectal_cancer\"))  ->  (is_bile_duct_cancer(\"colorectal_cancer\")  |  is_cholangiocarcinoma(\"colorectal_cancer\"))",
                [
                    "all x ((is_deadly_disease(x)  ->  has_low_survival_rate(x)) )",
                    "all x ((is_severe_cancer(x)  ->  is_deadly_disease(x)) )",
                    "is_severe_cancer(\"bile_duct_cancer\") ",
                    "all x ((is_cholangiocarcinoma(x)  ->  is_bile_duct_cancer(x)) )",
                    "all x ((is_mild_flu(x)  ->   -has_low_survival_rate(x)) )",
                    "((is_bile_duct_cancer(\"colorectal_cancer\")  &  has_low_survival_rate(\"colorectal_cancer\"))  ->   -is_bile_duct_cancer(\"colorectal_cancer\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nbile_duct_cancer ::: represents bile duct cancer\ncolorectal_cancer ::: represents colorectal cancer\ncholangiocarcinoma ::: represents cholangiocarcinoma\nmild_flu ::: represents mild flu\nPredicates:\nis_deadly_disease(x) ::: x is a deadly disease.\nhas_low_survival_rate(x) ::: x has a low survival rate.\nis_severe_cancer(x) ::: x is a severe cancer.\nis_bile_duct_cancer(x) ::: x is a bile duct cancer.\nis_cholangiocarcinoma(x) ::: x is a cholangiocarcinoma.\nis_mild_flu(x) ::: x is a mild flu.\nPremises:\n\u2200x (is_deadly_disease(x) \u2192 has_low_survival_rate(x)) ::: If something is a deadly disease, then its survival rate is low.\n\u2200x (is_severe_cancer(x) \u2192 is_deadly_disease(x)) ::: All severe cancers are deadly diseases.\nis_severe_cancer(\"bile_duct_cancer\") ::: Bile duct cancer is a severe cancer.\n\u2200x (is_cholangiocarcinoma(x) \u2192 is_bile_duct_cancer(x)) ::: All Cholangiocarcinoma is bile duct cancer.\n\u2200x (is_mild_flu(x) \u2192 \u00achas_low_survival_rate(x)) ::: No one with mild flu has a low survival rate.\n((is_bile_duct_cancer(\"colorectal_cancer\") \u2227 has_low_survival_rate(\"colorectal_cancer\")) \u2192 \u00acis_bile_duct_cancer(\"colorectal_cancer\")) ::: If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.\nQuery:\n(\u00acis_mild_flu(\"colorectal_cancer\") \u2227 \u00acis_cholangiocarcinoma(\"colorectal_cancer\")) \u2192 (is_bile_duct_cancer(\"colorectal_cancer\") \u2228 is_cholangiocarcinoma(\"colorectal_cancer\")) ::: If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.",
            "problem": " If something is a deadly disease, then its survival rate is low.  All severe cancers are deadly diseases. Bile duct cancer is a severe cancer.  All Cholangiocarcinoma is bile duct cancer. No one with mild flu has a low survival rate. If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma."
        },
        {
            "example": 173,
            "response": [
                "eat_salad_regularly(\"taylor\")",
                [
                    "all x ((eat_salad_regularly(x)  ->  conscious_about_health(x)) )",
                    "all x ((grew_up_in_health_conscious_home(x)  ->  eat_salad_regularly(x)) )",
                    "all x ((fulfill_nutritional_intakes(x)  ->  grew_up_in_health_conscious_home(x)) )",
                    "all x ((has_good_relationship_with_parents(x)  ->  fulfill_nutritional_intakes(x)) )",
                    "all x ((has_good_relationship_with_parents(x)  ->   -eat_salad_regularly(x)) )",
                    "all x ((visit_gym_daily(x)  ->  fulfill_nutritional_intakes(x)) )",
                    "((grew_up_in_health_conscious_home(\"taylor\")  &  has_good_relationship_with_parents(\"taylor\"))  |  ( -grew_up_in_health_conscious_home(\"taylor\")  &   -has_good_relationship_with_parents(\"taylor\"))) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\ntaylor ::: represents taylor\nPredicates:\neat_salad_regularly(x) ::: x eats salads regularly.\nconscious_about_health(x) ::: x is very conscious about their health and eating habits.\ngrew_up_in_health_conscious_home(x) ::: x grew up in health-conscious childhood homes.\nfulfill_nutritional_intakes(x) ::: x fulfills their nutritional daily intakes.\nhas_good_relationship_with_parents(x) ::: x has good relationships with their parents.\nvisit_gym_daily(x) ::: x visits the gym at least once a day.\nPremises:\n\u2200x (eat_salad_regularly(x) \u2192 conscious_about_health(x)) ::: All people who eat salads regularly are very conscious about their health and eating habits.\n\u2200x (grew_up_in_health_conscious_home(x) \u2192 eat_salad_regularly(x)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.\n\u2200x (fulfill_nutritional_intakes(x) \u2192 grew_up_in_health_conscious_home(x)) ::: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\n\u2200x (has_good_relationship_with_parents(x) \u2192 fulfill_nutritional_intakes(x)) ::: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\n\u2200x (has_good_relationship_with_parents(x) \u2192 \u00aceat_salad_regularly(x)) ::: If people have good relationships with their parents, then they do not eat salads regularly.\n\u2200x (visit_gym_daily(x) \u2192 fulfill_nutritional_intakes(x)) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n((grew_up_in_health_conscious_home(\"taylor\") \u2227 has_good_relationship_with_parents(\"taylor\")) \u2228 (\u00acgrew_up_in_health_conscious_home(\"taylor\") \u2227 \u00achas_good_relationship_with_parents(\"taylor\"))) ::: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\nQuery:\neat_salad_regularly(\"taylor\") ::: Taylor eats salads regularly.",
            "problem": " All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTaylor eats salads regularly."
        },
        {
            "example": 174,
            "response": [
                "visit_gym(\"taylor\")",
                [
                    "all x ((eat_salads_regularly(x)  ->  conscious_about_health(x)) )",
                    "all x ((grew_up_in_health_conscious_home(x)  ->  eat_salads_regularly(x)) )",
                    "all x ((fulfill_nutritional_intakes(x)  ->  grew_up_in_health_conscious_home(x)) )",
                    "all x ((has_good_relationship_with_parents(x)  ->  fulfill_nutritional_intakes(x)) )",
                    "all x ((has_good_relationship_with_parents(x)  ->   -eat_salads_regularly(x)) )",
                    "all x ((visit_gym(x)  ->  fulfill_nutritional_intakes(x)) )",
                    "((grew_up_in_health_conscious_home(\"taylor\")  &  has_good_relationship_with_parents(\"taylor\"))  |  ( -grew_up_in_health_conscious_home(\"taylor\")  &   -has_good_relationship_with_parents(\"taylor\"))) "
                ]
            ],
            "label": "False",
            "text": "Constants:\ntaylor ::: represents taylor\nPredicates:\neat_salads_regularly(x) ::: x eats salads regularly.\nconscious_about_health(x) ::: x is very conscious about their health and eating habits.\ngrew_up_in_health_conscious_home(x) ::: x grew up in a health-conscious childhood home.\nfulfill_nutritional_intakes(x) ::: x fulfills their nutritional daily intakes.\nhas_good_relationship_with_parents(x) ::: x has good relationships with their parents.\nvisit_gym(x) ::: x visits the gym at least once a day.\nPremises:\n\u2200x (eat_salads_regularly(x) \u2192 conscious_about_health(x)) ::: All people who eat salads regularly are very conscious about their health and eating habits.\n\u2200x (grew_up_in_health_conscious_home(x) \u2192 eat_salads_regularly(x)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.\n\u2200x (fulfill_nutritional_intakes(x) \u2192 grew_up_in_health_conscious_home(x)) ::: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\n\u2200x (has_good_relationship_with_parents(x) \u2192 fulfill_nutritional_intakes(x)) ::: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\n\u2200x (has_good_relationship_with_parents(x) \u2192 \u00aceat_salads_regularly(x)) ::: If people have good relationships with their parents, then they do not eat salads regularly.\n\u2200x (visit_gym(x) \u2192 fulfill_nutritional_intakes(x)) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n((grew_up_in_health_conscious_home(\"taylor\") \u2227 has_good_relationship_with_parents(\"taylor\")) \u2228 (\u00acgrew_up_in_health_conscious_home(\"taylor\") \u2227 \u00achas_good_relationship_with_parents(\"taylor\"))) ::: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\nQuery:\nvisit_gym(\"taylor\") ::: Taylor visits the gym at least once a day.",
            "problem": " All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTaylor visits the gym at least once a day."
        },
        {
            "example": 175,
            "response": [
                "( -grew_up_in_health_conscious_home(\"taylor\")  &   -visit_gym(\"taylor\"))",
                [
                    "all x ((eat_salads_regularly(x)  ->  conscious_about_health(x)) )",
                    "all x ((grew_up_in_health_conscious_home(x)  ->  eat_salads_regularly(x)) )",
                    "all x ((fulfill_nutritional_intakes(x)  ->  grew_up_in_health_conscious_home(x)) )",
                    "all x ((have_good_relationship_with_parents(x)  ->  fulfill_nutritional_intakes(x)) )",
                    "all x ((have_good_relationship_with_parents(x)  ->   -eat_salads_regularly(x)) )",
                    "all x ((visit_gym(x)  ->  always_fulfill_daily_intakes(x)) )",
                    "((grew_up_in_health_conscious_home(\"taylor\")  &  have_good_relationship_with_parents(\"taylor\"))  |  ( -grew_up_in_health_conscious_home(\"taylor\")  &   -have_good_relationship_with_parents(\"taylor\"))) "
                ]
            ],
            "label": "True",
            "text": "Constants:\ntaylor ::: represents taylor\nPredicates:\neat_salads_regularly(x) ::: x eats salads regularly.\nconscious_about_health(x) ::: x is very conscious about their health and eating habits.\ngrew_up_in_health_conscious_home(x) ::: x grew up in a health-conscious childhood home.\nfulfill_nutritional_intakes(x) ::: x fulfills their nutritional daily intakes.\nhave_good_relationship_with_parents(x) ::: x has good relationships with their parents.\nvisit_gym(x) ::: x visits the gym at least once a day.\nalways_fulfill_daily_intakes(x) ::: x always fulfills their daily nutritional intakes.\nPremises:\n\u2200x (eat_salads_regularly(x) \u2192 conscious_about_health(x)) ::: All people who eat salads regularly are very conscious about their health and eating habits.\n\u2200x (grew_up_in_health_conscious_home(x) \u2192 eat_salads_regularly(x)) ::: All people who grew up in health-conscious childhood homes eat salads regularly.\n\u2200x (fulfill_nutritional_intakes(x) \u2192 grew_up_in_health_conscious_home(x)) ::: All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.\n\u2200x (have_good_relationship_with_parents(x) \u2192 fulfill_nutritional_intakes(x)) ::: If people have good relationships with their parents, then they fulfill their nutritional daily intakes.\n\u2200x (have_good_relationship_with_parents(x) \u2192 \u00aceat_salads_regularly(x)) ::: If people have good relationships with their parents, then they do not eat salads regularly.\n\u2200x (visit_gym(x) \u2192 always_fulfill_daily_intakes(x)) ::: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n((grew_up_in_health_conscious_home(\"taylor\") \u2227 have_good_relationship_with_parents(\"taylor\")) \u2228 (\u00acgrew_up_in_health_conscious_home(\"taylor\") \u2227 \u00achave_good_relationship_with_parents(\"taylor\"))) ::: It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.\nQuery:\n(\u00acgrew_up_in_health_conscious_home(\"taylor\") \u2227 \u00acvisit_gym(\"taylor\")) ::: Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
            "problem": " All people who eat salads regularly are very conscious about their health and eating habits. All people who grew up in health-conscious childhood homes eat salads regularly. All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes. If people have good relationships with their parents, then they fulfill their nutritional daily intakes. If people have good relationships with their parents, then they do not eat salads regularly. If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes. It is either both true that Taylor grew up in a health-conscious childhood home and she has a good relationship with her parents, or it is true that Taylor neither grew up in a health-conscious childhood home nor has a good relationship with her parents.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTaylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day."
        },
        {
            "example": 176,
            "response": [
                "is_sporting_event(\"world_championships\")",
                [
                    "is_sporting_event(\"olympic_games\") ",
                    "last(\"olympic_games\", \"tokyo\") ",
                    "won_most_medals(\"united_states\", \"tokyo\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nolympic_games ::: represents the Olympic games\ntokyo ::: represents Tokyo\nunited_states ::: represents the United States\nworld_championships ::: represents the world championships\nPredicates:\nis_sporting_event(x) ::: x is a sporting event.\nlast(x, y) ::: x is the last y.\nis_in(x, y) ::: x is in y.\nwon_most_medals(x, y) ::: x won the most medals in y.\nPremises:\nis_sporting_event(\"olympic_games\") ::: The Olympic games is a sporting event.\nlast(\"olympic_games\", \"tokyo\") ::: The last Olympic games was in Tokyo.\nwon_most_medals(\"united_states\", \"tokyo\") ::: The United States won the most medals in Tokyo.\nQuery:\nis_sporting_event(\"world_championships\") ::: The world championships is a sporting event.",
            "problem": " [BG] The Olympic games is a sporting event.  The last Olympic games was in Tokyo. The United States won the most medals in Tokyo. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThe world championships is a sporting event."
        },
        {
            "example": 177,
            "response": [
                " -is_in(\"the_last_olympic_games\", \"tokyo\")",
                [
                    "is_sporting_event(\"the_olympic_games\") ",
                    "is_in(\"the_last_olympic_games\", \"tokyo\") ",
                    "won_most_medals(\"united_states\", \"tokyo\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\ntokyo ::: represents tokyo\nunited_states ::: represents the united states\nPredicates:\nis_sporting_event(x) ::: x is a sporting event.\nis_in(x, y) ::: x is in y.\nwon_most_medals(x, y) ::: x won the most medals in y.\nPremises:\nis_sporting_event(\"the_olympic_games\") ::: The Olympic games is a sporting event.\nis_in(\"the_last_olympic_games\", \"tokyo\") ::: The last Olympic games was in Tokyo.\nwon_most_medals(\"united_states\", \"tokyo\") ::: The United States won the most medals in Tokyo.\nQuery:\n\u00acis_in(\"the_last_olympic_games\", \"tokyo\") ::: The last Olympic games were not in Tokyo.",
            "problem": " [BG] The Olympic games is a sporting event.  The last Olympic games was in Tokyo. The United States won the most medals in Tokyo. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThe last Olympic games were not in Tokyo."
        },
        {
            "example": 178,
            "response": [
                "won_most_medals(\"united_states\", \"the_last_olympic_games\")",
                [
                    "is_sporting_event(\"the_olympic_games\") ",
                    "is_in(\"the_last_olympic_games\", \"tokyo\") ",
                    "won_most_medals(\"united_states\", \"tokyo\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\ntokyo ::: represents Tokyo\nunited_states ::: represents the United States\nPredicates:\nis_sporting_event(x) ::: x is a sporting event.\nis_in(x, y) ::: x is in y.\nwon_most_medals(x, y) ::: x won the most medals in y.\nPremises:\nis_sporting_event(\"the_olympic_games\") ::: The Olympic games is a sporting event.\nis_in(\"the_last_olympic_games\", \"tokyo\") ::: The last Olympic games was in Tokyo.\nwon_most_medals(\"united_states\", \"tokyo\") ::: The United States won the most medals in Tokyo.\nQuery:\nwon_most_medals(\"united_states\", \"the_last_olympic_games\") ::: The United States won the most medals in the last Olympic games.",
            "problem": " [BG] The Olympic games is a sporting event.  The last Olympic games was in Tokyo. The United States won the most medals in Tokyo. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nThe United States won the most medals in the last Olympic games."
        },
        {
            "example": 179,
            "response": [
                "exists x ((humans(x)  &  horses(x)))",
                [
                    "all x ((horses(x)  ->  have_hooves(x)) )",
                    "all x ((humans(x)  ->   -have_hooves(x)) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\nhorses ::: represents horses\nhumans ::: represents humans\nPredicates:\nhave_hooves(x) ::: x has hooves.\nPremises:\n\u2200x (horses(x) \u2192 have_hooves(x)) ::: All horses have hooves.\n\u2200x (humans(x) \u2192 \u00achave_hooves(x)) ::: No humans have hooves.\nQuery:\n\u2203x (humans(x) \u2227 horses(x)) ::: Some humans are horses.",
            "problem": " All horses have hooves. No humans have hooves.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSome humans are horses."
        },
        {
            "example": 180,
            "response": [
                "flies_from(\"susan\", \"lga_airport\")",
                [
                    "flies_to(\"susan\", \"lga_airport\") ",
                    "all x (((departure(x, y)  &  arrival(x, z))  ->  (y  !=  z)) )",
                    "flies_from(\"john\", \"lga_airport\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nsusan ::: represents susan\njohn ::: represents john\nlga_airport ::: represents lga airport\nPredicates:\nflies_to(x, y) ::: x flies to y.\nflies_from(x, y) ::: x flies from y.\ndeparture(x, y) ::: x departs from y.\narrival(x, y) ::: x arrives at y.\nPremises:\nflies_to(\"susan\", \"lga_airport\") ::: Susan flies to LGA airport.\n\u2200x ((departure(x, y) \u2227 arrival(x, z)) \u2192 (y \u2260 z)) ::: The departure and arrival can not be the same airport.\nflies_from(\"john\", \"lga_airport\") ::: John flies from LGA airport.\nQuery:\nflies_from(\"susan\", \"lga_airport\") ::: Susan flies from LGA airport.",
            "problem": " Susan flies to LGA airport. The departure and arrival can not be the same airport. John flies from LGA airport.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSusan flies from LGA airport."
        },
        {
            "example": 181,
            "response": [
                "flies_to(\"john\", \"lga_airport\")",
                [
                    "flies_to(\"susan\", \"lga_airport\") ",
                    " all x  all y ((flies_to(x, y)  &  departure(x, z)  &  arrival(y, z))  ->   -(z = y)) ",
                    "flies_from(\"john\", \"lga_airport\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nsusan ::: represents susan\njohn ::: represents john\nlga_airport ::: represents lga airport\nPredicates:\nflies_to(x, y) ::: x flies to y.\nflies_from(x, y) ::: x flies from y.\ndeparture(x, y) ::: x departs from y.\narrival(x, y) ::: x arrives at y.\nPremises:\nflies_to(\"susan\", \"lga_airport\") ::: Susan flies to LGA airport.\n\u2200x \u2200y ((flies_to(x, y) \u2227 departure(x, z) \u2227 arrival(y, z)) \u2192 \u00ac(z = y)) ::: The departure and arrival can not be the same airport.\nflies_from(\"john\", \"lga_airport\") ::: John flies from LGA airport.\nQuery:\nflies_to(\"john\", \"lga_airport\") ::: John flies to LGA airport.",
            "problem": " Susan flies to LGA airport. The departure and arrival can not be the same airport. John flies from LGA airport.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nJohn flies to LGA airport."
        },
        {
            "example": 182,
            "response": [
                "grumpy(\"tom\")",
                [
                    "all x ((nice_to_animals(x)  ->   -mean_to_animals(x)) )",
                    "exists x ((grumpy(x)  &  mean_to_animals(x)) )",
                    "all x ((animal_lover(x)  ->  nice_to_animals(x)) )",
                    "all x ((owns_pet(x)  ->  loves_animals(x)) )",
                    "owns_pet(\"tom\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\ntom ::: represents tom\nPredicates:\nnice_to_animals(x) ::: x is nice to animals.\nmean_to_animals(x) ::: x is mean to animals.\ngrumpy(x) ::: x is grumpy.\nowns_pet(x) ::: x owns a pet.\nloves_animals(x) ::: x loves animals.\nPremises:\n\u2200x (nice_to_animals(x) \u2192 \u00acmean_to_animals(x)) ::: No one nice to animals is mean to animals.\n\u2203x (grumpy(x) \u2227 mean_to_animals(x)) ::: Some grumpy people are mean to animals.\n\u2200x (animal_lover(x) \u2192 nice_to_animals(x)) ::: All animal lovers are nice to animals.\n\u2200x (owns_pet(x) \u2192 loves_animals(x)) ::: If someone owns a pet, then they love animals.\nowns_pet(\"tom\") ::: Tom is a pet owner.\nQuery:\ngrumpy(\"tom\") ::: Tom is a grumpy person.",
            "problem": " No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTom is a grumpy person."
        },
        {
            "example": 183,
            "response": [
                " -(grumpy(\"tom\")  &  mean_to_animals(\"tom\"))",
                [
                    "all x ((nice_to_animals(x)  ->   -mean_to_animals(x)) )",
                    "exists x ((grumpy(x)  &  mean_to_animals(x)) )",
                    "all x ((loves_animals(x)  ->  nice_to_animals(x)) )",
                    "all x ((owns_pet(x)  ->  loves_animals(x)) )",
                    "owns_pet(\"tom\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\ntom ::: represents tom\nPredicates:\nnice_to_animals(x) ::: x is nice to animals.\nmean_to_animals(x) ::: x is mean to animals.\ngrumpy(x) ::: x is grumpy.\nowns_pet(x) ::: x owns a pet.\nloves_animals(x) ::: x loves animals.\nPremises:\n\u2200x (nice_to_animals(x) \u2192 \u00acmean_to_animals(x)) ::: No one nice to animals is mean to animals.\n\u2203x (grumpy(x) \u2227 mean_to_animals(x)) ::: Some grumpy people are mean to animals.\n\u2200x (loves_animals(x) \u2192 nice_to_animals(x)) ::: All animal lovers are nice to animals.\n\u2200x (owns_pet(x) \u2192 loves_animals(x)) ::: If someone owns a pet, then they love animals.\nowns_pet(\"tom\") ::: Tom is a pet owner.\nQuery:\n\u00ac(grumpy(\"tom\") \u2227 mean_to_animals(\"tom\")) ::: Tom is not a grumpy person and mean to animals.",
            "problem": " No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nTom is not a grumpy person and mean to animals."
        },
        {
            "example": 184,
            "response": [
                " -(grumpy(\"tom\")  &  mean_to(\"tom\", \"animals\"))  ->   -(grumpy(\"tom\")  |  animal_lover(\"tom\"))",
                [
                    "all x ((nice_to(x, \"animals\")  ->   -mean_to(x, \"animals\")) )",
                    "exists x ((grumpy(x)  &  mean_to(x, \"animals\")) )",
                    "all x ((animal_lover(x)  ->  nice_to(x, \"animals\")) )",
                    "all x ((owns(x, \"pet\")  ->  love(x, \"animals\")) )",
                    "is_pet_owner(\"tom\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\ntom ::: represents tom\nPredicates:\nnice_to(x, y) ::: x is nice to y.\nmean_to(x, y) ::: x is mean to y.\ngrumpy(x) ::: x is grumpy.\nanimal_lover(x) ::: x is an animal lover.\nowns(x, y) ::: x owns y.\nlove(x, y) ::: x loves y.\nis_pet_owner(x) ::: x is a pet owner.\nPremises:\n\u2200x (nice_to(x, \"animals\") \u2192 \u00acmean_to(x, \"animals\")) ::: No one nice to animals is mean to animals.\n\u2203x (grumpy(x) \u2227 mean_to(x, \"animals\")) ::: Some grumpy people are mean to animals.\n\u2200x (animal_lover(x) \u2192 nice_to(x, \"animals\")) ::: All animal lovers are nice to animals.\n\u2200x (owns(x, \"pet\") \u2192 love(x, \"animals\")) ::: If someone owns a pet, then they love animals.\nis_pet_owner(\"tom\") ::: Tom is a pet owner.\nQuery:\n\u00ac(grumpy(\"tom\") \u2227 mean_to(\"tom\", \"animals\")) \u2192 \u00ac(grumpy(\"tom\") \u2228 animal_lover(\"tom\")) ::: If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.",
            "problem": " No one nice to animals is mean to animals. Some grumpy people are mean to animals. All animal lovers are nice to animals. If someone owns a pet, then they love animals. Tom is a pet owner.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover."
        },
        {
            "example": 185,
            "response": [
                "is_novel_writer(\"dani_shapiro\")",
                [
                    " -is_podcast(\"family_history\") ",
                    "all x ((is_born_in(x, \"american_city\")  ->  is_american(x)) )",
                    "all x (((is_novel(x)  &  is_written_by(x, y))  ->  is_novel_writer(y)) )",
                    "is_american(\"dani_shapiro\")  &  is_person(\"dani_shapiro\")  &  is_writer(\"dani_shapiro\") ",
                    "is_written_by(\"family_history\", \"dani_shapiro\") ",
                    "is_novel(\"family_history\")  &  is_written_in(\"family_history\", \"2003\") ",
                    "is_created_by(\"family_secrets\", \"dani_shapiro\")  &  is_podcast(\"family_secrets\") ",
                    "is_american(\"boston\")  &  is_born_in(\"boston\", \"american_city\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\ndani_shapiro ::: represents dani shapiro\nfamily_history ::: represents family history\namerican_city ::: represents an american city\nboston ::: represents boston\nPredicates:\nis_podcast(x) ::: x is a podcast.\nis_novel(x) ::: x is a novel.\nis_written_by(x, y) ::: x is written by y.\nis_person(x) ::: x is a person.\nis_born_in(x, y) ::: x is born in y.\nis_american(x) ::: x is American.\nis_novel_writer(x) ::: x is a novel writer.\nis_created_by(x, y) ::: x is created by y.\nis_written_in(x, y) ::: x is written in year y.\nPremises:\n\u00acis_podcast(\"family_history\") ::: A podcast is not a novel.\n\u2200x (is_born_in(x, \"american_city\") \u2192 is_american(x)) ::: If a person is born in American City, the person is American.\n\u2200x ((is_novel(x) \u2227 is_written_by(x, y)) \u2192 is_novel_writer(y)) ::: If a book is novel and it is written by a person, then the person is a novel writer.\nis_american(\"dani_shapiro\") \u2227 is_person(\"dani_shapiro\") \u2227 is_writer(\"dani_shapiro\") ::: Dani Shapiro is an American writer.\nis_written_by(\"family_history\", \"dani_shapiro\") ::: Family History is written by Dani Shapiro.\nis_novel(\"family_history\") \u2227 is_written_in(\"family_history\", \"2003\") ::: Family History is a novel written in 2003.\nis_created_by(\"family_secrets\", \"dani_shapiro\") \u2227 is_podcast(\"family_secrets\") ::: Dani Shapiro created a podcast called Family Secrets.\nis_american(\"boston\") \u2227 is_born_in(\"boston\", \"american_city\") ::: Boston is an American city.\nQuery:\nis_novel_writer(\"dani_shapiro\") ::: Dani Shapiro is a novel writer.",
            "problem": " A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDani Shapiro is a novel writer."
        },
        {
            "example": 186,
            "response": [
                "is_novel(\"family_secrets\")",
                [
                    " -is_podcast(\"family_secrets\") ",
                    "all x ((is_born_in(x, \"american_city\")  ->  is_american(x)) )",
                    "all x (((is_book(x)  &  is_novel(x))  ->  (is_written_by(y, x)  ->  is_novel_writer(y))) )",
                    "is_american(\"dani_shapiro\")  &  is_novel_writer(\"dani_shapiro\") ",
                    "is_written_by(\"family_history\", \"dani_shapiro\")  &  is_book(\"family_history\")  &  is_novel(\"family_history\")  &  written_in(\"family_history\", \"2003\") ",
                    "created_podcast(\"dani_shapiro\", \"family_secrets\") ",
                    "is_american(\"boston\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\ndani_shapiro ::: represents dani shapiro\nfamily_history ::: represents family history\namerican_city ::: represents american city\nboston ::: represents boston\nPredicates:\nis_podcast(x) ::: x is a podcast.\nis_novel(x) ::: x is a novel.\nis_written_by(x, y) ::: x is written by y.\nis_person(x) ::: x is a person.\nis_born_in(x, y) ::: x is born in y.\nis_american(x) ::: x is American.\nis_book(x) ::: x is a book.\nis_novel_writer(x) ::: x is a novel writer.\ncreated_podcast(x, y) ::: x created podcast y.\nwritten_in(x, y) ::: x is written in year y.\nPremises:\n\u00acis_podcast(\"family_secrets\") ::: A podcast is not a novel.\n\u2200x (is_born_in(x, \"american_city\") \u2192 is_american(x)) ::: If a person is born in American City, the person is American.\n\u2200x ((is_book(x) \u2227 is_novel(x)) \u2192 (is_written_by(y, x) \u2192 is_novel_writer(y))) ::: If a book is novel and it is written by a person, then the person is a novel writer.\nis_american(\"dani_shapiro\") \u2227 is_novel_writer(\"dani_shapiro\") ::: Dani Shapiro is an American writer.\nis_written_by(\"family_history\", \"dani_shapiro\") \u2227 is_book(\"family_history\") \u2227 is_novel(\"family_history\") \u2227 written_in(\"family_history\", \"2003\") ::: Family History is written by Dani Shapiro. Family History is a novel written in 2003.\ncreated_podcast(\"dani_shapiro\", \"family_secrets\") ::: Dani Shapiro created a podcast called Family Secrets.\nis_american(\"boston\") ::: Boston is an American city.\nQuery:\nis_novel(\"family_secrets\") ::: Family Secrets is a novel.",
            "problem": " A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nFamily Secrets is a novel."
        },
        {
            "example": 187,
            "response": [
                "is_born_in(\"dani_shapiro\", \"boston\")",
                [
                    " -is_podcast(\"family_history\") ",
                    "all x ((is_born_in(x, \"american_city\")  ->  is_american(x)) )",
                    "all x (((is_novel(x)  &  is_written_by(x, y))  ->  is_novel_writer(y)) )",
                    "is_american(\"dani_shapiro\")  &  is_person(\"dani_shapiro\") ",
                    "is_written_by(\"family_history\", \"dani_shapiro\") ",
                    "is_novel(\"family_history\")  &  written_in(\"family_history\", \"2003\") ",
                    "created_podcast(\"dani_shapiro\", \"family_secrets\") ",
                    "is_american(\"boston\")  &  is_born_in(\"dani_shapiro\", \"boston\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\ndani_shapiro ::: represents dani shapiro\nfamily_history ::: represents family history\namerican_city ::: represents american city\nboston ::: represents boston\nPredicates:\nis_podcast(x) ::: x is a podcast.\nis_novel(x) ::: x is a novel.\nis_written_by(x, y) ::: x is written by y.\nis_person(x) ::: x is a person.\nis_born_in(x, y) ::: x is born in y.\nis_american(x) ::: x is American.\nis_novel_writer(x) ::: x is a novel writer.\ncreated_podcast(x, y) ::: x created podcast y.\nwritten_in(x, y) ::: x is written in year y.\nPremises:\n\u00acis_podcast(\"family_history\") ::: A podcast is not a novel.\n\u2200x (is_born_in(x, \"american_city\") \u2192 is_american(x)) ::: If a person is born in American City, the person is American.\n\u2200x ((is_novel(x) \u2227 is_written_by(x, y)) \u2192 is_novel_writer(y)) ::: If a book is novel and it is written by a person, then the person is a novel writer.\nis_american(\"dani_shapiro\") \u2227 is_person(\"dani_shapiro\") ::: Dani Shapiro is an American writer.\nis_written_by(\"family_history\", \"dani_shapiro\") ::: Family History is written by Dani Shapiro.\nis_novel(\"family_history\") \u2227 written_in(\"family_history\", \"2003\") ::: Family History is a novel written in 2003.\ncreated_podcast(\"dani_shapiro\", \"family_secrets\") ::: Dani Shapiro created a podcast called Family Secrets.\nis_american(\"boston\") \u2227 is_born_in(\"dani_shapiro\", \"boston\") ::: Boston is an American city.\nQuery:\nis_born_in(\"dani_shapiro\", \"boston\") ::: Dani Shapiro was born in Boston.",
            "problem": " A podcast is not a novel. [BG] If a person is born in American City, the person is American. [BG] If a book is novel and it is written by a person, then the person is a novel writer. Dani Shapiro is an American writer. Family History is written by Dani Shapiro. Family History is a novel written in 2003. Dani Shapiro created a podcast called Family Secrets. [BG] Boston is an American city.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDani Shapiro was born in Boston."
        },
        {
            "example": 188,
            "response": [
                " -is_american(\"yuri\")",
                [
                    "exists x ((is_basketball_player(x)  &   -is_american(x)) )",
                    " all x (is_basketball_player(x)  ->  is_tall(x)) ",
                    " all x (is_tall(x)  ->  wear_large_shoes(x)) ",
                    "all x ((wear_large_shoes(x)  ->  wear_large_sized_clothes(x)) )",
                    " -wear_large_sized_clothes(\"yuri\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nyuri ::: represents yuri\nPredicates:\nis_basketball_player(x) ::: x is a basketball player.\nis_american(x) ::: x is American.\nis_tall(x) ::: x is tall.\nwear_large_shoes(x) ::: x wears large shoes.\nwear_large_sized_clothes(x) ::: x wears large-sized clothes.\nPremises:\n\u2203x (is_basketball_player(x) \u2227 \u00acis_american(x)) ::: Some basketball players are not American.\n\u2200x (is_basketball_player(x) \u2192 is_tall(x)) ::: All basketball players are tall.\n\u2200x (is_tall(x) \u2192 wear_large_shoes(x)) ::: If someone is tall, they wear large shoes.\n\u2200x (wear_large_shoes(x) \u2192 wear_large_sized_clothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n\u00acwear_large_sized_clothes(\"yuri\") ::: Yuri does not wear large-size clothes.\nQuery:\n\u00acis_american(\"yuri\") ::: Yuri is an American.",
            "problem": " Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nYuri is an American."
        },
        {
            "example": 189,
            "response": [
                " -(is_american(\"yuri\")  &  is_basketball_player(\"yuri\"))",
                [
                    "exists x ((is_basketball_player(x)  &   -is_american(x)) )",
                    " all x (is_basketball_player(x)  ->  is_tall(x)) ",
                    " all x (is_tall(x)  ->  wear_large_shoes(x)) ",
                    "all x ((wear_large_shoes(x)  ->  wear_large_sized_clothes(x)) )",
                    " -wear_large_sized_clothes(\"yuri\") "
                ]
            ],
            "label": "True",
            "text": "Constants:\nyuri ::: represents yuri\nPredicates:\nis_basketball_player(x) ::: x is a basketball player.\nis_american(x) ::: x is American.\nis_tall(x) ::: x is tall.\nwear_large_shoes(x) ::: x wears large shoes.\nwear_large_sized_clothes(x) ::: x wears large-sized clothes.\nPremises:\n\u2203x (is_basketball_player(x) \u2227 \u00acis_american(x)) ::: Some basketball players are not American.\n\u2200x (is_basketball_player(x) \u2192 is_tall(x)) ::: All basketball players are tall.\n\u2200x (is_tall(x) \u2192 wear_large_shoes(x)) ::: If someone is tall, they wear large shoes.\n\u2200x (wear_large_shoes(x) \u2192 wear_large_sized_clothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n\u00acwear_large_sized_clothes(\"yuri\") ::: Yuri does not wear large-size clothes.\nQuery:\n\u00ac(is_american(\"yuri\") \u2227 is_basketball_player(\"yuri\")) ::: Yuri is not an American basketball player.",
            "problem": " Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nYuri is not an American basketball player."
        },
        {
            "example": 190,
            "response": [
                "is_american(\"yuri\")  &  is_basketball_player(\"yuri\")",
                [
                    "exists x ((is_basketball_player(x)  &   -is_american(x)) )",
                    " all x (is_basketball_player(x)  ->  is_tall(x)) ",
                    " all x (is_tall(x)  ->  wear_large_shoes(x)) ",
                    "all x ((wear_large_shoes(x)  ->  wear_large_sized_clothes(x)) )",
                    " -wear_large_sized_clothes(\"yuri\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nyuri ::: represents yuri\nPredicates:\nis_basketball_player(x) ::: x is a basketball player.\nis_american(x) ::: x is American.\nis_tall(x) ::: x is tall.\nwear_large_shoes(x) ::: x wears large shoes.\nwear_large_sized_clothes(x) ::: x wears large-sized clothes.\nPremises:\n\u2203x (is_basketball_player(x) \u2227 \u00acis_american(x)) ::: Some basketball players are not American.\n\u2200x (is_basketball_player(x) \u2192 is_tall(x)) ::: All basketball players are tall.\n\u2200x (is_tall(x) \u2192 wear_large_shoes(x)) ::: If someone is tall, they wear large shoes.\n\u2200x (wear_large_shoes(x) \u2192 wear_large_sized_clothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n\u00acwear_large_sized_clothes(\"yuri\") ::: Yuri does not wear large-size clothes.\nQuery:\nis_american(\"yuri\") \u2227 is_basketball_player(\"yuri\") ::: Yuri is an American basketball player.",
            "problem": " Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nYuri is an American basketball player."
        },
        {
            "example": 191,
            "response": [
                " -wear_large_shoes(\"yuri\")  ->  is_american(\"yuri\")  &  is_basketball_player(\"yuri\")",
                [
                    "exists x ((is_basketball_player(x)  &   -is_american(x)) )",
                    " all x (is_basketball_player(x)  ->  is_tall(x)) ",
                    " all x (is_tall(x)  ->  wear_large_shoes(x)) ",
                    "all x ((wear_large_shoes(x)  ->  wear_large_sized_clothes(x)) )",
                    " -wear_large_sized_clothes(\"yuri\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nyuri ::: represents yuri\nPredicates:\nis_basketball_player(x) ::: x is a basketball player.\nis_american(x) ::: x is American.\nis_tall(x) ::: x is tall.\nwear_large_shoes(x) ::: x wears large shoes.\nwear_large_sized_clothes(x) ::: x wears large-sized clothes.\nPremises:\n\u2203x (is_basketball_player(x) \u2227 \u00acis_american(x)) ::: Some basketball players are not American.\n\u2200x (is_basketball_player(x) \u2192 is_tall(x)) ::: All basketball players are tall.\n\u2200x (is_tall(x) \u2192 wear_large_shoes(x)) ::: If someone is tall, they wear large shoes.\n\u2200x (wear_large_shoes(x) \u2192 wear_large_sized_clothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n\u00acwear_large_sized_clothes(\"yuri\") ::: Yuri does not wear large-size clothes.\nQuery:\n\u00acwear_large_shoes(\"yuri\") \u2192 is_american(\"yuri\") \u2227 is_basketball_player(\"yuri\") ::: If Yuri does not wear large shoes, then Yuri is an American basketball player.",
            "problem": " Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Yuri does not wear large shoes, then Yuri is an American basketball player."
        },
        {
            "example": 192,
            "response": [
                "( -is_american(\"yuri\")  &   -is_basketball_player(\"yuri\"))  ->  is_basketball_player(\"yuri\")",
                [
                    "exists x ((is_basketball_player(x)  &   -is_american(x)) )",
                    " all x (is_basketball_player(x)  ->  is_tall(x)) ",
                    " all x (is_tall(x)  ->  wear_large_shoes(x)) ",
                    "all x ((wear_large_shoes(x)  ->  wear_large_sized_clothes(x)) )",
                    " -wear_large_sized_clothes(\"yuri\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nyuri ::: represents yuri\nPredicates:\nis_basketball_player(x) ::: x is a basketball player.\nis_american(x) ::: x is American.\nis_tall(x) ::: x is tall.\nwear_large_shoes(x) ::: x wears large shoes.\nwear_large_sized_clothes(x) ::: x wears large-sized clothes.\nPremises:\n\u2203x (is_basketball_player(x) \u2227 \u00acis_american(x)) ::: Some basketball players are not American.\n\u2200x (is_basketball_player(x) \u2192 is_tall(x)) ::: All basketball players are tall.\n\u2200x (is_tall(x) \u2192 wear_large_shoes(x)) ::: If someone is tall, they wear large shoes.\n\u2200x (wear_large_shoes(x) \u2192 wear_large_sized_clothes(x)) ::: If someone wears large shoes, they wear large-sized clothes.\n\u00acwear_large_sized_clothes(\"yuri\") ::: Yuri does not wear large-size clothes.\nQuery:\n(\u00acis_american(\"yuri\") \u2227 \u00acis_basketball_player(\"yuri\")) \u2192 is_basketball_player(\"yuri\") ::: If Yuri is not an American basketball player, then Yuri is a basketball player.",
            "problem": " Some basketball players are not American. All basketball players are tall. If someone is tall, they wear large shoes. If someone wears large shoes, they wear large-sized clothes. Yuri does not wear large-size clothes.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nIf Yuri is not an American basketball player, then Yuri is a basketball player."
        },
        {
            "example": 193,
            "response": [
                "all x ((is_sad(x)))",
                [
                    "all x ((is_happy(x)  |  is_sad(x)) )",
                    "exists x ((is_happy(x)) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\nevent ::: represents an event\nPredicates:\nis_happy(x) ::: x is happy.\nis_sad(x) ::: x is sad.\nPremises:\n\u2200x (is_happy(x) \u2228 is_sad(x)) ::: Events are either happy or sad.\n\u2203x (is_happy(x)) ::: At least one event is happy.\nQuery:\n\u2200x (is_sad(x)) ::: All events are sad.",
            "problem": " Events are either happy or sad. At least one event is happy. ",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nAll events are sad."
        },
        {
            "example": 194,
            "response": [
                " -is_winner(\"steinhauer\", \"du_maurier_classic_1992\")",
                [
                    "is_winner(\"steinhauer\", \"du_maurier_classic_1992\") ",
                    "participated_in(\"steinhauer\", \"du_maurier_classic_1992\") ",
                    "exists x ((on_leaderboard(x, \"du_maurier_classic_1992\")  &  is_from(x, \"belgium\")) )",
                    "is_from(\"descampe\", \"belgium\")  &  on_leaderboard(\"descampe\", \"du_maurier_classic_1992\") ",
                    "all x ((on_leaderboard(x, \"du_maurier_classic_1992\")  ->  participated_in(x, \"du_maurier_classic_1992\")) )"
                ]
            ],
            "label": "False",
            "text": "Constants:\nsteinhauer ::: represents Steinhauer\ndu_maurier_classic_1992 ::: represents the 1992 du Maurier Classic\nbelgium ::: represents Belgium\ndescampe ::: represents Descampe\nPredicates:\nis_winner(x, y) ::: x is the winner of y.\nparticipated_in(x, y) ::: x participated in y.\non_leaderboard(x, y) ::: x is on the leaderboard of y.\nis_from(x, y) ::: x is from y.\nPremises:\nis_winner(\"steinhauer\", \"du_maurier_classic_1992\") ::: The winner of the 1992 du Maurier Classic was Steinhauer.\nparticipated_in(\"steinhauer\", \"du_maurier_classic_1992\") ::: Steinhauer participated in the 1992 du Maurier Classic.\n\u2203x (on_leaderboard(x, \"du_maurier_classic_1992\") \u2227 is_from(x, \"belgium\")) ::: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nis_from(\"descampe\", \"belgium\") \u2227 on_leaderboard(\"descampe\", \"du_maurier_classic_1992\") ::: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\n\u2200x (on_leaderboard(x, \"du_maurier_classic_1992\") \u2192 participated_in(x, \"du_maurier_classic_1992\")) ::: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nQuery:\n\u00acis_winner(\"steinhauer\", \"du_maurier_classic_1992\") ::: Steinhauer was not the winner of the 1992 du Maurier Classic.",
            "problem": " The winner of the 1992 du Maurier Classic was Steinhauer. Steinhauer participated in the 1992 du Maurier Classic. There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium. Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic. All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nSteinhauer was not the winner of the 1992 du Maurier Classic."
        },
        {
            "example": 195,
            "response": [
                "exists x ((six_way_tie(x)  &  on_leaderboard(\"descampe\", \"1992_du_Maurier_Classic\")))",
                [
                    "winner(\"steinhauer\", \"1992_du_Maurier_Classic\") ",
                    "participated(\"steinhauer\", \"1992_du_Maurier_Classic\") ",
                    "exists x ((six_way_tie(x)  &  from_country(x, \"belgium\")) )",
                    "from_country(\"descampe\", \"belgium\")  &  on_leaderboard(\"descampe\", \"1992_du_Maurier_Classic\") ",
                    "all x ((on_leaderboard(x, \"1992_du_Maurier_Classic\")  ->  participated(x, \"1992_du_Maurier_Classic\")) )"
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nsteinhauer ::: represents Steinhauer\nbelgium ::: represents Belgium\ndescampe ::: represents Descampe\nPredicates:\nwinner(x, y) ::: x is the winner of y\nparticipated(x, y) ::: x participated in y\non_leaderboard(x, y) ::: x is on the leaderboard of y\nfrom_country(x, y) ::: x is from country y\nsix_way_tie(x) ::: x is in a six-way tie\nPremises:\nwinner(\"steinhauer\", \"1992_du_Maurier_Classic\") ::: The winner of the 1992 du Maurier Classic was Steinhauer.\nparticipated(\"steinhauer\", \"1992_du_Maurier_Classic\") ::: Steinhauer participated in the 1992 du Maurier Classic.\n\u2203x (six_way_tie(x) \u2227 from_country(x, \"belgium\")) ::: There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.\nfrom_country(\"descampe\", \"belgium\") \u2227 on_leaderboard(\"descampe\", \"1992_du_Maurier_Classic\") ::: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\n\u2200x (on_leaderboard(x, \"1992_du_Maurier_Classic\") \u2192 participated(x, \"1992_du_Maurier_Classic\")) ::: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\nQuery:\n\u2203x (six_way_tie(x) \u2227 on_leaderboard(\"descampe\", \"1992_du_Maurier_Classic\")) ::: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
            "problem": " The winner of the 1992 du Maurier Classic was Steinhauer. Steinhauer participated in the 1992 du Maurier Classic. There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium. Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic. All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic."
        },
        {
            "example": 196,
            "response": [
                "is_terricolous(\"kiki\")",
                [
                    "all x ((is_animal(x)  &  barks(x)  ->   -likes(\"jane\", x)) )",
                    "all x ((is_dog(x)  ->  (is_animal(x)  &  barks(x))) )",
                    "all x ((is_animal(x)  &  jumps(x)  ->  likes(\"jane\", x)) )",
                    "all x ((is_animal(x)  &  has_legs(x)  ->  jumps(x)) )",
                    "all x ((is_animal(x)  &  is_terricolous(x)  ->  has_legs(x)) )",
                    "( -jumps(\"kiki\")  &   -has_legs(\"kiki\"))  ->  (is_terricolous(\"kiki\")  |  has_legs(\"kiki\")) "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nkiki ::: represents kiki\nPredicates:\nbarks(x) ::: x barks.\nlikes(x, y) ::: x likes y.\nis_dog(x) ::: x is a dog.\nis_animal(x) ::: x is an animal.\njumps(x) ::: x jumps.\nhas_legs(x) ::: x has legs.\nis_terricolous(x) ::: x is terricolous.\nPremises:\n\u2200x (is_animal(x) \u2227 barks(x) \u2192 \u00aclikes(\"jane\", x)) ::: If an animal barks, then Jane does not like it.\n\u2200x (is_dog(x) \u2192 (is_animal(x) \u2227 barks(x))) ::: All dogs are animals that bark.\n\u2200x (is_animal(x) \u2227 jumps(x) \u2192 likes(\"jane\", x)) ::: If an animal jumps, then Jane likes it.\n\u2200x (is_animal(x) \u2227 has_legs(x) \u2192 jumps(x)) ::: If an animal has legs, then it jumps.\n\u2200x (is_animal(x) \u2227 is_terricolous(x) \u2192 has_legs(x)) ::: If an animal is terricolous, then it has legs.\n(\u00acjumps(\"kiki\") \u2227 \u00achas_legs(\"kiki\")) \u2192 (is_terricolous(\"kiki\") \u2228 has_legs(\"kiki\")) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nQuery:\nis_terricolous(\"kiki\") ::: KiKi is terricolous.",
            "problem": " If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs.  If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nKiKi is terricolous."
        },
        {
            "example": 197,
            "response": [
                "barks(\"kiki\")  &  is_dog(\"kiki\")",
                [
                    "all x ((is_animal(x)  &  barks(x)  ->   -likes(\"jane\", x)) )",
                    "all x ((is_dog(x)  ->  (is_animal(x)  &  barks(x))) )",
                    "all x ((is_animal(x)  &  jumps(x)  ->  likes(\"jane\", x)) )",
                    "all x ((is_animal(x)  &  has_legs(x)  ->  jumps(x)) )",
                    "all x ((is_animal(x)  &  is_terricolous(x)  ->  has_legs(x)) )",
                    "( -jumps(\"kiki\")  &   -has_legs(\"kiki\"))  ->  (is_terricolous(\"kiki\")  |  has_legs(\"kiki\")) "
                ]
            ],
            "label": "False",
            "text": "Constants:\nkiki ::: represents kiki\nPredicates:\nbarks(x) ::: x barks.\nlikes(x, y) ::: x likes y.\nis_dog(x) ::: x is a dog.\njumps(x) ::: x jumps.\nhas_legs(x) ::: x has legs.\nis_terricolous(x) ::: x is terricolous.\nPremises:\n\u2200x (is_animal(x) \u2227 barks(x) \u2192 \u00aclikes(\"jane\", x)) ::: If an animal barks, then Jane does not like it.\n\u2200x (is_dog(x) \u2192 (is_animal(x) \u2227 barks(x))) ::: All dogs are animals that bark.\n\u2200x (is_animal(x) \u2227 jumps(x) \u2192 likes(\"jane\", x)) ::: If an animal jumps, then Jane likes it.\n\u2200x (is_animal(x) \u2227 has_legs(x) \u2192 jumps(x)) ::: If an animal has legs, then it jumps.\n\u2200x (is_animal(x) \u2227 is_terricolous(x) \u2192 has_legs(x)) ::: If an animal is terricolous, then it has legs.\n(\u00acjumps(\"kiki\") \u2227 \u00achas_legs(\"kiki\")) \u2192 (is_terricolous(\"kiki\") \u2228 has_legs(\"kiki\")) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nQuery:\nbarks(\"kiki\") \u2227 is_dog(\"kiki\") ::: KiKi barks and is a dog.",
            "problem": " If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs.  If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nKiKi barks and is a dog."
        },
        {
            "example": 198,
            "response": [
                "( -barks(\"kiki\")  &   -is_dog(\"kiki\"))",
                [
                    "all x ((barks(x)  ->   -likes(\"jane\", x)) )",
                    "all x ((is_dog(x)  ->  (barks(x)  &  is_animal(x))) )",
                    "all x ((jumps(x)  ->  likes(\"jane\", x)) )",
                    "all x ((has_legs(x)  ->  jumps(x)) )",
                    "all x ((is_terricolous(x)  ->  has_legs(x)) )",
                    "( -jumps(\"kiki\")  &   -has_legs(\"kiki\"))  ->  (is_terricolous(\"kiki\")  |  has_legs(\"kiki\")) "
                ]
            ],
            "label": "True",
            "text": "Constants:\nkiki ::: represents kiki\nPredicates:\nbarks(x) ::: x barks.\nlikes(x, y) ::: x likes y.\nis_dog(x) ::: x is a dog.\njumps(x) ::: x jumps.\nhas_legs(x) ::: x has legs.\nis_terricolous(x) ::: x is terricolous.\nPremises:\n\u2200x (barks(x) \u2192 \u00aclikes(\"jane\", x)) ::: If an animal barks, then Jane does not like it.\n\u2200x (is_dog(x) \u2192 (barks(x) \u2227 is_animal(x))) ::: All dogs are animals that bark.\n\u2200x (jumps(x) \u2192 likes(\"jane\", x)) ::: If an animal jumps, then Jane likes it.\n\u2200x (has_legs(x) \u2192 jumps(x)) ::: If an animal has legs, then it jumps.\n\u2200x (is_terricolous(x) \u2192 has_legs(x)) ::: If an animal is terricolous, then it has legs.\n(\u00acjumps(\"kiki\") \u2227 \u00achas_legs(\"kiki\")) \u2192 (is_terricolous(\"kiki\") \u2228 has_legs(\"kiki\")) ::: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\nQuery:\n(\u00acbarks(\"kiki\") \u2227 \u00acis_dog(\"kiki\")) ::: KiKi neither barks nor is a dog.",
            "problem": " If an animal barks, then Jane does not like it. All dogs are animals that bark. If an animal jumps, then Jane likes it. If an animal has legs, then it jumps. If an animal is terricolous, then it has legs.  If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nKiKi neither barks nor is a dog."
        },
        {
            "example": 199,
            "response": [
                " -( exists x (plays_for(x, \"nautico\")  &  is_brazilian(x)))",
                [
                    "is_born_in(\"ailton_silva\", \"1995\")  &  is_known_as(\"ailton_silva\", \"ailton\")  &  is_football_player(\"ailton_silva\")  &  is_loaned_out_to(\"ailton_silva\", \"braga\")  &  plays_for(\"ailton_silva\", \"nautico\")  &  is_brazilian(\"ailton_silva\")  &  plays_for(\"ailton_silva\", \"nautico\")  &  plays_for(\"ailton_silva\", \"braga\")  &  is_football_club(\"nautico\")  &  is_football_club(\"braga\")  &  is_football_club(\"fluminense\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nailton_silva ::: represents ailton silva\nbraga ::: represents braga\nnautico ::: represents nautico\nfluminense ::: represents fluminense\nPredicates:\nis_born_in(x, y) ::: x is born in year y.\nis_known_as(x, y) ::: x is commonly known as y.\nis_football_player(x) ::: x is a football player.\nis_loaned_out_to(x, y) ::: x was loaned out to y.\nplays_for(x, y) ::: x plays for y.\nis_football_club(x) ::: x is a football club.\nis_brazilian(x) ::: x is Brazilian.\nPremises:\nis_born_in(\"ailton_silva\", \"1995\") \u2227 is_known_as(\"ailton_silva\", \"ailton\") \u2227 is_football_player(\"ailton_silva\") \u2227 is_loaned_out_to(\"ailton_silva\", \"braga\") \u2227 plays_for(\"ailton_silva\", \"nautico\") \u2227 is_brazilian(\"ailton_silva\") \u2227 plays_for(\"ailton_silva\", \"nautico\") \u2227 plays_for(\"ailton_silva\", \"braga\") \u2227 is_football_club(\"nautico\") \u2227 is_football_club(\"braga\") \u2227 is_football_club(\"fluminense\") ::: Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.\nQuery:\n\u00ac(\u2203x (plays_for(x, \"nautico\") \u2227 is_brazilian(x))) ::: No one playing for Nautico is Brazilian.",
            "problem": " Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nNo one playing for Nautico is Brazilian."
        },
        {
            "example": 200,
            "response": [
                " -plays_for(\"ailton_silva\", \"football_club\")",
                [
                    "is_born_in(\"ailton_silva\", \"1995\")  &  is_known_as(\"ailton_silva\", \"ailton\") ",
                    "is_football_player(\"ailton_silva\")  &  is_loaned_out_to(\"ailton_silva\", \"braga\") ",
                    "is_footballer(\"ailton_silva\")  &  plays_for(\"ailton_silva\", \"nautico\")  &  is_from(\"ailton_silva\", \"brazil\") ",
                    "is_football_club(\"nautico\")  &  is_football_club(\"braga\") ",
                    "is_football_club(\"fluminense\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nailton_silva ::: represents ailton silva\nbraga ::: represents braga\nnautico ::: represents nautico\nfluminense ::: represents fluminense\nPredicates:\nis_born_in(x, y) ::: x is born in y.\nis_known_as(x, y) ::: x is known as y.\nis_football_player(x) ::: x is a football player.\nis_loaned_out_to(x, y) ::: x is loaned out to y.\nplays_for(x, y) ::: x plays for y.\nis_football_club(x) ::: x is a football club.\nPremises:\nis_born_in(\"ailton_silva\", \"1995\") \u2227 is_known_as(\"ailton_silva\", \"ailton\") ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nis_football_player(\"ailton_silva\") \u2227 is_loaned_out_to(\"ailton_silva\", \"braga\") ::: Ailton is a football player who was loaned out to Braga.\nis_footballer(\"ailton_silva\") \u2227 plays_for(\"ailton_silva\", \"nautico\") \u2227 is_from(\"ailton_silva\", \"brazil\") ::: Ailton Silva is a Brazillian footballer who plays for Nautico.\nis_football_club(\"nautico\") \u2227 is_football_club(\"braga\") ::: Nautico is a football club along with Braga.\nis_football_club(\"fluminense\") ::: Fluminense is a football club.\nQuery:\n\u00acplays_for(\"ailton_silva\", \"football_club\") ::: Ailton Silva does not play for a football club.",
            "problem": " Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nAilton Silva foes not play for a football club."
        },
        {
            "example": 201,
            "response": [
                " -is_loaned_out_to(\"ailton_silva\", \"football_club\")",
                [
                    "is_born_in(\"ailton_silva\", 1995)  &  is_known_as(\"ailton_silva\", \"ailton\") ",
                    "is_football_player(\"ailton_silva\")  &  is_loaned_out_to(\"ailton_silva\", \"braga\") ",
                    "is_footballer(\"ailton_silva\")  &  plays_for(\"ailton_silva\", \"nautico\") ",
                    "is_football_club(\"nautico\")  &  is_football_club(\"braga\") "
                ]
            ],
            "label": "False",
            "text": "Constants:\nailton_silva ::: represents ailton silva\nbraga ::: represents braga\nnautico ::: represents nautico\nfluminense ::: represents fluminense\nPredicates:\nis_born_in(x, y) ::: x is born in year y.\nis_known_as(x, y) ::: x is commonly known as y.\nis_football_player(x) ::: x is a football player.\nis_loaned_out_to(x, y) ::: x was loaned out to y.\nplays_for(x, y) ::: x plays for y.\nis_football_club(x) ::: x is a football club.\nPremises:\nis_born_in(\"ailton_silva\", 1995) \u2227 is_known_as(\"ailton_silva\", \"ailton\") ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nis_football_player(\"ailton_silva\") \u2227 is_loaned_out_to(\"ailton_silva\", \"braga\") ::: Ailton is a football player who was loaned out to Braga.\nis_footballer(\"ailton_silva\") \u2227 plays_for(\"ailton_silva\", \"nautico\") ::: Ailton Silva is a Brazillian footballer who plays for Nautico.\nis_football_club(\"nautico\") \u2227 is_football_club(\"braga\") ::: Nautico is a football club along with Braga.\nQuery:\n\u00acis_loaned_out_to(\"ailton_silva\", \"football_club\") ::: Ailton was not loaned out to a football club.",
            "problem": " Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nAilton was not loaned out to a football club."
        },
        {
            "example": 202,
            "response": [
                "plays_for(\"ailton_silva\", \"fluminense\")",
                [
                    "is_known_as(\"ailton_silva\", \"ailton\") ",
                    "is_football_player(\"ailton_silva\")  &  is_loan_out_to(\"ailton_silva\", \"braga\") ",
                    "is_brazillian(\"ailton_silva\")  &  plays_for(\"ailton_silva\", \"nautico\") ",
                    "is_football_club(\"nautico\")  &  is_football_club(\"braga\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nailton_silva ::: represents ailton silva\nbraga ::: represents braga\nnautico ::: represents nautico\nfluminense ::: represents fluminense\nfootball_player ::: represents a football player\nfootball_club ::: represents a football club\nbrazillian ::: represents brazillian\nborn_in_1995 ::: represents born in 1995\nPredicates:\nis_known_as(x, y) ::: x is commonly known as y.\nis_loan_out_to(x, y) ::: x was loaned out to y.\nplays_for(x, y) ::: x plays for y.\nPremises:\nis_known_as(\"ailton_silva\", \"ailton\") ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nis_football_player(\"ailton_silva\") \u2227 is_loan_out_to(\"ailton_silva\", \"braga\") ::: Ailton is a football player who was loaned out to Braga.\nis_brazillian(\"ailton_silva\") \u2227 plays_for(\"ailton_silva\", \"nautico\") ::: Ailton Silva is a Brazillian footballer who plays for Nautico.\nis_football_club(\"nautico\") \u2227 is_football_club(\"braga\") ::: Nautico is a football club along with Braga.\nQuery:\nplays_for(\"ailton_silva\", \"fluminense\") ::: Ailton Silva played for Fluminense.",
            "problem": " Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nAilton Silva played for Fluminense."
        },
        {
            "example": 203,
            "response": [
                "is_loaned_out_to(\"ailton_silva\", \"football_club\")",
                [
                    "is_born_in(\"ailton_silva\", \"1995\")  &  is_known_as(\"ailton_silva\", \"ailton\") ",
                    "is_football_player(\"ailton_silva\")  &  is_loaned_out_to(\"ailton_silva\", \"braga\") ",
                    "is_footballer(\"ailton_silva\")  &  plays_for(\"ailton_silva\", \"nautico\") ",
                    "is_football_club(\"nautico\")  &  is_football_club(\"braga\") "
                ]
            ],
            "label": "Uncertain",
            "text": "Constants:\nailton_silva ::: represents ailton silva\nbraga ::: represents braga\nnautico ::: represents nautico\nfluminense ::: represents fluminense\nPredicates:\nis_born_in(x, y) ::: x is born in year y.\nis_known_as(x, y) ::: x is commonly known as y.\nis_football_player(x) ::: x is a football player.\nis_loaned_out_to(x, y) ::: x is loaned out to y.\nis_footballer(x) ::: x is a footballer.\nplays_for(x, y) ::: x plays for y.\nis_football_club(x) ::: x is a football club.\nPremises:\nis_born_in(\"ailton_silva\", \"1995\") \u2227 is_known_as(\"ailton_silva\", \"ailton\") ::: Ailton Silva, born in 1995, is commonly known as Ailton.\nis_football_player(\"ailton_silva\") \u2227 is_loaned_out_to(\"ailton_silva\", \"braga\") ::: Ailton is a football player who was loaned out to Braga.\nis_footballer(\"ailton_silva\") \u2227 plays_for(\"ailton_silva\", \"nautico\") ::: Ailton Silva is a Brazillian footballer who plays for Nautico.\nis_football_club(\"nautico\") \u2227 is_football_club(\"braga\") ::: Nautico is a football club along with Braga.\nQuery:\nis_loaned_out_to(\"ailton_silva\", \"football_club\") ::: Ailton Silva was loaned out to a football club.",
            "problem": " Ailton Silva, born in 1995, is commonly known as Ailton. Ailton is a football player who was loaned out to Braga. Ailton Silva is a Brazillian footballer who plays for Nautico. Nautico is a football club along with Braga. Fluminense is a football club.",
            "question": "Based on the above information , is the following statement true , false , or uncertain?\nAilton Silva was loaned out to a football club."
        }
    ]
}